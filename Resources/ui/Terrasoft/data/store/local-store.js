/**
 * A key-value store at the LocalStorage level
 */
Ext.define("LocalStore", {

	extend: "Terrasoft.BaseObject",

	alternateClassName: "Terrasoft.LocalStore",

	//region Properties: Protected

	/**
  * Texts of data warehouse overflow messages that are generated by different browsers.
  * @private
  * @type {String[]}
  */
	quotaExceededErrorMessages: null,

	/**
  * The name of the global key in the value of which the storage keys of the cache type are stored
  * @private
  * @type {String}
  */
	cacheGlobalKey: "terrasoftCaches",

	/**
  * The name of the global key in the value of which muna store keys are stored
  * @private
  * @type {String}
  */
	storeGlobalKey: "terrasoftStores",

	/**
  * Repository name
  * @protected
  * @type {String}
  */
	storeName: "",

	/**
  * Indicates the type of the repository. If true - cache type, else store type
  * @private
  * @type {Boolean}
  */
	isCache: null,

	/**
  * The separator of the name of the store and its key in the composite unique key of the localStorage entry
  * @private
  * @type {String}
  */
	levelKeySeparator: "@",

	//endregion

	//region Methods: Private

	/**
  * Checks for a global key with storage key entries. If there is no global key, creates a global key.
  * If there is a global key - appends the key of the created storage
  * @private
  */
	registerStore: function() {
		var globalKey = (this.isCache) ? this.cacheGlobalKey : this.storeGlobalKey;
		var globalRecord = this.getLocalStorageItem(globalKey);
		if (!globalRecord) {
			globalRecord = [];
		}
		if (!Terrasoft.contains(globalRecord, this.storeName)) {
			globalRecord.push(this.storeName);
			this.setLocalStorageItem(globalKey, globalRecord);
		}
	},

	/**
  * Checks for the presence of the key of the store to be stored in which the keys of its records are stored. If not, it creates such a key
  * @private
  */
	registerStoreKeys: function() {
		var storeKeys = this.getLocalStorageItem(this.storeName);
		if (!storeKeys) {
			this.setLocalStorageItem(this.storeName, []);
		}
	},

	/**
  * Writes the data to localStorage. Serializes data before writing and processes storage overflow
  * @private
  * @param {String} key
  * @param {String/Array/Object} value
  * @param {Boolean} throwException the pointer to the need to exclude when the storage is full
  * and system messages about the achievement of the storage limit
  */
	setLocalStorageItem: function(key, value, throwException) {
		if (Ext.isEmpty(key)) {
			throw new Terrasoft.ArgumentNullOrEmptyException({
				argumentName: "key"
			});
		}
		if (!Ext.isString(value)) {
			value = Ext.JSON.encode(value);
		}
		try {
			localStorage.setItem(key, value);
		} catch (e) {
			if (Terrasoft.contains(this.quotaExceededErrorMessages, e.name)) {
				if (throwException === true) {
					throw new Terrasoft.Terrasoft.UnknownException({
						message: e.maessage
					});
				}
				this.onQuotaExceededError(key, value);
			}
		}
	},

	/**
  * Deletes the entries for the specified store
  * @private
  * @param {String} storeName storage name
  */
	clearCacheByName: function(storeName) {
		var cacheKeys = this.getLocalStorageItem(storeName);
		Terrasoft.each(cacheKeys, function(cacheKey) {
			this.removeLocalStorageItem(storeName + this.levelKeySeparator + cacheKey);
		}, this);
		this.setLocalStorageItem(storeName, []);
	},

	/**
  * Returns data on the key from localStorage. De-serializes the received data.
  * If deserialization failed - returns them as is
  * @private
  * @param {String} key
  * @return {String/Array/Object}
  */
	getLocalStorageItem: function(key) {
		var result;
		var encodedValue = localStorage.getItem(key);
		try {
			result = (encodedValue === null) ? undefined : Ext.JSON.decode(encodedValue);
		} catch (e) {
			result = encodedValue;
		}
		return result;
	},

	/**
  * Deletes a key record from localStorage
  * @private
  * @param {String} key
  */
	removeLocalStorageItem: function(key) {
		localStorage.removeItem(key);
	},

	/**
  * Adds an entry key to the storage key list
  * @private
  * @param {String} key
  */
	addRecordKey: function(key) {
		var storeKeysRecord = this.getLocalStorageItem(this.storeName);
		var keyAlreadyExist = Terrasoft.contains(storeKeysRecord, key);
		if (!keyAlreadyExist) {
			storeKeysRecord.push(key);
			this.setLocalStorageItem(this.storeName, storeKeysRecord);
		}
	},

	/**
  * Deletes the entry key from the storage key list
  * @private
  * @param {String} key
  */
	removeRecordKey: function(key) {
		var storeKeysRecord = this.getLocalStorageItem(this.storeName);
		Ext.Array.remove(storeKeysRecord, key);
		this.setLocalStorageItem(this.storeName, storeKeysRecord);
	},

	//endregion

	//region Methods: Protected

	/**
  * Handles the storage overflow event
  * @protected
  * @param {String} key
  * @param {String} value
  */
	onQuotaExceededError: function(key, value) {
		this.clearCaches();
		this.setLocalStorageItem(key, value, true);
	},

	/**
  * Clears all cache-type stores in localStorage
  * @protected
  */
	clearCaches: function() {
		var globalCacheKeys = this.getLocalStorageItem(this.cacheGlobalKey);
		Terrasoft.each(globalCacheKeys, function(cacheKey) {
			this.clearCacheByName(cacheKey);
		}, this);
	},

	//endregion

	//region Methods: Public

	/**
	 * @inheritdoc Terrasoft.BaseObject#constructor
	 * @override
	 */
	constructor: function() {
		this.quotaExceededErrorMessages = ["QUOTA_EXCEEDED_ERR", "NS_ERROR_DOM_QUOTA_REACHED", "QuotaExceededError"];
		this.callParent(arguments);
		if (Ext.isEmpty(this.storeName)) {
			throw new Terrasoft.ArgumentNullOrEmptyException({
				argumentName: "storeName"
			});
		}
		if (Ext.isEmpty(this.isCache)) {
			throw new Terrasoft.ArgumentNullOrEmptyException({
				argumentName: "isCache"
			});
		}
		this.registerStore();
		this.registerStoreKeys();
	},

	/**
  * Creates a unique key for storing the storage
  * @param {String} key
  * @return {String}
  */
	getStoreKey: function(key) {
		if (Ext.isEmpty(key)) {
			throw new Terrasoft.ArgumentNullOrEmptyException({
				argumentName: "key"
			});
		}
		return this.storeName + this.levelKeySeparator + key;
	},

	/**
  * Writes data by key
  * @param {String} key
  * @param {String/Array/Object} value
  */
	setItem: function(key, value) {
		var storeKey = this.getStoreKey(key);
		this.setLocalStorageItem(storeKey, value);
		this.addRecordKey(key);
	},

	/**
  * Returns data by key
  * @param {String} key
  * @return {String/Array/Object}
  */
	getItem: function(key) {
		var storeKey = this.getStoreKey(key);
		return this.getLocalStorageItem(storeKey);
	},

	/**
  * Deletes a record by key
  * @param {String} key
  */
	removeItem: function(key) {
		var storeKey = this.getStoreKey(key);
		this.removeLocalStorageItem(storeKey);
		this.removeRecordKey(key);
	},

	/**
	 * Clears current cache.
	 */
	clear: function() {
		this.clearCacheByName(this.storeName);
	}

	//endregion

});
