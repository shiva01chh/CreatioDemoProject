/**
  * Draggable mixin for {@link Terrasoft.Grid}.
 */
Ext.define("Terrasoft.controls.mixins.DraggableGridMixin", {
	alternateClassName: "Terrasoft.DraggableGridMixin",

	extend: "Terrasoft.Draggable",

	/**
	 * @inheritdoc Terrasoft.core.mixins.Draggable#dragActionsCode
	 * @override
	 * @type {Number}
	 */
	dragActionsCode: 0,

	/**
	 * @inheritdoc Terrasoft.Draggable#dragCopy
	 * @override
	 */
	dragCopy: true,

	/**
	 * @inheritdoc Terrasoft.core.mixins.Draggable#showDropZoneHint
	 * @override
	 * @type {Boolean}
	 */
	showDropZoneHint: false,

	/**
  * The name of the DragAndDrop element groups
  * @type {String[]}
  */
	dragDropGroupName: null,

	/**
  * Markup the drag-element.
  * @type {Object}
  */
	dragItemHTML: new Ext.Template("<span>{0}</span>"),

	/**
  * Css class for a drag-element clone.
  * @type {String}
  */
	dragCloneItemCss: "drag-element",

	/**
  * Array of CSS drag-element classes.
  * @type {String[]}
  */
	dragItemClasess: null,

	/**
	 * @inheritdoc Terrasoft.core.mixins.Draggable#isTarget
	 * @override
	 * @type {Boolean}
	 */
	isTarget: false,

	/**
  * @inheritdoc Terrasoft.core.mixins.Draggable#getGroupName
  * @override
  * @return {String} The name of the DragAndDrop group of elements.
  */
	getGroupName: function() {
		return this.dragDropGroupName;
	},

	/**
  * @inheritdoc Terrasoft.core.mixins.Draggable#getDraggableConfig
  * @override
  * @return {Object} Returns the operation settings object.
  */
	getDraggableConfig: function(row) {
		var config = {};
		config[Terrasoft.DragAction.MOVE] = {
			autoGenerateDraggableElement: false,
			elementId: this.id + this.collectionItemPrefix + row.Id,
			handlers: {
				b4StartDrag: "b4StartDrag",
				onDragDrop: "onDragDrop",
				onDragOver: "onDragOver",
				onInvalidDrop: "onInvalidDrop",
				alignElWithMouse: "alignElWithMouse"
			}
		};
		return config;
	},

	/**
	 * @inheritdoc Terrasoft.core.mixins.Draggable#b4StartDrag
	 * @override
	 */
	b4StartDrag: function() {
		var currentDraggable = Ext.dd.DragDropManager.dragCurrent;
		var draggableId = currentDraggable.id;
		var draggableWithoutId = draggableId.replace(this.id, "");
		var rowId = draggableWithoutId.replace(this.collectionItemPrefix, "");
		this.setActiveRow(rowId);
		var wrapEl = Ext.get(draggableId);
		if (wrapEl) {
			var clone = this.createDraggableClone(wrapEl.dom);
			this.appendDraggableClone(clone);
			wrapEl.setVisible(this.dragCopy);
		}
		if (this.showDropZoneHint) {
			this.setDropZoneHintVisible(true);
		}
	},

	/**
  * The method is called when the drag element is released above the drop-zone.
  * @param {Event} event Mouse-click event.
  * @param {String} id The identifier of the drop zone.
  */
	onDragDrop: function(event, id) {
		var reRenderConfig = {
			byCollection: true
		};
		var selectItem = this.collection.find(this.activeRow);
		this.fireEvent("dragDrop", event, id, selectItem);
		this.reRender(reRenderConfig);
	},

	/**
  * The method is called when the drag element crosses the drop-zone.
  * @param {Event} event The mouse move event.
  * @param {String} id The identifier of the drop zone.
  */
	onDragOver: function(event, id) {
		this.fireEvent("dragOver", event, id);
	},

	/**
  * The method is called when the drag element is released outside the drop zone.
  * @param {Event} event Mouse-click event.
  * @param {String} id The identifier of the drop zone.
  */
	onInvalidDrop: function(event, id) {
		var reRenderConfig = {
			byCollection: true
		};
		this.fireEvent("invalidDrop", event, id);
		this.reRender(reRenderConfig);
	},

	/**
  * Sets the position of the drag element, relative to the location of the cursor.
  * @param {Ext.dom.Element} element
  * @param {Number} left Abscissa.
  * @param {Number} top Ordinate.
  */
	alignElWithMouse: function(element, left, top) {
		var coordinate = this.getDragElementCoordinate(element, left, top);
		var styles = Ext.DomHelper.generateStyles({
			position: "absolute",
			right: "auto",
			left: coordinate.left + "px",
			top: coordinate.top + "px"
		});
		element.setAttribute("style", styles);
	},

	/**
  * Returns the coordinates of the drag element.
  * @param {Ext.dom.Element} element
  * @param {Number} left abscissa.
  * @param {Number} top Ordinate.
  * @return {Object} Returns the coordinates of {left: number, top: number}.
  */
	getDragElementCoordinate: function(element, left, top) {
		return {
			left: left - (element.offsetWidth / 2),
			top: top - (element.offsetHeight / 2)
		};
	},

	/**
  * @inheritdoc Terrasoft.core.mixins.Draggable#getDraggableElementDefaultConfig
  * @override
  * @return {Object} Object of additional parameters for initializing a drag element.
  */
	getDraggableElementDefaultConfig: function() {
		return {
			isTarget: this.isTarget,
			instance: this
		};
	},

	/**
	 * @inheritdoc Terrasoft.core.mixins.Draggable#getActionDraggableConfig
	 * @override
	 */
	getActionDraggableConfig: function(action, row) {
		if (!this.defaultDraggableConfig) {
			this.defaultDraggableConfig = this.getDefaultDraggableConfig();
		}
		var defaultDraggableConfig = this.defaultDraggableConfig || {};
		var draggableConfig = this.getDraggableConfig(row) || {};
		return Ext.Object.merge(defaultDraggableConfig[action], draggableConfig[action]);
	},

	/**
	 * @inheritdoc Terrasoft.core.mixins.Draggable#initDraggableElement
	 * @override
	 */
	initDraggableElement: function(action) {
		if (!this.collection && this.collection.getCount() === 0 && !this.dragDropGroupName) {
			return;
		}
		this.collection.each(function(item) {
			var actionConfig = this.getActionDraggableConfig(action, item);
			if (!actionConfig) {
				return;
			}
			var elementId = this.id + this.collectionItemPrefix + item.get("Id");
			var element = Ext.get(elementId);
			if (!element) {
				return;
			}
			if (actionConfig.autoGenerateDraggableElement) {
				this.generateDraggableElement(elementId,
					Ext.String.format(actionConfig.autoGenerateDraggableElementTpl, this.id));
			} else if (element.dom && element.dom.childNodes) {
				var children = element.dom.childNodes;
				for (var i = 0; i < children.length; i++) {
					children[i].id = elementId + "-draggable-item-move";
					children[i].classList.add("draggable-item-move");
				}
			}
			var overrides = this.bindConfigHandlers(actionConfig.handlers);
			var ddItem = element.initDD(elementId, Ext.apply(this.getDraggableElementDefaultConfig(),
				actionConfig.getInitConfigMethod), overrides);
			var groups = this.getGroupName();
			if (Ext.isArray(groups)) {
				Terrasoft.each(groups, function(group) {
					ddItem.addToGroup(group);
				}, this);
			} else {
				ddItem.addToGroup(groups);
			}
		}, this);
	},

	/**
	 * @inheritdoc Terrasoft.core.mixins.Draggable#generateDraggableElement
	 * @override
	 */
	generateDraggableElement: function(elementId, html) {
		var wrapEl = Ext.get(elementId);
		if (!wrapEl) {
			return;
		}
		wrapEl.insertHtml("beforeEnd", html);
	},

	/**
  * @inheritdoc Terrasoft.core.mixins.Draggable#getDraggableElementIds
  * @override
  * @return {String[]} Returns an array of identifiers for drag elements.
  */
	getDraggableElementIds: function() {
		if (this.collection.getCount() === 0) {
			return;
		}
		var elements = [];
		this.collection.each(function(item) {
			var elementId = this.id + this.collectionItemPrefix + item.get("Id");
			if (elementId) {
				elements.push(elementId);
			}
		}, this);
		return elements;
	},

	/**
	 * @inheritdoc Terrasoft.core.mixins.Draggable#createDraggableClone
	 * @override
	 */
	createDraggableClone: function() {
		var clone = this.callParent(arguments);
		clone.classList.remove("grid-pad");
		clone.classList.add(this.dragCloneItemCss);
		if (this.dragItemClasess && Ext.isArray(this.dragItemClasess)) {
			Terrasoft.each(this.dragItemClasess, function(clases) {
				clone.classList.add(clases);
			});
		}
		var selectedRowId = this.model.get("ActiveRow");
		var item = this.collection.find(selectedRowId);
		if (item && this.dragItemHTML) {
			clone.innerHTML = Ext.String.format(this.dragItemHTML.html, item.get(item.primaryDisplayColumnName));
		}
		return clone;
	}
});