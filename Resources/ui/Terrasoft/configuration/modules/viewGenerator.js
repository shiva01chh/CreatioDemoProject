define(['ext-base', 'terrasoft'], function(Ext, Terrasoft) {
	var exports = {};
	//------------------------------------------------------------------------------------------------------------------

	var entitySchema;

	function getFullViewModelSchema(sourceViewModelSchema) {
		var viewModelSchema = Terrasoft.utils.common.deepClone(sourceViewModelSchema);
		applyUserCode(viewModelSchema, sourceViewModelSchema);
		return viewModelSchema;
	}

	function applyUserCode(viewModelSchema, sourceViewModelSchema) {
		sourceViewModelSchema.userCode.call(viewModelSchema);
	}

	function getLabelConfig(schemaItem) {
		var caption;
		switch (schemaItem.type) {
			case Terrasoft.ViewModelSchemaItem.ATTRIBUTE:
				var entitySchemaColumn =  entitySchema.getColumnByPath(schemaItem.columnPath);
				caption = entitySchemaColumn ? entitySchemaColumn.caption : schemaItem.caption;
				break;
			case Terrasoft.ViewModelSchemaItem.METHOD:
				caption = schemaItem.caption;
				break;
		}
		return {
			className: 'Terrasoft.Label',
			caption: caption || '',
			classes: {
				labelClass: ['controlCaption']
			}
			//tpl: ['<label {inputId} id = {id} class = "{customLabelClass}" style = "{labelStyle}">{caption}</label>']
		};
	}

	function getControlConfig(schemaItem, bindings) {
		var dataValueType;
		var additionalConfig = {};
		switch (schemaItem.type) {
			case Terrasoft.ViewModelSchemaItem.ATTRIBUTE:
				var entitySchemaColumn = entitySchema.getColumnByPath(schemaItem.columnPath);
				dataValueType =
					entitySchemaColumn.isLookup ? Terrasoft.DataValueType.LOOKUP : entitySchemaColumn.dataValueType;
				additionalConfig.isRequired = (entitySchemaColumn.isRequired === true);
				break;
			case Terrasoft.ViewModelSchemaItem.METHOD:
				dataValueType = schemaItem.dataValueType;
				additionalConfig.readonly = true;
				break;
		}
		var customConfig = schemaItem.customConfig;
		customConfig = customConfig && Terrasoft.utils.common.deepClone(schemaItem.customConfig);
		var controlConfig = Terrasoft.getControlConfigByDataValueType(dataValueType);
		Ext.apply(controlConfig, additionalConfig);
		customConfig && Ext.apply(controlConfig, customConfig);
		applyBindingsConfig(controlConfig, schemaItem, bindings);
		return controlConfig;
	}

	function generateView(container, columnsObject, bindings) {
		var items = container.items;
		Terrasoft.each(columnsObject, function(schemaItem) {
			if (schemaItem.visible === false) {
				return;
			}
			var labelConfig;
			var controlConfig;
			var itemType = schemaItem.type;
			switch (itemType) {
				case Terrasoft.ViewModelSchemaItem.ATTRIBUTE:
				case Terrasoft.ViewModelSchemaItem.METHOD:
					labelConfig = getLabelConfig(schemaItem);
					items.push(labelConfig);
					controlConfig = getControlConfig(schemaItem, bindings);
					items.push(controlConfig);
					break;
				case Terrasoft.ViewModelSchemaItem.GROUP:
					var containerConfig = {
						alternateClassName: 'Terrasoft.Container',
						caption: schemaItem.caption,
						items: []
					};
					generateView(containerConfig, schemaItem.items, bindings);
					items.push(containerConfig);
					break;
				case Terrasoft.ViewModelSchemaItem.DETAIL:
					break;
				default:
					break;
			}
		}, this);
	}

	function isLookupSchemaItem(schemaItem) {
		var isLookup = false;
		var schemaItemType = schemaItem.type;
		switch(schemaItemType) {
			case Terrasoft.ViewModelSchemaItem.METHOD:
				isLookup = (schemaItem.dataValueType == Terrasoft.DataValueType.LOOKUP);
				break;
			case Terrasoft.ViewModelSchemaItem.ATTRIBUTE:
				var entitySchemaColumn = entitySchema.getColumnByPath(schemaItem.columnPath);
				isLookup = entitySchemaColumn.isLookup;
				break;
			default:
				isLookup = false;
		}
		return isLookup;
	}

	function applyBindingsConfig(controlConfig, schemaItem, bindings) {
		var itemName = schemaItem.name;
		var binding = bindings[itemName];
		binding && Ext.apply(controlConfig, binding);
		var defaultBindingConfig = {
			value: '{@' + schemaItem.name + '}'
		};
		if (isLookupSchemaItem(schemaItem)) {
			var listName = schemaItem.list || schemaItem.name + 'List';
			defaultBindingConfig.list = '{@' + listName + '}';
		}
		Ext.apply(controlConfig, defaultBindingConfig);
	}

	function getContainerConfig(id) {
		return {
			alternateClassName: 'Terrasoft.Container',
			items: [],
			id: id,
			selectors: {
				wrapEl: '#' + id
			}
		};
	}

	Ext.apply(exports, {
		generate: function(viewModelSchema) {
			var fullViewModelSchema = getFullViewModelSchema(viewModelSchema);
			entitySchema = Ext.ClassManager.classes[fullViewModelSchema.entitySchema];
			var viewConfig = getContainerConfig('autoGeneratedContainer');
			var leftPanelConfig = getContainerConfig('autoGeneratedLeftContainer');
			Ext.apply(leftPanelConfig, {
				styles: {
					wrapStyles: {
						width: '350px;',
						float: 'left;'
					}
				}
			});
			var rightPanelConfig = getContainerConfig('autoGeneratedRightContainer');
			Ext.apply(rightPanelConfig, {
				styles: {
					wrapStyles: {
						'margin-left': '400px;'
					}
				}
			});
			viewConfig.items = [leftPanelConfig, rightPanelConfig];
			generateView(leftPanelConfig, fullViewModelSchema.schema.leftPanel, fullViewModelSchema.bindings);
			return viewConfig;
		}
	});

	//------------------------------------------------------------------------------------------------------------------
	return exports;
});