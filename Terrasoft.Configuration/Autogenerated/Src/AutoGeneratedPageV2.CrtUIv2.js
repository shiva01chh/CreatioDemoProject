/* jshint ignore:start */
/* jscs:disable */
define("AutoGeneratedPageV2", ["LookupUtilities", "CustomProcessPageV2Utilities"],
	function(LookupUtilities) {
		return {
			mixins: {
				BaseProcessViewModel: "Terrasoft.CustomProcessPageV2Utilities"
			},
			messages: {

				/**
				 * @message InitDataViews
				 * Changes current page header.
				 */
				"InitDataViews": {
					mode: Terrasoft.MessageMode.PTP,
					direction: Terrasoft.MessageDirectionType.PUBLISH
				}
			},
			attributes: {},
			entitySchemaName: null,
			details: /**SCHEMA_DETAILS*/{
			}/**SCHEMA_DETAILS*/,
			methods: {

				/**
				 * @inheritdoc Terrasoft.BasePageV2#initHeaderCaption
				 * @overridden
				 */
				initHeaderCaption: Terrasoft.emptyFn,

				/**
				 * @inheritdoc Terrasoft.PrintReportUtilities#getCardPrintButtonVisible
				 * @overridden
				 */
				initCardPrintForms: function(callback, scope) {
					const printMenuItems = this.Ext.create("Terrasoft.BaseViewModelCollection");
					this.set(this.moduleCardPrintFormsCollectionName, printMenuItems);
					if (callback) {
						callback.call(scope || this);
					}
				},

				/**
				 * Completes execution process element with validation inputs.
				 * @protected
				 */
				completeProcessElementWithVerification: function() {
					const pressedButtonName = arguments[3];
					this.asyncValidate(function(result) {
						if (result.success) {
							this.acceptProcessElement(pressedButtonName);
						} else {
							this.showInformationDialog(result.message);
						}
					}, this);
				},

				/**
				 * Completes execution process element.
				 * @protected
				 */
				completeProcessElement: function() {
					this.acceptProcessElement(arguments[3]);
				},

				/**
				 * @inheritdoc Terrasoft.BasePageV2#onCloseCardButtonClick
				 * @overridden
				 */
				onCloseCardButtonClick: function() {
					this.sandbox.publish("BackHistoryState");
				},

				/**
				 * @inheritdoc Terrasoft.BasePageV2#onDiscardChangesClick
				 * @overridden
				 */
				onDiscardChangesClick: function() {
					this.sandbox.publish("BackHistoryState");
				},

				/**
				 * @inheritdoc Terrasoft.PrintReportUtilities#initPrintButtonMenu
				 * @overridden
				 */
				initPrintButtonMenu: Ext.emptyFn,

				/**
				 * @inheritdoc Terrasoft.BasePageV2#getHeader
				 * @overridden
				 */
				getHeader: function() {
					return this.get("header");
				},


				/**
				 * @inheritdoc Terrasoft.BasePageV2#initContainersVisibility
				 * @overridden
				 */
				initContainersVisibility: function() {
					this.callParent(arguments);
					this.set("IsPageHeaderVisible", false);
				},

				/**
				 * @inheritdoc Terrasoft.BasePageV2#init
				 * @overridden
				 */
				init: function() {
					this.set("IsSeparateMode", true);
					this.callParent(arguments);
				},

				/**
				 * @inheritdoc Terrasoft.EntityBaseViewModelMixin#findEntityColumn
				 * @overridden
				 */
				findEntityColumn: function(columnName) {
					let column = this.callParent(arguments);
					if (!column) {
						column = this.getColumnByName(columnName);
					}
					return column;
				},

				/**
				 * Opens lookup page.
				 * @protected
				 * @param {Object} args Arguments.
				 * @param {String} tag Column name.
				 */
				loadVocabulary: function(args, tag) {
					const column = this.findEntityColumn(tag);
					if (!column || !column.isLookup) {
						return;
					}
					const entitySchemaName = column.referenceSchemaName;
					const config = {
						entitySchemaName: entitySchemaName,
						multiSelect: false,
						columnName: tag,
						columnValue: this.get(tag),
						searchValue: args.searchValue
					};
					const handler = function (args) {
						const columnName = args.columnName;
						const collection = args.selectedRows.collection;
						if (collection.length > 0) {
							this.set(columnName, collection.items[0]);
						}
					};
					LookupUtilities.Open(this.sandbox, config, handler, this, null, false, false);
				},

				/**
				 * @inheritdoc Terrasoft.BasePageV2#isChanged
				 * @override
				 */
				isChanged: function() {
					return this.isParametersChanged() || this.callParent(arguments);
				}
			},
			diff: /**SCHEMA_DIFF*/[
				{
					"operation": "remove",
					"name": "ToolsButton"
				}, {
					"operation": "remove",
					"name": "SaveButton"
				}, {
					"operation": "remove",
					"name": "DiscardChangesButton"
				}, {
					"operation": "remove",
					"name": "ButtonCancel"
				}, {
					"operation": "remove",
					"name": "DelayExecutionButton"
				}, {
					"operation": "remove",
					"name": "ViewOptionsButton"
				}, {
					"operation": "remove",
					"name": "Tabs"
				}, {
					"operation": "merge",
					"name": "ActionButtonsContainer",
					"values": {
						"visible": true
					}
				}, {
					"operation": "merge",
					"name": "actions",
					"values": {
						"visible": false
					}
				}, {
					"operation": "remove",
					"name": "BackButton"
				}, {
					"operation": "merge",
					"name": "HeaderCaptionContainer",
					"parentName": "CardContentContainer",
					"values": {
						"visible": true
					}
				}, {
					"operation": "remove",
					"name": "Header"
				}, {
					"operation": "insert",
					"name": "AutoGeneratedPageContentContainer",
					"parentName": "HeaderContainer",
					"propertyName": "items",
					"values": {
						"itemType": Terrasoft.ViewItemType.CONTAINER,
						"items": []
					}
				}, {
					"operation": "insert",
					"parentName": "AutoGeneratedPageContentContainer",
					"propertyName": "items",
					"name": "AutoGeneratedPageContentBlock",
					"values": {
						"itemType": Terrasoft.ViewItemType.GRID_LAYOUT,
						"items": []
					}
				}
			]/**SCHEMA_DIFF*/,
			userCode: {}
		};
	});
/* jscs:enable */
/* jshint ignore:end */
