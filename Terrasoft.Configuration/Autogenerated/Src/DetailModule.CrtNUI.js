define('DetailModule', ['DetailViewGenerator', 'EditDetailViewGenerator', 'DetailViewModelGenerator',
	'DetailModuleResources', 'GridUtilities', 'ConfigurationEnums', 'performancecountermanager', 'MaskHelper'],
	function(DetailViewGenerator, EditDetailViewGenerator, DetailViewModelGenerator, resources, GridUtilities,
	         ConfigurationEnums, performanceCounterManager, MaskHelper) {
		function createConstructor(context) {
			var Ext = context.Ext;
			var sandbox = context.sandbox;
			var Terrasoft = context.Terrasoft;
			var editDetailTypeItems = [];
//			var inputModels = new Terrasoft.Collection();
			var inputViews = new Terrasoft.Collection();
			var view;
			var viewConfig;
			var viewModel;
			var loadedSchemas = [];
			var userCodesSettings;
			var columnsSettingsProfileKey;


			function init() {
				sandbox.subscribe('SaveDetails', saveDetails, [sandbox.id]);
				sandbox.subscribe('RequestDetailItems', RequestDetailItems, [sandbox.id]);
				sandbox.subscribe('SetDetailReadOnly', SetReadOnly, [sandbox.id]);
			}

			function SetReadOnly(args) {
				if (!viewModel) {
					return;
				}
				if (args && args.disableDetails === true) {
					viewModel.setReadOnly(true);
				} else {
					viewModel.setReadOnly(false);
				}
			}

			function validateDetail() {
				var isValid = true;
				var gridData = viewModel.get('gridData');
				Terrasoft.each(gridData.getItems(), function(item) {
					if (!item.get('toDelete') && !item.validate()) {
						isValid = isValid && false;
					}
				});
				return isValid;
			}

			function saveDetails() {
				if (!viewModel) {
					return;
				}
				if (viewModel.schemaType === Terrasoft.SchemaType.GRID_DETAIL_VIEW_MODEL_SCHEMA) {
					return true;
				}
				var isDetailValid = validateDetail();
				if (isDetailValid) {
					var gridData = viewModel.get('gridData');
					var detailItems = gridData.getItems();
					if (!detailItems.length) {
						return true;
					}
					var detailItemProcessed = function() {
						detailItemProcessed.itemsLeft--;
						if (!detailItemProcessed.itemsLeft) {
							sandbox.publish('DetailSaved', null, [sandbox.id]);
						}
					};
					detailItemProcessed.itemsLeft = detailItems.length;
					var doActionEntityConsequentially = function(currentModel, prevModel, toDelete) {
						var callback = function() {
							if (prevModel) {
								prevModel.doActionEntityConsequentially();
							}
							detailItemProcessed();
						};
						return function() {
							if (toDelete) {
								currentModel.deleteEntity(callback, this);
							} else {
								currentModel.saveEntity(callback, this);
							}
						}
					};
					var modelForDoAction = null;
					Terrasoft.each(detailItems, function(model) {
						model.doActionEntityConsequentially = doActionEntityConsequentially(model, modelForDoAction,
							model.get('toDelete'));
						modelForDoAction = model;
					});
					if (modelForDoAction) {
						modelForDoAction.doActionEntityConsequentially();
					}
				} else {
					return {cancel: true}
				}
			}

			function RequestDetailItems() {
				if (!viewModel) {
					return;
				}
				return {
					collection: viewModel.get('gridData').getItems()
				};
			}

			function createItem(item, renderTo, viewModelConfigName, action) {
				if (!renderTo.items) {
					renderTo.items = [];
				}
				var itemViewModel = Ext.create(viewModelConfigName);
				Terrasoft.each(itemViewModel.columns, function(column, columnName) {
					if ((column.type === Terrasoft.ViewModelColumnType.ENTITY_COLUMN) &&
						(column.isCollection !== true)) {
						var itemColumnValue = item.get(columnName);
						if (itemColumnValue !== undefined) {
							this.setColumnValue(columnName, itemColumnValue);
						}
					}
				}, itemViewModel);
				if (!itemViewModel.get(itemViewModel.primaryColumnName)) {
					itemViewModel.setDefaultValues();
				}
				Terrasoft.each(itemViewModel.columns, function(column) {
					if (column.isCollection === true) {
						itemViewModel.set(column.name, new Terrasoft.Collection());
					}
				});
				itemViewModel.isNew = item.isNew;
				if (itemViewModel.isNew) {
					itemViewModel.set(viewModel.filterPath, {value: viewModel.filterValue});
				}
				var itemKey = itemViewModel.instanceId;
				var container;
				if (viewModel.getCustomItemView) {
					container = viewModel.getCustomItemView(viewModel, itemKey, action, editDetailTypeItems,
						itemViewModel);
				} else {
					container = EditDetailViewGenerator.generateItem(viewModel, itemKey, action, editDetailTypeItems);
				}
				var itemView = Ext.create(container.className || 'Terrasoft.Container', container);
				inputViews.add(itemKey, itemView);
				itemView.bind(itemViewModel);

				itemView.render(view.items.get(renderTo.id + 'autoGeneratedGridContainer').getWrapEl());
				return itemViewModel;
			}

			function loadView(renderTo, sandbox, Ext, instance) {
				if (viewModel && !viewModel.isObsolete) {
					var config = Terrasoft.deepClone(viewConfig);
					view = Ext.create(config.className || 'Terrasoft.Container',
						config);
					view.bind(viewModel);
					viewModel.reload();
					viewModel.set('renderTo', renderTo);
					view.render(renderTo);
					resumeScroll.call(viewModel);
					return;
				}
				if (viewModel && viewModel.isObsolete) {
					viewModel.isObsolete = false;
				}
				var moduleId = sandbox.id;
				sandbox.subscribe('LoadData', function(args) {
					if (instance.isDestroyed || !renderTo || !renderTo.dom) {
						return;
					}
					if (moduleId === args.Id) {
						var detailSchema = args.schemaName;
						var cardSchema = args.parentChemaName;
						columnsSettingsProfileKey = cardSchema + detailSchema + 'GridSettings';
						var map = {};
						map[detailSchema] = {
							sandbox: 'sandbox_' + sandbox.id,
							'ext-base': 'ext_' + Ext.id
						};
						requirejs.config({
							map: map
						});
						loadedSchemas.push(detailSchema);
						require([detailSchema, 'profile!' + columnsSettingsProfileKey],
							function(schemaConfig, columnsSettingsProfile) {
								if (instance.isDestroyed) {
									return;
								}
								var schemaConfigCopy = Terrasoft.deepClone(schemaConfig);
								getSchemaUserCodes(schemaConfigCopy, [], function(schema, userCodes) {
									if (instance.isDestroyed) {
										return;
									}
									schema.extend = 'Terrasoft.model.BaseViewModel';
									var type = schema.type;
									schema.filterPath = args.filterPath;
									schema.parentModuleSandboxId = args.cardModuleSandboxId;
									if (args && !Ext.isEmpty(Terrasoft[args.entitySchemaName])) {
										schema.entitySchema = Terrasoft[args.entitySchemaName];
									}
									var schemaCopy = Terrasoft.deepClone(schema);
									var itemViewModelConfig =
										DetailViewModelGenerator.generateItem(schemaCopy, userCodes, args.entityInfo);
									itemViewModelConfig.onDeleted = function(isNew) {
										var itemkey = this.instanceId;
										var view = inputViews.get(itemkey);
										var model = this;
										view.destroy();
										if (isNew) {
											model.destroy();
											viewModel.get('gridData').remove(this);
										}
										inputViews.removeByKey(itemkey);
										if (viewModel.loadAllRowsCount) {
											viewModel.loadAllRowsCount();
										}
									};
									itemViewModelConfig.isNewRecord = function() {
										return args.operationType === 'add';
									};
									Ext.define(itemViewModelConfig.name, itemViewModelConfig);
									schemaCopy = Terrasoft.deepClone(schema);
									var viewModelConfig = DetailViewModelGenerator.generate(schemaCopy,
										userCodes, columnsSettingsProfile);
									viewModelConfig.sandbox = sandbox;
									viewModelConfig.cardAction = args.operationType;
									if (viewModelConfig.loadAll) {
										args.pageRowCount = -1;
									}
									Ext.define(viewModelConfig.name, viewModelConfig);
									viewModel = Ext.create(viewModelConfig.name, {
										values: viewModelConfig.values
									});
									viewModel.gridType = itemViewModelConfig.gridType;
									viewModel.showLoadAllButton = itemViewModelConfig.showLoadAllButton;
									viewModel.utilsConfig = itemViewModelConfig.utilsConfig;
									Terrasoft.each(viewModel.columns, function(column) {
										if (column.isCollection === true) {
											viewModel.set(column.name, new Terrasoft.BaseViewModelCollection());
										}
									});
									viewModel.destroy = function() {
										requirejs.undef(detailSchema);
									};
									viewModel.getCardModuleSandboxId = function() {
										return args.cardModuleSandboxId;
									};
									var isReadOnly = sandbox.publish('GetIsDetailReadonly', args.name,
										[viewModel.getCardModuleSandboxId()]);
									viewModel.set('isReadOnly', isReadOnly);
									viewModel.isInstanceDestroyed = function() {
										return instance.isDestroyed;
									};
									viewModel.schemaType = type;
									sandbox.subscribe('ReloadDetail', function(customArgs) {
										Ext.apply(args, customArgs);
										viewModel.clear();
										viewModel.load(args);
									}, [moduleId]);
									if (type === Terrasoft.SchemaType.GRID_DETAIL_VIEW_MODEL_SCHEMA) {
										userCodesSettings = userCodes;
										viewConfig = DetailViewGenerator.generate(schema, userCodes,
											renderTo.id, args.operationType, columnsSettingsProfile);
										var config = Terrasoft.deepClone(viewConfig);
										view = Ext.create(config.className || 'Terrasoft.Container', config);
										viewModel.getContainer = function() {
											return renderTo;
										};
										viewModel.openGridSettingPage = function() {
											MaskHelper.ShowBodyMask();
											var gridSettingsId = 'ViewModule_GridSettings_' + sandbox.id;
											var gridSettingsPageConfig = this.gridSettingsPageConfig;
											sandbox.subscribe('GetGridSettingsInfo', function() {
												var gridSettingsInfo = {};
												gridSettingsInfo.entitySchemaName = viewModel.entitySchema.name;
												if (gridSettingsPageConfig) {
													gridSettingsInfo.isSingleTypeMode =
														gridSettingsPageConfig.isSingleTypeMode;
													gridSettingsInfo.baseGridType =
														gridSettingsPageConfig.baseGridType ||
															ConfigurationEnums.GridType.LISTED;
												}
												gridSettingsInfo.profileKey = columnsSettingsProfileKey;
												return gridSettingsInfo;
											}, [gridSettingsId]);
											sandbox.publish('OpenGridSettings', gridSettingsId,
												[viewModel.getCardModuleSandboxId()]);
											sandbox.subscribe('UpdateDetail', function() {
												viewModel.isObsolete = true;
											}, [gridSettingsId]);
										};
										viewModel.updateSortColumnsCaptions();
										view.bind(viewModel);
										viewModel.load(args);
										viewModel.loadAllRowsCount();
										view.render(renderTo);
										performanceCounterManager.setTimeStamp('loadAdditionalModulesComplete');
									} else {
										schema.bindings = {};
										args.pageRowCount = -1;
										viewModel.add = function(tag) {
											var collection = viewModel.get('gridData');
											var item = collection.createItem(this);
											var id = collection.getCount();
											if (this.defValues) {
												Terrasoft.each(this.defValues, function(column) {
													item.setColumnValue(column.columnPath, column.columnValue);
												}, this);
											}
											if (tag) {
												item.setColumnValue(this.typeColumn, tag);
											}
											var createdItem = createItem(item, renderTo,
												itemViewModelConfig.name, args.operationType);
											if (Ext.isFunction(viewModel.initItem)) {
												viewModel.initItem.call(createdItem);
											}
											collection.add(id, createdItem);
										};
										viewModel.onLoadData = function(result) {
											if (instance.isDestroyed) {
												return;
											}
											if (!viewModel.filterPath) {
												viewModel.filterPath = args.parentChemaName;
											}
											if (!viewModel.filterValue) {
												viewModel.filterValue = args.filterValue;
											}
											if (!viewModel.parentModuleSandboxId) {
												viewModel.parentModuleSandboxId = args.cardModuleSandboxId;
											}
											var gridData = viewModel.get('gridData');
											if (result && result.collection) {
												var collection = result.collection;
												if (viewModel.getDisplayOrder) {
													collection = viewModel.getDisplayOrder(collection,
														args.operationType);
												}
												collection.each(function(item) {
													item.isNew = false;
													gridData.add(item.get(item.primaryColumnName),
														createItem(item, renderTo, itemViewModelConfig.name,
															args.operationType));
												});
											} else if (args.predefinedRecords) {
												Terrasoft.each(args.predefinedRecords, function(item) {
													gridData.add(item.get(item.primaryColumnName),
														createItem(item, renderTo, itemViewModelConfig.name,
															args.operationType));
												});
											}
											if (viewModel.init) {
												viewModel.init();
											}
											performanceCounterManager.setTimeStamp('loadAdditionalModulesComplete');
										};
										viewModel.set('detailSandboxId', sandbox.id);
										viewModel.reload = function() {
											var collection = viewModel.get('gridData');
											inputViews.clear();
											collection.each(function(itemViewModel) {
												if (!renderTo.items) {
													renderTo.items = [];
												}
												var itemKey = itemViewModel.instanceId;
												var container;
												var action = viewModelConfig.cardAction;
												if (viewModel.getCustomItemView) {
													container = viewModel.getCustomItemView(viewModel,
														itemKey, action, editDetailTypeItems, itemViewModel);
												} else {
													container =
														EditDetailViewGenerator.generateItem(viewModel,
															itemKey, action, editDetailTypeItems);
												}
												var itemView = Ext.create(container.className || 'Terrasoft.Container',
													container);
												itemKey = itemViewModel.instanceId;
												inputViews.add(itemKey, itemView);
												itemView.bind(itemViewModel);
												var itemsContainer = view.items.get(renderTo.id +
													'autoGeneratedGridContainer');
												itemsContainer.items.add(itemView);
											});
										};
										EditDetailViewGenerator.generate(schema, userCodes,
											renderTo.id, args.operationType,
											function(config, typeItems) {
												editDetailTypeItems = typeItems;
												viewConfig = Terrasoft.deepClone(config);
												view = Ext.create(config.className || 'Terrasoft.Container',
													config);
												view.bind(viewModel);
												view.render(renderTo);
												performanceCounterManager.setTimeStamp('loadAdditionalModulesComplete');
												viewModel.load(args, type);
											}, instance);
									}
								});
							}
						);
					}
				});
				sandbox.publish('DetailInfo', moduleId);
			}

			function resumeScroll() {
				var detailItems = this.get('gridData').collection.items;
				Terrasoft.each(detailItems, function(item) {
					var scrollTo = item.scrollTo;
					if (scrollTo && scrollTo > 0) {
						Ext.getBody().dom.scrollTop = scrollTo;
						Ext.getDoc().dom.documentElement.scrollTop = scrollTo;
						item.scrollTo = 0;
					}
				}, this);
			}

			function getSchemaUserCodes(schema, userCodes, callback) {
				var parentSchemaName = schema.extend;
				if (parentSchemaName === 'Terrasoft.model.BaseViewModel') {
					userCodes.push(schema.userCode);
					callback(schema, userCodes);
					return;
				}
				var map = {};
				map[parentSchemaName] = {
					sandbox: 'sandbox_' + sandbox.id,
					'ext-base': 'ext_' + Ext.id,
					terrasoft: 'terrasoft_' + Terrasoft.id
				};
				requirejs.config({
					map: map
				});
				loadedSchemas.push(parentSchemaName);
				require([parentSchemaName], function(parentSchema) {
					var parentSchemaCopy = Terrasoft.deepClone(parentSchema);
					getSchemaUserCodes(parentSchemaCopy, userCodes, function(parentSchemaConfig, userCodes) {
						userCodes.push(schema.userCode);
						callback(schema, userCodes);
					});
				});
			}

			var instanceConstructor = Ext.define('DetailModule', {
				init: init,
				render: function(renderTo) {
					loadView(renderTo, sandbox, Ext, this);
				},
				destroy: function(params) {
					if (params.keepAlive !== true) {
						for (var i = loadedSchemas.length; i--;) {
							var schemaName = loadedSchemas.pop();
							requirejs.undef(schemaName);
						}
					}
				}
			});
			return instanceConstructor;
		}

		return createConstructor;
	});
