namespace Terrasoft.Configuration
{

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;
	using Terrasoft.Common;
	using Terrasoft.Core;
	using Terrasoft.Core.Configuration;

	#region Class: ForecastColumnSettingsMapperSchema

	/// <exclude/>
	public class ForecastColumnSettingsMapperSchema : Terrasoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecastColumnSettingsMapperSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecastColumnSettingsMapperSchema(ForecastColumnSettingsMapperSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("9177fffe-d3e8-4d30-8661-d77d7d6e57f8");
			Name = "ForecastColumnSettingsMapper";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,3,237,88,75,111,219,70,16,62,43,64,254,195,194,189,80,64,64,1,61,70,15,35,145,163,64,69,45,27,81,220,30,130,30,182,228,80,90,148,220,101,119,151,14,84,195,255,189,179,15,138,15,145,50,109,167,183,250,98,238,206,123,230,155,153,181,57,205,64,229,52,2,242,21,164,164,74,36,58,92,10,158,176,93,33,169,102,130,135,43,33,33,162,74,255,246,243,219,55,15,111,223,140,10,197,248,142,108,224,187,22,220,178,255,162,4,159,30,9,219,131,210,144,181,207,225,175,140,255,93,93,214,109,101,89,93,188,77,105,105,175,147,37,244,221,135,43,26,105,33,25,168,46,142,77,193,194,45,200,123,22,193,181,136,33,13,175,168,166,24,179,150,40,133,2,40,242,147,132,29,198,78,214,92,131,76,48,59,239,201,186,204,195,82,164,69,198,183,160,53,170,85,215,52,207,65,90,161,188,248,51,101,17,97,165,204,83,34,163,7,43,118,52,118,13,122,47,98,245,158,220,90,69,142,56,153,76,200,76,21,89,70,229,97,81,94,124,6,173,136,222,3,73,188,1,18,89,11,68,121,19,36,198,144,72,34,69,214,102,9,143,74,39,109,173,179,156,74,154,17,142,136,152,95,20,10,36,230,132,67,100,64,112,177,184,195,51,170,40,47,48,74,165,41,143,32,156,77,172,88,183,22,103,243,98,177,106,57,113,34,36,65,23,146,171,197,178,35,142,217,164,164,26,246,102,46,77,233,76,58,186,51,109,168,193,93,35,18,210,12,236,157,81,57,106,74,123,39,199,83,95,30,224,177,171,144,61,63,58,128,52,47,203,18,46,83,170,212,16,172,124,187,130,132,22,169,254,200,120,140,164,64,31,114,16,73,112,86,112,60,254,163,66,89,100,44,145,115,236,228,73,63,250,1,40,217,61,213,224,168,185,59,16,165,165,233,35,76,182,211,182,193,10,7,182,219,62,113,205,52,54,155,251,56,108,163,61,100,148,64,237,240,142,124,46,88,236,19,123,183,142,199,228,193,38,222,21,182,193,26,58,237,42,92,49,169,244,141,244,137,10,34,50,95,144,40,68,97,50,159,215,52,93,134,198,17,211,231,190,52,237,218,116,133,39,52,150,31,226,50,64,127,36,247,76,234,130,166,164,3,99,43,150,166,229,197,19,144,34,221,112,242,33,55,116,147,24,80,150,209,148,253,131,230,231,196,12,187,240,170,186,155,53,184,23,129,111,159,210,145,241,212,171,236,45,130,114,191,230,45,31,27,76,215,148,211,29,200,16,43,187,246,93,253,241,128,169,13,234,206,133,91,81,200,8,76,198,167,167,113,184,28,29,187,118,78,56,124,239,202,162,75,193,200,233,114,62,152,234,161,128,115,212,214,210,245,228,232,11,36,32,1,157,169,224,134,124,13,159,144,197,17,111,169,222,147,203,203,22,56,149,199,94,183,12,70,226,45,221,34,85,196,253,102,234,244,103,88,170,139,85,198,86,5,143,250,77,85,212,103,24,170,132,218,102,226,30,3,49,84,161,71,216,125,55,56,15,40,143,59,2,175,81,75,205,44,197,5,103,203,217,214,125,164,132,107,181,17,122,83,164,233,141,252,148,229,250,16,140,201,165,19,31,157,96,220,137,169,69,208,163,108,140,147,140,163,42,103,255,113,90,159,28,37,228,158,215,255,255,239,215,254,253,234,247,203,127,177,102,123,246,172,159,10,222,245,229,30,162,191,62,200,93,145,33,242,12,130,2,19,42,238,70,207,237,199,15,75,72,123,26,26,208,89,196,253,190,103,26,182,230,81,27,140,75,237,37,96,12,144,156,134,199,1,99,172,49,245,219,99,190,122,38,12,199,227,160,231,195,169,79,150,171,13,85,115,254,2,185,196,174,225,136,215,46,136,134,165,88,29,140,190,194,136,16,141,205,230,95,18,93,54,219,239,3,220,155,56,9,204,146,25,218,67,66,26,127,92,47,153,50,18,145,216,111,101,23,128,223,251,231,90,230,158,166,5,28,143,95,7,170,169,164,124,172,254,237,114,178,119,30,200,14,244,212,248,56,37,143,47,13,70,150,139,202,59,50,96,18,156,15,171,82,120,162,169,47,178,174,101,249,67,130,203,237,18,123,117,72,125,106,250,226,57,89,201,63,36,152,4,151,159,157,78,175,13,167,95,81,95,64,173,181,255,226,112,18,187,22,143,205,61,220,253,110,193,19,119,253,50,38,181,45,255,114,95,171,44,197,240,76,111,123,68,207,167,55,126,69,98,115,247,214,33,102,196,217,127,124,184,47,30,15,119,252,182,174,162,33,120,6,230,245,231,87,135,243,3,254,250,180,119,245,159,127,1,58,41,118,142,212,17,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("9177fffe-d3e8-4d30-8661-d77d7d6e57f8"));
		}

		#endregion

	}

	#endregion

}

