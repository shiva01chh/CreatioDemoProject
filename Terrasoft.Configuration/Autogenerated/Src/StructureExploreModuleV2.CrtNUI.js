define("StructureExploreModuleV2", ["StructureExplorerMainViewModel", "StructureExplorerViewConfig",
	"css!StructureExploreModuleV2", "BaseModule"
], function() {

	/**
	 * Structure explorer module.
	 */
	Ext.define("Terrasoft.configuration.StructureExploreModule", {
		extend: "Terrasoft.BaseModule",
		alternateClassName: "Terrasoft.StructureExploreModule",

		Ext: null,
		sandbox: null,
		Terrasoft: null,

		// region Properties: Private

		/**
		 * The view object module.
		 * @private
		 * @type {Terrasoft.Component}
		 */
		view: null,

		/**
		 * The object view model module.
		 * @private
		 * @type {Terrasoft.BaseModel}
		 */
		viewModel: null,

		/**
		 * View item collection.
		 * @private
		 * @type {Terrasoft.Collection}
		 */
		viewItemCollection: null,

		/**
		 * View model class name.
		 * @private
		 * @type {String}
		 */
		viewModelClassName: "Terrasoft.StructureExplorerMainViewModel",

		/**
		 * View config class name.
		 * @private
		 * @type {String}
		 */
		viewConfigClassName: "Terrasoft.StructureExplorerViewConfig",

		// endregion

		// region Properties: Protected

		/**
		 * @inheritdoc Terrasoft.BaseModule#render
		 * @override
		 */
		showMask: true,

		// endregion

		// region Methods: Private

		/**
		 * @private
		 */
		_initViewModel: function() {
			this.viewModel = Ext.create(this.viewModelClassName, {
				sandbox: this.sandbox
			});
			this.viewItemCollection = new Terrasoft.Collection();
			this.viewModel.on("addItem", this._onAddItem, this);
			this.viewModel.on("removeItem", this._onRemoveItem, this);
		},

		/**
		 * @private
		 */
		_onAddItem: function(itemViewModel) {
			var itemView = this._addViewItem();
			itemView.bind(itemViewModel);
			var autoGeneratedMainContainer = this.view.items.get("autoGeneratedMainContainer");
			var autoGeneratedLeftContainer = autoGeneratedMainContainer.items.get("autoGeneratedLeftContainer");
			var itemViewRenderTo = autoGeneratedLeftContainer.getWrapEl();
			itemView.render(itemViewRenderTo);
		},

		/**
		 * @private
		 */
		_addViewItem: function() {
			var viewConfigClass = Ext.create(this.viewConfigClassName);
			var key = this.viewItemCollection.getCount();
			var viewConfig = viewConfigClass.generateItemView(key);
			var itemView = Ext.create(viewConfig.className || "Terrasoft.Container", viewConfig);
			this.viewItemCollection.add(key, itemView);
			return itemView;
		},

		/**
		 * @private
		 */
		_onRemoveItem: function(index) {
			if (this.viewItemCollection.contains(index)) {
				this.viewItemCollection.removeByKey(index).destroy();
			}
		},

		/**
		 * @private
		 */
		_initView: function() {
			var viewConfigClass = Ext.create(this.viewConfigClassName);
			var viewConfig = viewConfigClass.generateMainView();
			this.view = Ext.create(viewConfig.className || "Terrasoft.Container", viewConfig);
		},

		// endregion

		// region Methods: Public

		/**
		 * @inheritdoc Terrasoft.BaseModule#render
		 * @override
		 */
		render: function(renderTo) {
			var parentMethod = this.getParentMethod();
			this._initViewModel();
			this._initView();
			this.view.bind(this.viewModel);
			this.view.render(renderTo);
			this.viewModel.init(function() {
				this.viewModel.focusLastInput();
				parentMethod.call(this, renderTo);
			}, this);
		},

		/**
		 * @inheritdoc Terrasoft.BaseObject#destroy
		 * @override
		 */
		destroy: function() {
			this.viewItemCollection.each(function(item) {
				item.destroy();
			}, this);
			Terrasoft.safeDestroy(this.viewItemCollection, this.viewModel, this.view);
			this.callParent(arguments);
		}

		// endregion

	});

	return Terrasoft.StructureExploreModule;

});
