define("BulkEmailContentBuilder", ["BulkEmailHelper", "BulkEmailTemplateHelper", "BulkEmailHyperlinkCorrector",
		"BulkEmailContentBuilderEnumsModule", "AcademyUtilities", "DynamicContentReplicaBuilder",
		"ServiceHelper", "LookupUtilities", "MarketingEnums", "ModalBox", "ContentBuilderHelper",
		"DynamicContentBuilderMixin", "css!ContentBuilderCSS", "css!BulkEmailContentBuilderCSS",
		"ModalBoxSchemaModule", "BulkEmailTemplateValidator", "BulkEmailTemplateEntriesMixin"],
	function(BulkEmailHelper, BulkEmailTemplateHelper, BulkEmailHyperlinkCorrector, BulkEmailContentBuilderEnumsModule,
		AcademyUtilities, ReplicaBuilder, ServiceHelper, LookupUtilities, MarketingEnums, ModalBox) {
		Terrasoft.BulkEmailContentBuilderActions = {
			Close: 1,
			Save: 2,
			GetContentBuilderConfig: 3,
			OpenTestEmailDialog: 4,
			GetBulkEmailTitle: 5,
			GetBulkEmailId: 6,
			GetReplicaHeaders: 7,
			SelectTemplateFromLookup: 8,
			GetBulkEmailDefaultHeaders: 9,
			LoadTemplateFromLookup: 10
		};
		return {
			mixins: {
				dynamicContent: "Terrasoft.DynamicContentBuilderMixin",
				BulkEmailTemplateEntriesMixin: "Terrasoft.BulkEmailTemplateEntriesMixin"
			},
			modules: {
				PreviewContentBuilder: {
					config: {
						schemaName: "PreviewDynamicContentBuilder",
						isSchemaConfigInitialized: true,
						useHistoryState: false,
						showMask: true,
						autoGeneratedContainerSuffix: "-preview-content-builder",
						parameters: {
							viewModelConfig: {
								DesktopPreviewWidth: {
									attributeValue: "ContentSheetWidth"
								}
							}
						}
					}
				}
			},
			messages: {
				/**
				 * @message GetContentBuilderItems
				 * Sends content builder items.
				 */
				"GetContentBuilderItems": {
					mode: Terrasoft.MessageMode.PTP,
					direction: Terrasoft.MessageDirectionType.SUBSCRIBE
				},

				/**
				 * @message GetContentBuilderConfig
				 * Sends content builder config.
				 */
				"GetContentBuilderConfig": {
					mode: Terrasoft.MessageMode.PTP,
					direction: Terrasoft.MessageDirectionType.SUBSCRIBE
				},

				/**
				 * @message BulkEmailContentBuilderAction
				 * Handles bulk email content builder actions.
				 */
				"BulkEmailContentBuilderAction": {
					"mode": this.Terrasoft.MessageMode.PTP,
					"direction": this.Terrasoft.MessageDirectionType.SUBSCRIBE
				},

				/**
				 * @message UpdateContentBuilderConfig
				 * Updates content config after adding unsubscribe block.
				 */
				"UpdateContentBuilderConfig": {
					"mode": this.Terrasoft.MessageMode.PTP,
					"direction": this.Terrasoft.MessageDirectionType.SUBSCRIBE
				},

				/**
				 * @message BulkEmailContentBuilderAction
				 * Handles bulk email content builder actions.
				 */
				"BulkEmailContentWizardAction": {
					"mode": this.Terrasoft.MessageMode.PTP,
					"direction": this.Terrasoft.MessageDirectionType.PUBLISH
				},

				/**
				 * @message BulkEmailContentBuilderLoaded
				 * Sends event on module is completely loaded.
				 */
				"BulkEmailContentBuilderLoaded": {
					"mode": this.Terrasoft.MessageMode.PTP,
					"direction": this.Terrasoft.MessageDirectionType.PUBLISH
				},

				/**
				 * @message BulkEmailSubjectUpdated
				 * Sends new default template subject.
				 */
				"BulkEmailSubjectUpdated": {
					"mode": this.Terrasoft.MessageMode.PTP,
					"direction": this.Terrasoft.MessageDirectionType.PUBLISH
				},

				/**
				 * @message BulkEmailContentBuilderSaved
				 * Sends event on content saved.
				 */
				"BulkEmailContentBuilderSaved": {
					"mode": this.Terrasoft.MessageMode.PTP,
					"direction": this.Terrasoft.MessageDirectionType.PUBLISH
				},

				/**
				 * @message SendTestEmail
				 * Opens modal view for sending test message.
				 */
				"SendTestEmail": {
					mode: this.Terrasoft.MessageMode.PTP,
					direction: this.Terrasoft.MessageDirectionType.PUBLISH
				}
			},
			attributes: {
				"PreHeaderText": {
					dataValueType: Terrasoft.DataValueType.TEXT,
					type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
				},

				"PreHeaderSelectedText": {
					dataValueType: Terrasoft.DataValueType.TEXT,
					type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
				},

				"MacrosInsertEventSource": {
					dataValueType: Terrasoft.DataValueType.TEXT,
					type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
					value: null
				},

				"IsWizardMode": {
					dataValueType: Terrasoft.DataValueType.BOOLEAN,
					type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
					value: false
				},

				"BulkEmailEntity": {
					dataValueType: Terrasoft.DataValueType.ENTITY,
					type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
				},

				"ReplicaHeadersCollection": {
					"type": this.Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
					"dataValueType": this.Terrasoft.DataValueType.COLLECTION,
					"isCollection": true
				}
			},
			properties: {
				/**
				 * @inheritdoc Terrasoft.ContentBuilder#unselectableItems
				 * @override
				 */
				unselectableItems: ["mjgroup"]
			},
			methods: {

				/**
				 * Opens modal container test email module.
				 * @private
				 */
				_openTestEmailContainer: function() {
					var template = this.getContentBuilderConfig();
					var config = {
						bulkEmailId: this.$BulkEmailEntity.$Id,
						replicaCount: this.calculateReplicasCount(template),
						activeReplicaMask: this.$ActiveReplicaMask
					};
					this.sandbox.publish("SendTestEmail", config);
				},

				_init: function (callback, scope) {
					if (this.$DynamicContentEnabled) {
						Terrasoft.chain(
							function(next) {
								this.initDCBuilderMixin();
								next();
							},
							function(next) {
								this.initReplicaHeaders(next, this);
							},
							function () {
								callback.call(scope);
							},
							this
						);
					} else {
						callback.call(scope);
					}
				},

				_loadContentBuilderConfig: function(config) {
					Terrasoft.chain(
						function(next) {
							this.$Attributes = [];
							this.loadContentSheetConfig(config, next);
						},
						function(next) {
							this.initReplicaHeaders(next, this);
						},
						function() {
							this.hideBodyMask();
						},
						this
					);
				},

				_onTemplateSelected: function(config){
					var selectedRows = config.selectedRows;
					if (selectedRows.getCount() <= 0) {
						return;
					}
					var template = selectedRows.first();
					this.loadTemplate(template.Id);
				},

				_setBulkEmailHeadersFromTemplate: function(templateResponse) {
					this.$BulkEmailEntity.$TemplateSubject = templateResponse.TemplateSubject;
					this.sandbox.publish("BulkEmailSubjectUpdated", templateResponse.TemplateSubject);
				},

				_openEmailTemplateLookup: function() {
					var config = {
						entitySchemaName: "EmailTemplate",
						enableMultiSelect: false,
						hideActions: true,
						settingsButtonVisible: false,
						filters: this.getEmailTemplateLookupFilters()
					};
					LookupUtilities.Open(this.sandbox, config, this._onTemplateSelected, this,
						null, false, false);
				},

				_openEmailTemplateLookupGallery: function() {
					var config = {
						widthPixels: 870,
						heightPixels: 580,
						innerBoxStyles: {
							"height": "100%",
					    	"width": "100%"
						}
					};
					var renderTo = ModalBox.show(config, Terrasoft.emptyFn, this);
					var schemaName = "EmailTemplateLookupGallerySchema";
					var moduleId = this.sandbox.id + "_" + schemaName;
					var loadModuleConfig = {
						renderTo: renderTo.id,
						id: moduleId,
						keepAlive: false,
						instanceConfig: {
							useHistoryState: false,
							schemaName: schemaName,
							isSchemaConfigInitialized: true
						},
						parameters: {
							viewModelConfig: {
								TemplateConfigType: this.getConfigType()
							}
						}
					};
					this.sandbox.loadModule("BaseSchemaModuleV2", loadModuleConfig);
				},

				/**
				 * @private
				 */
				_openStructureExplorer: function(config) {
					Terrasoft.StructureExplorerUtilities.open({
						scope: this,
						handlerMethod: config.macroSelectedHandler || this.onMacrosColumnSelected,
						moduleConfig: config
					});
				},

				/**
				 * @private
				 */
				_getAggregatedMacrosDataValueTypes: function() {
					var dataValueTypes = Object.values(Terrasoft.DataValueType);
					dataValueTypes = Ext.Array.remove(dataValueTypes, Terrasoft.DataValueType.LOOKUP);
					return Ext.Array.remove(dataValueTypes, Terrasoft.DataValueType.BLOB);
				},

				/**
				 * Returns email entity with state and category.
				 * @private
				 * @param {Object} config Config of content items.
				 */
				_getBulkEmailEntity: function(bulkEmailId, callback) {
					var esq = Ext.create("Terrasoft.EntitySchemaQuery", {
						rootSchemaName: "BulkEmail"
					});
					esq.addColumn("Status");
					esq.addColumn("Category");
					esq.getEntity(bulkEmailId, function(result) {
						var entity = result.entity;
						this.Ext.callback(callback, this, [entity]);
					}, this);
				},

				/**
				 * Open entity structure explorer module for select column macros.
				 * @override
				 */
				openMacrosColumnsPage: function(moduleConfig) {
					var contentBuilderConfig = this.get("ContentBuilderConfig");
					var macrosEntity = contentBuilderConfig && contentBuilderConfig.MacrosEntity;
					if (Ext.isEmpty(macrosEntity)) {
						this.callParent(arguments);
					} else {
						var aggregatedDataValueTypes = this._getAggregatedMacrosDataValueTypes();
						var config = {
							useBackwards: false,
							schemaName: macrosEntity,
							useOldStructureExplorer: true,
							aggregatedDataValueTypes: aggregatedDataValueTypes
						};
						Ext.apply(config, moduleConfig);
						if (!this.$BulkEmailEntity || !this.$BulkEmailEntity.$AudienceSchema) {
							this._openStructureExplorer(config);
							return;
						}
						var schemaUid = this.$BulkEmailEntity.$AudienceSchema.value;
						Terrasoft.EntitySchemaManager.getItemByUId(schemaUid, function(schema) {
							if (schema.name !== "Contact") {
								config.customColumns = [{
									"name": "LinkedEntity",
									"referenceSchemaName": schema.name,
									"referenceSchema": schema
								}];
							}
							this._openStructureExplorer(config);
						}.bind(this));
					}
				},

				/**
				 * @inheritdoc ContentBuilder#init
				 * @overridden
				 */
				init: function(callback, scope) {
					this.$DynamicContentEnabled = Terrasoft.Features.getIsEnabled("BulkEmailDynamicContentBuilder");
					this.callParent([function () {
						this._init(callback, scope);
					}, this]);
				},

				/**
				 * Prepare template for service method.
				 * @protected
				 * @param {Guid} templateId EmailTemplate record uniqueidentifier.
				 */
				loadTemplate: function(templateId) {
					var serviceContract = {
						emailTemplateId: templateId
					};
					this.showBodyMask();
					ServiceHelper.callService("BulkEmailTemplateService", "GetEmailTemplateConfig", function(response) {
						var result = response.GetEmailTemplateConfigResult;
						this._setBulkEmailHeadersFromTemplate(result);
						var templateConfigText = result.TemplateConfig;
						var templateConfigJson = Ext.isEmpty(templateConfigText)
							? BulkEmailTemplateHelper.htmlToSheetConfig(result.TemplateBody)
							: Terrasoft.decode(templateConfigText);
						this._loadContentBuilderConfig(templateConfigJson);
					}, serviceContract, this);
				},

				/**
				 * Returns specific email template filters for current content builder state.
				 * @protected
				 * @returns {Terrasoft.FilterGroup} Entity filters.
				 */
				getEmailTemplateLookupFilters: function() {
					var filters = Ext.create("Terrasoft.FilterGroup");
					filters.addItem(Terrasoft.createColumnFilterWithParameter(
						Terrasoft.ComparisonType.EQUAL, "ConfigType", this.getConfigType()));
					return filters;
				},

				/**
				 * Opens lookup to select template.
				 * @protected
				 * @param {Guid} templateId EmailTemplate record uniqueidentifier.
				 */
				selectTemplateFromLookup: function() {
					const isEmailTemplateLookupGalleryEnabled =
						this.Terrasoft.Features.getIsEnabled("EmailTemplateLookupGallery");
					if (isEmailTemplateLookupGalleryEnabled) {
						this._openEmailTemplateLookupGallery();
					} else {
						this._openEmailTemplateLookup();
					}
				},

				/**
				 * Gets replica headers collection from service.
				 * @protected
				 */
				initReplicaHeaders: function(callback, scope) {
					this.$ReplicaHeadersCollection = Ext.create("Terrasoft.BaseViewModelCollection");
					var serviceContract = { BulkEmailId: this.$RecordId };
					ServiceHelper.callService("BulkEmailTemplateService", "GetBulkEmailReplicaHeaders",
							function (response) {
						var headers = response.Headers;
						Terrasoft.each(headers, function(replicaHeaders) {
							var replicaHeadersViewModel = Ext.create("Terrasoft.BaseViewModel");
							replicaHeadersViewModel.$PreHeader = replicaHeaders.Preheader;
							replicaHeadersViewModel.$SenderName = replicaHeaders.SenderName;
							replicaHeadersViewModel.$SenderEmail = replicaHeaders.SenderEmail;
							replicaHeadersViewModel.$Subject = replicaHeaders.Subject;
							replicaHeadersViewModel.$Mask = replicaHeaders.ReplicaMask;
							this.$ReplicaHeadersCollection.add(replicaHeaders.ReplicaMask, replicaHeadersViewModel);
						}, this);
						callback.call(scope);
					}, serviceContract, this);
				},

				/**
				 * @inheritdoc ContentBuilder#loadContentSheetConfig
				 * @overridden
				 */
				loadContentSheetConfig: function(config) {
					this.callParent(arguments);
					if (this.$DynamicContentEnabled) {
						this.mixins.dynamicContent.initDCAttributes.apply(this);
					}
					this.sandbox.publish("BulkEmailContentBuilderLoaded");
				},

				/**
				 * Creates message box config for validation fails message.
				 * @param {String} message Message text.
				 * @returns {{caption: *, buttons: *[], scope: BulkEmailContentBuilder}} Message box config.
				 * @private
				 */
				_getFailedValidationMessageConfig: function(message) {
					var helpButtonCaption = this.get("Resources.Strings.ValidationHelpButtonCaption");
					var messageBoxConfig = {
						caption: message,
						buttons: ["save", "cancel", {
							className: "Terrasoft.Button",
							returnCode: "details",
							style: "default",
							caption: helpButtonCaption
						}],
						scope: this
					};
					return messageBoxConfig;
				},

				/**
				 * Shows message box with validation fails messages.
				 * @param {Terrasoft.Collection} validationResult Collection of messages.
				 * @param {Object} config Template config.
				 * @param {String} html Template html.
				 * @param {Object} callback Save button handler callback to update record.
				 * @private
				 * @deprecated
				 */
				_showContentValidationMessage: function(validationResult, config, html, callback) {
					var fullMessage = "";
					Terrasoft.each(validationResult, function(message) {
						fullMessage += (fullMessage ? "\n" : "") + message;
					});
					var messageConfig = this._getFailedValidationMessageConfig(fullMessage);
					messageConfig.handler = function(code) {
						switch (code) {
							case "save":
								callback.call(this);
								break;
							case "details":
								var academyConfig = {
									contextHelpId: "1876",
									scope: this,
									callback: function(url) {
										window.open(url);
									}
								};
								AcademyUtilities.getUrl(academyConfig);
								break;
							default:
								return;
						}
					};
					Terrasoft.utils.showMessage(messageConfig);
					this.hideBodyMask();
				},

				/**
				 * Shows default content existing at blockgroup items validation result warning dialog.
				 * @private
				 * @deprecated
				 * @param {Array} rules Collection with invalid rule names.
				 * @param {Function} callback Callback function to continue action.
				 */
				_showRulesWithEmptyFilterMessage: function(rules, callback) {
					var names = rules.join(", ");
					var captionTemplate = this.get("Resources.Strings.RulesWithEmptyFilterMessage");
					var caption = Ext.String.format(captionTemplate, names);
					this.showWarningMessage(caption, callback);
				},

				/**
				 * Shows default content existing at blockgroup items validation result warning dialog.
				 * @private
				 * @deprecated
				 * @param {Function} callback Callback function to continue action.
				 */
				_showNoDefaultContentMessage: function(callback) {
					var message = this.get("Resources.Strings.NoDefaultContentMessage");
					this.showWarningMessage(message, callback);
				},

				/**
				 * @private
				 */
				_getContentBuilderItems: function() {
					return this.$Items;
				},

				_getTemplateValidatorConfig: function() {
					var templateConfig = this.getContentBuilderConfig();
					var bulkEmailId = this.get("RecordId");
					return {
						templateConfig: templateConfig,
						bulkEmailId: bulkEmailId
					};
				},

				/**
				 * @inheritdoc Terrasoft.ContentBuilder#subscribeGroupElementsEvents
				 * @override
				 */
				subscribeGroupElementsEvents: function(viewModelItem) {
					this.callParent(arguments);
					if (this.$DynamicContentEnabled && viewModelItem.$ItemType === "blockgroup") {
						this.subscribeDCItemsCollectionEvents(viewModelItem.$Items);
					}
				},

				/**
				 * @inheritdoc Terrasoft.ContentBuilder#unsubscribeGroupElementsEvents
				 * @override
				 */
				unsubscribeGroupElementsEvents: function(viewModelItem) {
					this.callParent(arguments);
					if (this.$DynamicContentEnabled && viewModelItem.$ItemType === "blockgroup") {
						this.unsubscribeDCItemsCollectionEvents(viewModelItem.$Items);
					}
				},

				/**
				 * @inheritdoc Terrasoft.ContentBuilder#getPreviewHtml
				 * @override
				 */
				getPreviewHtml: function(previewConfig) {
					const templateConfig = this.getContentBuilderConfig();
					var masks = ReplicaBuilder.generateReplicaMasks(templateConfig);
					if (!previewConfig && masks.length > 1) {
						previewConfig = {
							activeReplicaMask: masks[0]
						};
					}
					if (previewConfig && previewConfig.activeReplicaMask >= 0) {
						const replicas = ReplicaBuilder.generateReplicas(templateConfig);
						var config = this.Ext.Array.filter(replicas, function(replica) {
							return replica.ReplicaMask === previewConfig.activeReplicaMask;
						})[0];
						if (!config) {
							return;
						}
						const emailContentExporter = this.$ContentExporterFactory.getExporter(templateConfig);
						if (previewConfig && previewConfig.width) {
							config.Width = previewConfig.width;
						}
						return emailContentExporter.exportData(config);
					}
					return this.callParent(arguments);
				},

				/**
				 * Handles content block group copy event.
				 * @protected
				 * @param {Array[]} args Parameters of content item copy event.
				 * @param {Terrasoft.ContentBlockGroupViewModel} group Content block group view model.
				 */
				onBlockGroupCopy: function(args, group) {
					if (this.$DynamicContentEnabled) {
						var itemsCount = group.$Items.getCount();
						if (this.isDynamicBlocksLimitReached(itemsCount)) {
							this.showBlocksLimitReachedDialog();
							return;
						}
						this.superclass.onItemCopy.apply(this, args);
						this.onDCItemCopy();
					}
				},

				/**
				 * @inheritdoc Terrasoft.ContentBuilder#onItemCopy
				 * @override
				 */
				onItemCopy: function(config) {
					var selectedItem = config && this.$Items.find(config.Id);
					if (Ext.isEmpty(selectedItem)) {
						return;
					}
					selectedItem.$ItemType === "blockgroup"
						? this.onBlockGroupCopy(arguments, selectedItem)
						: this.callParent(arguments);
				},

				/**
				 * Shows message box with warning message and posibility to continue or cancel action.
				 * @protected
				 * @deprecated
				 * @param {String} message Message box caption text.
				 * @param {Function} callback Callback function to call on dialog 'Ok' result.
				 */
				showWarningMessage: function(message, callback) {
					Terrasoft.utils.showMessage({
						caption: message,
						buttons: ["Ok", "Cancel"],
						handler: function(returnCode) {
							if (returnCode === "ok") {
								callback.call();
							}
						},
						scope: this
					});
					this.hideBodyMask();
				},

				/**
				 * The callback function of needUnsubscribeLink method.
				 * Shows unsubscribe link message or calls callback method.
				 * @protected
				 * @deprecated
				 * @param {Boolean} needUnsubscribeLink Is there a need to add unsubscribe link.
				 * @param {Object} config Config of content items.
				 * @param {String} html Html code.
				 * @param {Object} callback Callback function.
				 */
				needUnsubscribeLinkCallback: function(unsubscribeLinkCheckResult, config, html, callback) {
					if (unsubscribeLinkCheckResult && !unsubscribeLinkCheckResult.hasLink) {
						this.showUnsubscribeLinkMessage(config, unsubscribeLinkCheckResult.isAtDynamicBlock);
					} else {
						callback.call(this, config, html);
					}
				},

				/**
				 * Shows message about the need to add a unsubscribe link.
				 * @protected
				 * @deprecated
				 * @param {Object} config Config of content items.
				 */
				showUnsubscribeLinkMessage: function(config, hasLinksInDynamicBlock) {
					var message = this._getUnsubscribeLinkMessage(hasLinksInDynamicBlock);
					Terrasoft.utils.showMessage({
						caption: message,
						buttons: ["Ok", "Cancel"],
						handler: function(returnCode) {
							this.applyUnsubscribeLinkHandler(returnCode, config);
						},
						scope: this
					});
					this.hideBodyMask();
				},

				/**
				 * Returns expected apply unsubscribe link message text.
				 * @private
				 * @deprecated
				 * @param {Boolean} hasLinksInDynamicBlock Is there any unsubscribe link in blockgroup item content.
				 * @returns {String} Message text.
				 */
				_getUnsubscribeLinkMessage: function(hasLinksInDynamicBlock) {
					if (hasLinksInDynamicBlock) {
						return this.get("Resources.Strings.ApplyUnsubscribeLinkWithDynamicBlockMessage");
					}
					return this.get("Resources.Strings.ApplyUnsubscribeLinkMessage");
				},

				/**
				 * Handles unsubscribe message box action.
				 * @protected
				 * @deprecated
				 * @param {Boolean} returnCode Code of pressed button.
				 * @param {Object} config Config of content items.
				 */
				applyUnsubscribeLinkHandler: function(returnCode, config) {
					if (returnCode === Terrasoft.controls.MessageBoxEnums.Buttons.OK.returnCode) {
						BulkEmailTemplateHelper.applyUnsubscribeLink(config, this.updateContentBuilderConfig, this);
					}
				},

				/**
				 * @inheritdoc Terrasoft.EmailContentBuilder#createContentValidator
				 * @override
				 */
				createContentValidator: function() {
					return Ext.create("Terrasoft.EmailContentValidator");
				},

				/**
				 * Gets bulk email headers from preview module and sets it to BulkEmail entity.
				 * @protected
				 */
				actualizeDefaultHeaders: function() {
					var headers = this.sandbox.publish("BulkEmailContentWizardAction",
						Terrasoft.BulkEmailContentWizardActions.GetDefaultHeadersFromPreview);
					if (headers) {
						this.$BulkEmailEntity.$TemplateSubject = headers.$Subject;
						this.$BulkEmailEntity.$SenderName = headers.$SenderName;
						this.$BulkEmailEntity.$SenderEmail = headers.$SenderEmail;
						this.$PreHeaderText = headers.$PreHeader;
					}
				},

				/**
				 * Sets template config and html to bulk email record.
				 * Saves design-time data for template.
				 * @private
				 * @param {Object} templateConfig Template config.
				 * @param {String} html Template html.
				 * @param {String} saveConfig Save configuration.
				 */
				_updateBulkEmailTemplateConfig: function(templateConfig, html, saveConfig, callback, scope) {
					var configText = Terrasoft.encode(templateConfig);
					var recordId = this.get("RecordId");
					var contentBuilderMode =
						BulkEmailContentBuilderEnumsModule.BulkEmailContentBuilderMode.BULKEMAIL;
					var contentBuilderConfig =
						BulkEmailContentBuilderEnumsModule.getContentBuilderConfig(contentBuilderMode, recordId);
					var update = Ext.create("Terrasoft.UpdateQuery", {
						rootSchemaName: contentBuilderConfig.EntitySchemaName
					});
					if (this.$IsWizardMode) {
						update.setParameterValue("TemplateSubject", this.$BulkEmailEntity.$TemplateSubject,
							Terrasoft.DataValueType.TEXT);
						update.setParameterValue("SenderName",  this.$BulkEmailEntity.$SenderName,
							Terrasoft.DataValueType.TEXT);
						update.setParameterValue("SenderEmail",  this.$BulkEmailEntity.$SenderEmail,
							Terrasoft.DataValueType.TEXT);
					}
					update.enablePrimaryColumnFilter(recordId);
					update.setParameterValue(contentBuilderConfig.TemplateConfigColumnName, configText,
						Terrasoft.DataValueType.TEXT);
					if (!this.$DynamicContentEnabled) {
						update.setParameterValue(contentBuilderConfig.TemplateBodyColumnName, html,
							Terrasoft.DataValueType.TEXT);
					}
					update.execute(function(response) {
						if (response.success) {
							callback.call(scope);
						}
					}, this);
				},

				/**
				 * @inheritdoc Terrasoft.EmailContentBuilder#getContentSheetESQ
				 * @override
				 */
				getContentSheetESQ: function() {
					var esq = this.callParent(arguments);
					esq.addColumn("Name");
					esq.addColumn("TemplateSubject");
					esq.addColumn("SenderName");
					esq.addColumn("SenderEmail");
					esq.addColumn("AudienceSchema.EntityObject", "AudienceSchema");
					return esq;
				},

				/**
				 * @inheritdoc Terrasoft.EmailContentBuilder#setContentSheetConfig
				 * @override
				 */
				setContentSheetConfig: function(entity, callback, scope) {
					this.callParent([entity, function(config) {
						this.setBulkEmailEntity(entity);
						Ext.callback(callback, scope, [config]);
					}, scope]);
				},

				/**
				 * Sets Bulk Email title
				 * @param entity Bulk email entity.
				 * @protected
				 */
				setBulkEmailEntity: function(entity) {
					this.$BulkEmailEntity = entity;
				},

				/**
				 * Returns instance of BulkEmailTemplateValidator.
				 * @protected
				 * @returns {Terrasoft.BulkEmailTemplateValidator} Instance of BulkEmailTemplateValidator.
				 */
				createTemplateValidator: function() {
					return new Terrasoft.BulkEmailTemplateValidator();
				},

				/**
				 * @inheritdoc Terrasoft.EmailContentBuilder#openPreviewModule
				 * @override
				 */
				openPreviewModule: function() {
					if (this.getIsFeatureEnabled("ContentBlockDesigner") && this.$DynamicContentEnabled) {
						this.callParent(arguments);
					} else {
						var templateConfig = this.getContentBuilderConfig();
						var configItems = templateConfig && templateConfig.Items;
						if (configItems && configItems.length > 0) {
							var validator = this.createTemplateValidator();
							validator.validateUnsubscribeLink(templateConfig, function(config, html) {
								this.openPreview(config, html);
							}, this, this.updateContentBuilderConfig, this);
						} else {
							var emailContentExporter = this.$ContentExporterFactory.getExporter(templateConfig);
							var emptyHtml = emailContentExporter.exportData(templateConfig);
							this.openPreview(templateConfig, emptyHtml);
						}
					}
				},

				/**
				 * Loads the preview module.
				 * @protected
				 * @param {Object} config Config of content items.
				 * @param {String} html Html code.
				 */
				openPreview: function(config, html) {
					var previewWindow = window.open("", "printwin");
					previewWindow.document.write(html);
					previewWindow.document.close();
				},

				/**
				 * @inheritdoc Terrasoft.BaseSchemaViewModel#showBodyMask
				 * @override
				 */
				showBodyMask: function(config) {
					config = config || {timeout:0};
					this.callParent([config]);
				},

				/**
				 * @inheritdoc Terrasoft.EmailContentBuilder#onSave
				 * @override
				 */
				onSave: function(saveConfig) {
					this.showBodyMask();
					if (this.$DynamicContentEnabled) {
						BulkEmailHyperlinkCorrector.applyBpmTrackIdToHyperlinks(this);
					}
					if (this.$IsWizardMode) {
						this.actualizeDefaultHeaders();
					}
					var validatorConfig = this._getTemplateValidatorConfig();
					var emailExporter = this.$ContentExporterFactory.getExporter(validatorConfig.templateConfig);
					var html = emailExporter.exportData(validatorConfig.templateConfig);
					if (this.$IsWizardMode) {
						this.showBodyMask();
						saveConfig = saveConfig || {};
						saveConfig.silentSave = true;
						this.saveTemplate(validatorConfig.templateConfig, html, saveConfig);
					} else {
						var validator = this.createTemplateValidator();
						validator.validate(validatorConfig, function () {
							this.showBodyMask();
							this.saveTemplate(validatorConfig.templateConfig, html, saveConfig);
						}, this.updateContentBuilderConfig, this);
					}
				},

				/**
				 * Returns feature state of the new content builder with MJML support.
				 * @private
				 * @return {Boolean} True when feature is enable and false in otherwise.
				 */
				_isMjmlContentBuilderEnabled: function() {
					return Terrasoft.Features.getIsEnabled("MjmlContentBuilder");
				},

				/**
				 * Returns block view model if it is single in template and item type equals expected item type.
				 * @private
				 * @param {Terrasoft.Collection} items Collection with view model items.
				 * @param {Terrasoft.ExportedItemType} itemType Expected item type.
				 * @returns {null|*} Returns block view model or null when it doesn't contain item with type
				 * or has more then one item.
				 */
				_getSingleViewModelByType: function(items, itemType) {
					var item = items && items.getCount() === 1 ? items.getByIndex(0) : null;
					if (item) {
						if (item.$ItemType === itemType) {
							return item;
						}
						return this._getSingleViewModelByType(item.$Items, itemType);
					}
					return null;
				},

				/**
				 * @private
				 */
				_updateContentForHtmlGroup: function(updateConfig) {
					var group = updateConfig.config.Items[0];
					var emailContentExporter = this.$ContentExporterFactory.getExporter(updateConfig.config);
					var index = 0;
					var groupVM = this.$Items.first();
					Terrasoft.each(group.Items, function(block) {
						var staticConfig = {Items: [block]};
						var htmlElement = emailContentExporter.findSingleHtmlBlock(staticConfig);
						var htmlBlockVM = groupVM.$Items.getByIndex(index);
						var htmlViewModel = htmlBlockVM.$Items.first();
						if (htmlViewModel
								&& htmlViewModel.$ItemType === Terrasoft.ContentBuilderBodyItemType.mjraw.value) {
							htmlViewModel.set("Content", htmlElement.Content);
							htmlViewModel.set("HtmlSrc", htmlElement.HtmlSrc);
						}
						index++;
					}, this);
				},

				/**
				 * Updates current content builder config.
				 * @protected
				 * @param {Object} config Config of content items.
				 * @param {String} html Html code.
				 */
				updateContentBuilderConfig: function(config, html) {
					var emailContentExporter = this.$ContentExporterFactory.getExporter(config);
					var singleHtmlBlock = emailContentExporter.findSingleHtmlBlock(config);
					if (singleHtmlBlock && singleHtmlBlock.Content) {
						if (this.isMjmlConfig()) {
							this.updateSingleMjmlHtmlBlockContent(config, emailContentExporter);
							this._switchSelectedItem(this);
						} else {
							this.updateSingleHtmlBlockContent(html);
						}
					} else {
						this.addUnsubscribeBlock(config);
					}
				},

				/**
				 * Updates single mjml html block content.
				 * @protected
				 * @param {Object} config Config of content items.
				 * @param {Terrasoft.BaseContentExporter} emailContentExporter of exporter
				 */
				updateSingleMjmlHtmlBlockContent: function(config, emailContentExporter) {
					var htmlElement = emailContentExporter.findSingleHtmlBlock(config);
					var htmlViewModel = this._getSingleViewModelByType(this.$Items, "mjraw");
					if (htmlViewModel) {
						htmlViewModel.set("Content", htmlElement.Content);
						htmlViewModel.set("HtmlSrc", htmlElement.HtmlSrc);
					}
				},

				/**
				 * Updates single html block content.
				 * @protected
				 * @param {String} html Html code.
				 */
				updateSingleHtmlBlockContent: function(html) {
					var htmlViewModel = this._getSingleViewModelByType(this.$Items, "html");
					if (htmlViewModel) {
						htmlViewModel.set("Content", html);
					}
				},

				/**
				 * Adds unsubscribe block to current template.
				 * @param {Object} config Config of content items.
				 * @param {Array} config.Items List of content items.
				 * @protected
				 */
				addUnsubscribeBlock: function(config) {
					var unsubscribeBlock;
					var contentBuilderHelper = Ext.create("Terrasoft.ContentBuilderHelper", {
						sandbox: this.sandbox,
						isMjmlConfig: this.isMjmlConfig()
					});
					var configLength = config.Items.length;
					var blockConfig = config.Items[configLength - 1];
					if (this.isMjmlConfig()) {
						unsubscribeBlock = this.createItemViewModel(blockConfig);
					} else {
						unsubscribeBlock = contentBuilderHelper.itemToViewModel(blockConfig);
					}
					this.addItem(unsubscribeBlock);
				},

				/**
				 * Gets replica headers from preview module.
				 * @protected
				 */
				getReplicaHeadersToSave: function() {
					var replicaHeaders = this.sandbox.publish("BulkEmailContentWizardAction",
						Terrasoft.BulkEmailContentWizardActions.GetReplicaHeadersFromPreview);
					return replicaHeaders || this.$ReplicaHeadersCollection;
					//TODO: If both collections null or empty generate validation message
				},

				/**
				 * Saves config and html code of the template to database.
				 * @protected
				 * @param {Object} templateConfig Config of content items.
				 * @param {String} html Html code.
				 * @param {Object} saveConfig Save configration.
				 */
				saveTemplate: function(templateConfig, html, saveConfig) {
					Terrasoft.chain(
						function(next) {
							this._updateBulkEmailTemplateConfig(templateConfig, html, saveConfig, next, this);
						},
						function(next) {
							if (this.$DynamicContentEnabled) {
								var saveConfig = {};
								saveConfig.bulkEmailId = this.get("RecordId");
								saveConfig.templateConfig = templateConfig;
								if (this.$IsWizardMode) {
									saveConfig.replicaHeaders = this.getReplicaHeadersToSave();
								}
								this.saveTemplateParts(saveConfig, next, this);
							} else {
								next();
							}
						},
						function() {
							this.onAfterSaveTemplate(saveConfig);
						},
						this
					);
				},

				/**
				 * @inheritdoc BaseContentItemViewModel#extendChildrenItemTypes
				 */
				extendChildrenItemTypes: function() {
					if (this.$DynamicContentEnabled) {
						this.mixins.dynamicContent.extendChildrenItemTypes.apply(this);
					} else {
						this.callParent(arguments);
					}
				},

				/**
				 * Handler on after save template action.
				 * @protected
				 * @param {Object} saveOptions Options to process after save action.
				 */
				onAfterSaveTemplate: function(saveOptions) {
					this.reloadContent(function() {
						this.hideBodyMask();
						this.sandbox.publish("BulkEmailContentBuilderSaved");
						if (saveOptions && saveOptions.silentSave) {
							this.Ext.callback(saveOptions.callback, saveOptions.scope);
						} else {
							window.close();
						}
					}, this);
				},

				/**
				 * Subject macro button click handler.
				 * @private
				 */
				preHeaderMacroClicked: function() {
					this.set("MacrosInsertEventSource", "Preheader");
					this.insertMacros(arguments);
				},

				/**
				 * @inheritdoc Terrasoft.EmailContentBuilder#getContentBuilderEnumsConfig
				 * @override
				 */
				getContentBuilderEnumsConfig: function(contentBuilderMode) {
					var config = BulkEmailContentBuilderEnumsModule.getContentBuilderConfig(contentBuilderMode);
					return config;
				},

				/**
				 * @inheritdoc Terrasoft.EmailContentBuilder#createContentBuilderHelper
				 * @override
				 */
				createContentBuilderHelper: function() {
					var contentBuilderHelper = this.$DynamicContentEnabled
						? this.mixins.dynamicContent.createContentBuilderHelper.apply(this)
						: this.callParent(arguments);
					contentBuilderHelper.sheetElementProperties.push("PreHeaderText");
					return contentBuilderHelper;
				},

				/**
				 * @inheritdoc Terrasoft.EmailContentBuilder#getContentBuilderEnumsConfig
				 * @override
				 */
				getContentBuilderConfig: function() {
					if (this.isMjmlConfig()) {
						return this.serializeViewModel();
					}
					var contentBuilderHelper = this.createContentBuilderHelper();
					return contentBuilderHelper.toJSON(this);
				},

				/**
				 * @inheritdoc ContentBuilder#onGetMacros
				 * @override
				 */
				onGetMacros: function(macros) {
					var macrosInsertEventSource = this.get("MacrosInsertEventSource");
					if (macrosInsertEventSource) {
						this.set("PreHeaderSelectedText", macros);
						this.set("MacrosInsertEventSource", null);
						return;
					}
					this.callParent(arguments);
				},

				/**
				 * @inheritdoc ContentBuilder#initContentBlockInGroup
				 * @override
				 */
				initContentBlockInGroup: function(block) {
					this.callParent(arguments);
					if (this.$DynamicContentEnabled) {
						this.initDCBlockInGroup(block);
					}
				},

				/**
				 * @inheritdoc Terrasoft.core.BaseObject#destroy
				 * @override
				 */
				destroy: function() {
					if (this.$DynamicContentEnabled) {
						this.mixins.dynamicContent.destroy.apply(this);
					}
					this.callParent(arguments);
				},

				/**
				 * @inheritdoc Terrasoft.BaseSchemaViewModel#getGoogleTagManagerData.
				 * @override
				 */
				getGoogleTagManagerData: function() {
					var data = this.callParent(arguments);
					var actionTag = this.$LastActionTag;
					if (!this.Ext.isEmpty(actionTag)) {
						this.Ext.apply(data, {
							action: actionTag
						});
					}
					return data;
				},

				/**
				 * Returns SendTestEmailContentSchema identifier for ModalBoxSchemaModule.
				 * @protected
				 */
				getSendTestEmailContentSchemaId: function() {
					return this.sandbox.id + "_module_TestEmail";
				},

				/**
				 * Opens modal box for send test email content page.
				 * @protected
				 */
				openSendTestEmailContentModalBox: function() {
					this.onSave({
						silentSave: true,
						callback: function() {
							this.$ActiveReplicaMask = this.getActiveReplicaMask();
							this.$LastActionTag = "OpenSendTestEmailContent";
							this.sendGoogleTagManagerData();
							this._openTestEmailContainer();
						},
						scope: this
					});
				},

				/**
				 * @inheritdoc Terrasoft.core.ContentBuilder#subscribeMessages
				 * @override
				 */
				subscribeMessages: function() {
					this.callParent(arguments);
					this.sandbox.subscribe("GetContentBuilderItems", this._getContentBuilderItems, this);
					this.sandbox.subscribe("GetContentBuilderConfig", this.getContentBuilderConfig, this);
					this.sandbox.subscribe("BulkEmailContentBuilderAction", this.onBulkEmailContentBuilderAction, this);
					this.sandbox.subscribe("UpdateContentBuilderConfig", this.onUpdateContentBuilderConfig, this);
				},

				/**
				 * @inheritdoc Terrasoft.ContentBuilder#isEmailMacroAvailable
				 * @override
				 */
				isEmailMacroAvailable: function() {
					return this.getIsFeatureEnabled("BulkEmailExtendedMacro");
				},

				/**
				 * Updates content config after adding unsubscribe block.
				 * @protected
				 * @param {Object} updateConfig
				 */
				onUpdateContentBuilderConfig: function(updateConfig) {
					if (updateConfig.flags.isHtmlBlockGroup) {
						this._updateContentForHtmlGroup(updateConfig);
					} else {
						this.updateContentBuilderConfig(updateConfig.config, updateConfig.html);
					}
					this.sandbox.publish("BulkEmailContentBuilderLoaded");
				},

				/**
				 * Prepare update query for change bulk email status.
				 * @protected
				 * @param {Guid} status Bulk Email status.
				 * @returns {Terrasoft.UpdateQuery} update.
				 */
				getUpdateStatusQuery: function(status) {
					var update = Ext.create("Terrasoft.UpdateQuery", {
						rootSchemaName: "BulkEmail"
					});
					var recordId = this.get("RecordId");
					update.enablePrimaryColumnFilter(recordId);
					update.setParameterValue("Status", status,
						Terrasoft.DataValueType.LOOKUP);
					return update;
				},

				/**
				 * Action for saving template content with bulk email adaptation.
				 * @protected
				 * @param config Save action config.
				 */
				onSaveAction: function(config) {
					this._getBulkEmailEntity(this.$BulkEmailEntity.$Id, function(bulkEmail) {
						var isEditable = BulkEmailHelper.IsEmailTemplateEditable(bulkEmail.$Status.value,
							bulkEmail.$Category.value);
						if (isEditable) {
							var status = config.isTemplateValid
								? MarketingEnums.BulkEmailStatus.PLANNED
								: MarketingEnums.BulkEmailStatus.DRAFT;
							var update = this.getUpdateStatusQuery(status);
							update.execute(this.save, this);
						}
					});
				},

				/**
				 * Handler for bulk email content actions.
				 * @protected
				 * @param {Object} action Action config.
				 */
				onBulkEmailContentBuilderAction: function(action) {
					var actionMessageId = action.actionType || action;
					switch(actionMessageId) {
						case Terrasoft.BulkEmailContentBuilderActions.Close:
							this.cancel();
							break;
						case Terrasoft.BulkEmailContentBuilderActions.GetContentBuilderConfig:
							return this.getContentBuilderConfig();
						case Terrasoft.BulkEmailContentBuilderActions.OpenTestEmailDialog:
							this.openSendTestEmailContentModalBox();
							break;
						case Terrasoft.BulkEmailContentBuilderActions.GetBulkEmailTitle:
							return this.$BulkEmailEntity.$Name;
						case Terrasoft.BulkEmailContentBuilderActions.GetBulkEmailId:
							return this.$RecordId;
						case Terrasoft.BulkEmailContentBuilderActions.GetReplicaHeaders:
							return this.$ReplicaHeadersCollection;
						case Terrasoft.BulkEmailContentBuilderActions.GetBulkEmailDefaultHeaders:
							return this.getBulkEmailDefaultHeaders();
						case Terrasoft.BulkEmailContentBuilderActions.SelectTemplateFromLookup:
							this.selectTemplateFromLookup();
							break;
						case Terrasoft.BulkEmailContentBuilderActions.Save:
							this.onSaveAction(action.config);
							break;
						case Terrasoft.BulkEmailContentBuilderActions.LoadTemplateFromLookup:
							this.loadTemplate(action.config.emailTemplateId);
							break;
						default:
							break;
					}
				},

				/**
				 * Returns default headers from BulkEmail entity.
				 * @protected
				 */
				getBulkEmailDefaultHeaders: function() {
					var defaultHeaders = {};
					defaultHeaders.Subject = this.$BulkEmailEntity.$TemplateSubject;
					defaultHeaders.SenderName = this.$BulkEmailEntity.$SenderName;
					defaultHeaders.SenderEmail = this.$BulkEmailEntity.$SenderEmail;
					defaultHeaders.Preheader = this.$PreHeaderText;
					return defaultHeaders;
				},

				/**
				 * @inheritdoc Terrasoft.core.ContentBuilder#publishContentItemConfig
				 * @override
				 */
				publishContentItemConfig: function() {
					this.callParent(arguments);
					if (this.$DynamicContentEnabled) {
						this.mixins.dynamicContent.publishDynamicContentItemConfig.apply(this);
					}
				},

				/**
				 * @inheritdoc Terrasoft.ContentBuilder#save
				 * @override
				 */
				save: function() {
					if (this.$IsWizardMode) {
						var config = this.getContentBuilderConfig();
						if (Ext.isEmpty(config.Items)) {
							var emptyTemplateMessage = this.get("Resources.Strings.EmptyTemplateMessage");
							Terrasoft.utils.showInformation(emptyTemplateMessage);
							return;
						}
						this.onSave();
					} else {
						this.callParent(arguments);
					}
				},

				/**
				 * Returns the block library caption.
				 * @private
				 */
				_getBlockLibraryCaption: function() {
					return this.$IsWizardMode
						? ""
						: this.get("Resources.Strings.PreviewBlockCaption");
				},

				/**
				 * Returns the block library caption.
				 * @private
				 */
				_getIsDefaultMode: function() {
					return !this.$IsWizardMode;
				},

				/**
				 * @inheritdoc BaseContentItemViewModel#serializableSlicePropertiesCollection
				 * @override
				 */
				extendSerializableSlicePropertiesCollection: function() {
					this.serializableSlicePropertiesCollection =
						this.serializableSlicePropertiesCollection.concat(["PreHeaderText"]);
					this.callParent(arguments);
				},
			},
			diff: [
				{
					"operation": "merge",
					"name": "LeftButtonContainer",
					"parentName": "HeaderContainer",
					"propertyName": "items",
					"values": {
						"visible":"$_getIsDefaultMode"
					}
				},
				{
					"operation": "merge",
					"name": "LeftControlGroup",
					"parentName": "MainContainer",
					"propertyName": "items",
					"values": {
						"caption": "$_getBlockLibraryCaption"
					}
				},
				{
					"operation": "insert",
					"name": "SendTestEmailButton",
					"parentName": "LeftButtonContainer",
					"propertyName": "items",
					"values": {
						"itemType": Terrasoft.ViewItemType.BUTTON,
						"caption": {
							"bindTo": "Resources.Strings.SendTestEmailButtonCaption"
						},
						"classes": {
							"textClass": "actions-button-margin-right"
						},
						"click": {
							"bindTo": "openSendTestEmailContentModalBox"
						},
						"style": Terrasoft.controls.ButtonEnums.style.BLUE
					}
				},
				{
					"operation": "insert",
					"name": "PreHeaderContainer",
					"parentName": "RightContainer",
					"propertyName": "items",
					"values": {
						"itemType": Terrasoft.ViewItemType.CONTAINER,
						"classes": {
							wrapClassName: ["preheader-container"]
						},
						"items": [],
						"visible": "$_getIsDefaultMode"
					},
					"index": 1
				},
				{
					"operation": "insert",
					"name": "PreHeaderGridLayout",
					"parentName": "PreHeaderContainer",
					"propertyName": "items",
					"values": {
						"itemType": Terrasoft.ViewItemType.GRID_LAYOUT,
						"items": []
					}
				},
				{
					"operation": "insert",
					"name": "PreHeaderText",
					"values": {
						"caption": {
							"bindTo": "Resources.Strings.PreHeaderCaption"
						},
						"layout": {
							"column": 0,
							"row": 0,
							"colSpan": 12,
							"rowSpan": 1
						},
						"controlConfig": {
							"macrobuttonclicked": {
								bindTo: "preHeaderMacroClicked"
							},
							"selectedText": {
								"bindTo": "PreHeaderSelectedText"
							},
							"ckeditorDefaultConfig": {
								"allowedContent": true,
								"removeButtons": "Underline,JustifyCenter,JustifyLeft,JustifyRight,Font,Link" +
									",FontSize,JustifyBlock,NumberedList,BulletedList,Bold,Italic,TextColor,Undo" +
									",Redo,Indent,Outdent,bpmonlinesource,lineheight,letterspacing,lineheightpanel,"+
									"letterspacingpanel,bpmonlineemailtemplatelink,indentpanel"
							}
						},
						"bindTo": "PreHeaderText",
						"className": "Terrasoft.InlineTextEdit"
					},
					"parentName": "PreHeaderGridLayout",
					"propertyName": "items",
					"index": 0
				},
				{
					"operation": "insert",
					"parentName": "PreHeaderGridLayout",
					"propertyName": "items",
					"name": "PreHeaderInformationTooltipButton",
					"values": {
						"layout": {
							"column": 12,
							"row": 0,
							"colSpan": 1
						},
						"itemType": Terrasoft.ViewItemType.INFORMATION_BUTTON,
						"content": {
							"bindTo": "Resources.Strings.PreHeaderTooltip"
						},
						"tools": []
					}
				},
				{
					"operation": "insert",
					"name": "CaptionContainer",
					"parentName": "HeaderContainer",
					"propertyName": "items",
					"index": 0,
					"values": {
						"classes": {
							"wrapClassName": ["content-builder-caption-container"]
						},
						"itemType": Terrasoft.ViewItemType.CONTAINER,
						"items": [],
						"visible":"$_getIsDefaultMode"
					}
				},
				{
					"operation": "move",
					"name": "Caption",
					"parentName": "CaptionContainer",
					"propertyName": "items"
				},
				{
					"operation": "move",
					"name": "RightButtonContainer",
					"parentName": "HeaderContainer",
					"propertyName": "items",
					"index": 1
				}
			]
		};
	});
