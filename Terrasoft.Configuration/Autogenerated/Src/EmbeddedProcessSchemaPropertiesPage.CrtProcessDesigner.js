/**
 * Page schema for embedded process properties.
 * Parent: ProcessSchemaPropertiesPage => BaseProcessSchemaPropertiesPage => ProcessFlowElementPropertiesPage =>
 * 	BaseProcessSchemaElementPropertiesPage
 */
define("EmbeddedProcessSchemaPropertiesPage", ["terrasoft", "EmbeddedProcessSchemaPropertiesPageResources",
	"ProcessSchemaUsingViewModel", "ProcessSchemaLocalizableStringViewModel",
	"ProcessMiniEditPageMixin", "ProcessModuleUtilities"
], function(Terrasoft) {
	return {
		messages: {
			/**
			 * @message GetValue
			 * Receive source code edit value.
			 */
			"GetValue": {
				"direction": Terrasoft.MessageDirectionType.PUBLISH,
				"mode": Terrasoft.MessageMode.PTP
			},

			/**
			 * @message GetSourceCodeData
			 * Returns source code edit data. Such as source code value, caption, language etc. For more
			 * information see GetSourceCodeData message in SourceCodeEditPage schema.
			 */
			"GetSourceCodeData": {
				"direction": Terrasoft.MessageDirectionType.SUBSCRIBE,
				"mode": Terrasoft.MessageMode.PTP
			},

			/**
			 * @message SourceCodeChanged
			 * Receive current source code edit value.
			 */
			"SourceCodeChanged": {
				"direction": Terrasoft.MessageDirectionType.SUBSCRIBE,
				"mode": Terrasoft.MessageMode.PTP
			},

			/**
			 * @message SaveItem
			 * Save minipage item.
			 */
			"SaveItem": {
				"mode": Terrasoft.MessageMode.PTP,
				"direction": Terrasoft.MessageDirectionType.PUBLISH
			},

			/**
			 * @message DiscardItem
			 * Discard minipage item.
			 */
			"DiscardItem": {
				"mode": Terrasoft.MessageMode.PTP,
				"direction": Terrasoft.MessageDirectionType.PUBLISH
			}
		},
		attributes: {

			/**
			 * LocalizableString view models.
			 */
			"LocalizableStringViewModels": {
				dataValueType: Terrasoft.DataValueType.COLLECTION,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				isCollection: true,
				value: this.Ext.create("Terrasoft.ObjectCollection")
			},

			/**
			 * Compiled process schema methods.
			 */
			"userDefinedCode": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Indicates whether usings group is visible or not.
			 */
			"IsUsingsGroupVisible": {
				dataValueType: Terrasoft.DataValueType.BOOLEAN,
				value: true
			},

			/**
			 * Indicates whether add using button is visible or not.
			 */
			"IsAddUsingsButtonVisible": {
				dataValueType: Terrasoft.DataValueType.BOOLEAN,
				value: true
			},

			/**
			 * Indicates whether add localizable string button is enabled.
			 */
			"IsAddLocalizableStringButtonEnabled": {
				dataValueType: Terrasoft.DataValueType.BOOLEAN,
				value: true
			},

			/**
			 * Current active localizable string item id.
			 */
			"ActiveLocalizableStringItemId": {
				dataValueType: Terrasoft.DataValueType.GUID
			}
		},
		modules: {
			"CompiledProcessSchemaMethods": {
				"config": {
					"schemaName": "SourceCodeEditPage",
					"isSchemaConfigInitialized": true,
					"useHistoryState": false,
					"showMask": true,
					"autoGeneratedContainerSuffix": "-compile-process-schema-methods",
					"parameters": {
						"viewModelConfig": {
							"Tag": "userDefinedCode",
							"IsTooltipInfoButtonVisible": false
						}
					}
				}
			}
		},
		methods: {

			/**
			 * @inheritdoc ProcessSchemaElementEditable#onElementDataLoad
			 * @overridden
			 */
			loadProcessProperties: function(process) {
				this.set("userDefinedCode", process.userDefinedCode);
				this.initLocalizableStrings(process);
				this.set("IsCompiledMethodsVisible", true);
			},

			/**
			 * @inheritdoc ProcessSchemaElementEditable#onGetSourceCodeData
			 * @overridden
			 */
			onGetSourceCodeData: function(tag) {
				const sourceCodeData = this.callParent(arguments);
				sourceCodeData.caption = this.get("Resources.Strings.CompiledProcessMethodsCaption");
				return sourceCodeData;
			},

			/**
			 * @inheritdoc BaseProcessSchemaElementPropertiesPage#getProcessProperties
			 * @overridden
			 */
			getProcessProperties: function() {
				return ["userDefinedCode"];
			},

			/**
			 * @inheritdoc BaseProcessSchemaElementPropertiesPage#getProcessParameters
			 * @overridden
			 */
			getProcessParameters: function() {
				return [];
			},

			/**
			 * @inheritdoc ProcessSchemaElementEditable#saveValues
			 * @overridden
			 */
			saveValues: function() {
				this.callParent(arguments);
				const process = this.get("ProcessElement");
				this.saveLocalizableStrings(process);
			},

			/**
			 * @private
			 */
			_getToolButtonConfig: function(canDelete) {
				return {
					canDelete: canDelete
				};
			},

			/**
			 * @private
			 */
			initLocalizableStrings: function(schema) {
				const viewModels = Ext.create("Terrasoft.Collection");
				Terrasoft.each(schema.localizableStrings, function(localizableString) {
					const localizableStringViewModel = this.createLocalizableStringViewModel({
						id: localizableString.uId,
						name: localizableString.name,
						caption: localizableString.caption,
						value: localizableString.value,
						isEditable: localizableString.createdInSchemaUId === schema.uId
					});
					viewModels.add(localizableString.uId, localizableStringViewModel);
				}, this);
				const localizableStringsViewModels = this.get("LocalizableStringViewModels");
				localizableStringsViewModels.clear();
				localizableStringsViewModels.loadAll(viewModels);
			},

			/**
			 * @private
			 */
			createLocalizableStringViewModel: function(config) {
				const caption = config.caption || Ext.create("Terrasoft.LocalizableString");
				const value = config.value || Ext.create("Terrasoft.LocalizableString");
				const toolButtonConfig = this._getToolButtonConfig(config.isEditable);
				const viewModel = Ext.create("Terrasoft.ProcessSchemaLocalizableStringViewModel", {
					values: {
						Id: config.id,
						Name: config.name,
						Caption: caption,
						Value: value,
						IsNew: config.isNew,
						IsEditable: config.isEditable,
						MarkerValue: config.name,
						ParameterEditToolsButtonMenu: this.getToolButtonMenuList(config.id, toolButtonConfig),
						ProcessElement: "ProcessElement",
						ParentModule: this
					}
				});
				viewModel.sandbox = this.sandbox;
				viewModel.on("change", this.onChildViewModelChange, this);
				return viewModel;
			},

			/**
			 * @inheritdoc ProcessSchemaElementEditable#initUsings
			 * @overridden
			 */
			initUsings: function(schema) {
				const viewModels = Ext.create("Terrasoft.Collection");
				Terrasoft.each(schema.usings, function(using) {
					const usingViewModel = this.createUsingViewModel({
						id: using.uId,
						name: using.name,
						alias: using.alias,
						isEditable: using.createdInSchemaUId === schema.uId
					});
					viewModels.add(using.uId, usingViewModel);
				}, this);
				const usingViewModels = this.get("UsingViewModels");
				usingViewModels.clear();
				usingViewModels.loadAll(viewModels);
			},

			/**
			 * @inheritdoc ProcessSchemaElementEditable#createUsingViewModel
			 * @overridden
			 */
			createUsingViewModel: function(config) {
				const id = config.id;
				let alias = config.alias;
				if (alias === "null") {
					alias = "";
				}
				const name = config.name || "";
				const toolButtonConfig = this._getToolButtonConfig(config.isEditable);
				const viewModel = Ext.create("Terrasoft.ProcessSchemaUsingViewModel", {
					values: {
						Id: id,
						Name: name,
						Alias: alias || "",
						IsNew: config.isNew,
						IsEditable: config.isEditable,
						MarkerValue: name,
						ParameterEditToolsButtonMenu: this.getToolButtonMenuList(id, toolButtonConfig),
						ProcessElement: "ProcessElement",
						ParentModule: this
					}
				});
				viewModel.sandbox = this.sandbox;
				viewModel.on("change", this.onChildViewModelChange, this);
				return viewModel;
			},

			/**
			 * @private
			 */
			getLocalizableStringViewConfig: function(viewConfig) {
				const localizableStringViewConfig = this.get("LocalizableStringViewConfig");
				if (localizableStringViewConfig) {
					viewConfig.config = localizableStringViewConfig;
					return;
				}
				viewConfig.config = this.generateLocalizableStringViewConfig();
				this.set("LocalizableStringViewConfig", viewConfig.config);
			},

			/**
			 * Generates a button representation element.
			 * @protected
			 * @return {Object} configuration element in the Container List.
			 */
			generateLocalizableStringViewConfig: function() {
				const parameterToolsButtonConfig = this.getParameterToolsButtonConfig("UsingsEditToolsButton");
				parameterToolsButtonConfig.markerValue = {
					bindTo: "MarkerValue"
				};
				return this.getContainerConfig("item", ["hierarchical-container-list-item"], [
					this.getContainerConfig("item-view", ["parameter-ct", "t-button-container-proc"], [
						this.getContainerConfig("ParameterValueContainer", ["t-button-name-container-proc",
							"placeholderOpacity"
						], [
							this.getContainerConfig("ToolsContainer",
								["parameter-value-ct", "tools-container-wrapClass"], [
									this.getContainerConfig("LabelWrap", ["label-container-wrapClass"], [{
										id: "Caption",
										className: "Terrasoft.Label",
										caption: {
											bindTo: "Name"
										},
										classes: {
											labelClass: ["t-label-proc", "t-label-proc-param", "label-link"]
										},
										click: {
											bindTo: "onLoadMinEditPageClick"
										}
									}]),
									this.getContainerConfig("ToolsButtonWrap", ["tools-button-container-wrapClass"],
										[parameterToolsButtonConfig])
								])
						])
					], {
						bindTo: "Visible"
					}), this.getContainerConfig("item-edit", ["parameter-edit-ct"], [], {
						bindTo: "Visible",
						bindConfig: {
							converter: this.invertBooleanValue
						}
					})
				]);
			},

			/**
			 * @inheritdoc ProcessSchemaElementEditable#getTabs
			 * @overridden
			 */
			getTabs: function() {
				const tabs = this.callParent();
				tabs.push(
					{
						Name: "ResourcesTab",
						Caption: this.get("Resources.Strings.ResourcesTabCaption"),
						MarkerValue: "ResourcesTab"
					}
				);
				return tabs;
			},

			/**
			 * @inheritdoc ProcessSchemaElementEditable#onAddUsingButtonClick
			 * @overridden
			 */
			onAddUsingButtonClick: function() {
				const usingViewModels = this.get("UsingViewModels");
				const id = Terrasoft.generateGUID();
				const usingViewModel = this.createUsingViewModel({
					id: id,
					isNew: true,
					isEditable: true
				});
				usingViewModels.add(id, usingViewModel);
				usingViewModel.onLoadMinEditPageClick();
			},

			/**
			 * Event handler Add Localizable String button click.
			 * @private
			 */
			onAddLocalizableStringButtonClick: function() {
				const localizableStringViewModels = this.get("LocalizableStringViewModels");
				const id = Terrasoft.generateGUID();
				const localizableStringViewModel = this.createLocalizableStringViewModel({
					id: id,
					isNew: true,
					isEditable: true
				});
				localizableStringViewModels.add(id, localizableStringViewModel);
				localizableStringViewModel.onLoadMinEditPageClick();
			},

			/**
			 * Gets menu list for selected item.
			 * @protected
			 * @param {String} itemId Item identifier.
			 * @param {Object} config Item configuration
			 * @return {Terrasoft.Collection}
			 */
			getToolButtonMenuList: function(itemId, config) {
				const mergedConfig = Ext.apply({canEdit: true, canDelete: true}, config);
				const toolsButtonMenu = Ext.create("Terrasoft.Collection");
				if (mergedConfig.canEdit) {
					toolsButtonMenu.add(this.getEditButtonMenuItem(itemId));
				}
				if (mergedConfig.canDelete) {
					toolsButtonMenu.add(this.getDeleteButtonMenuItem(itemId));
				}
				return toolsButtonMenu;
			},

			/**
			 * @inheritdoc ProcessSchemaPropertiesPage#getSupportedParameterTypes
			 * @overridden
			 */
			getSupportedParameterTypes: function() {
				const types = Terrasoft.data.constants.DataValueTypeConfig;
				const supportedTypes = this.callParent(arguments);
				supportedTypes.secondary = [
					types.MONEY,
					types.DATE,
					types.TIME,
					types.ENTITY,
					types.ENTITY_COLLECTION,
					types.GUID
				];
				return supportedTypes;
			},

				/**
			 * Saves localizable string edit page if it is still visible.
			 * @private
			 * @param {Terrasoft.model.ProcessSchemaLocalizableStringViewModel} localizableStringViewModel
			 * localizable string view model.
			 * @param {boolean} force Send DiscardItem message if not saved successfully.
			 */
			saveLocalizableStringEditPage: function(localizableStringViewModel, force) {
				const isEditPageVisible = !localizableStringViewModel.get("Visible");
				if (isEditPageVisible) {
					const pageId = localizableStringViewModel.getProcessMiniEditPageId();
					const success = this.sandbox.publish("SaveItem", this, [pageId]);
					if (!success && force) {
						this.sandbox.publish("DiscardItem", this, [pageId]);
					}
					return success;
				}
				return true;
			},

			/**
			 * @inheritdoc ProcessSchemaElementEditable#saveOpenEditPages
			 * @overridden
			 */
			saveOpenEditPages: function() {
				this.callParent(arguments);
				const schema = this.get("ProcessElement");
				this._saveOpenEditPage(schema, "LocalizableString");
			},

			/**
			 * Updates schema using by view model.
			 * @private
			 * @param {Terrasoft.model.ProcessSchemaUsingViewModel} usingViewModel Using view model.
			 * @param {Terrasoft.manager.ProcessSchema} schema Process schema.
			 * @return {Boolean} Returns true if schema using was changed, false otherwise.
			 */
			updateLocalizableStringByViewModel: function(localizableStringViewModel, schema) {
				const name = localizableStringViewModel.get("Name");
				if (!localizableStringViewModel.changedValues || Ext.isEmpty(name)) {
					return false;
				}
				const localizableStrings = schema.localizableStrings;
				const id = localizableStringViewModel.get("Id");
				const config = {
					uId: id,
					name: name,
					caption: localizableStringViewModel.get("Caption"),
					value: localizableStringViewModel.get("Value")
				};
				const localizableString = localizableStrings.findByFn(function(localizableString) {
					return localizableString.uId === id;
				}, this);
				if (localizableString) {
					config.modifiedInSchemaUId = schema.uId;
					localizableString.setValue(config);
				} else {
					config.uId = id;
					schema.addLocalizableString(config);
				}
				return true;
			},

			/**
			 * @private
			 */
			updateLocalizableStrings: function(schema) {
				const localizableStringViewModels = this.get("LocalizableStringViewModels");
				let isChanged = false;
				Terrasoft.each(localizableStringViewModels, function(viewModel) {
					if (this.saveLocalizableStringEditPage(viewModel)) {
						isChanged = this.updateLocalizableStringByViewModel(viewModel, schema);
					}
				}, this);
				return isChanged;
			},

			/**
			 * Removes 'Using' from collection Usings.
			 * @private
			 * @param {Terrasoft.manager.ProcessSchema} schema Process schema.
			 * @return {Boolean} Returns true if at least one schema usings was removed, false otherwise.
			 */
			removeLocalizableStrings: function(schema) {
				let isRemoved = false;
				const localizableStringViewModels = this.get("LocalizableStringViewModels");
				const localizableStrings = schema.localizableStrings;
				Terrasoft.each(localizableStrings, function(localizableString) {
					const key = localizableString.uId;
					if (!localizableStringViewModels.contains(key)) {
						localizableStrings.removeByKey(key);
						isRemoved = true;
					}
				}, this);
				return isRemoved;
			},

			/**
			 * Saves schema localizable strings.
			 * @private
			 * @param {Terrasoft.manager.ProcessSchema} schema Process schema.
			 */
			saveLocalizableStrings: function(schema) {
				const isLocalizableStringsRemoved = this.removeLocalizableStrings(schema);
				const isLocalizableStringsChanged = this.updateLocalizableStrings(schema);
				if (isLocalizableStringsChanged || isLocalizableStringsRemoved) {
					schema.fireEvent("changed", {
						localizableStrings: schema.localizableStrings
					}, this);
				}
			}
		},
		diff: /**SCHEMA_DIFF*/[
			{
				"operation": "merge",
				"parentName": "ControlGroup",
				"propertyName": "items",
				"name": "name",
				"values": {
					"enabled": false
				}
			},
			{
				"operation": "merge",
				"name": "description",
				"values": {
					"layout": {
						"column": 0,
						"row": 1,
						"colSpan": 24,
						"rowSpan": 1
					}
				}
			},
			{
				"operation": "merge",
				"name": "SysPackage",
				"values": {
					"layout": {
						"column": 0,
						"row": 2,
						"colSpan": 24,
						"rowSpan": 1
					}
				}
			},
			{
				"operation": "merge",
				"name": "maxLoopCount",
				"values": {
					"layout": {
						"column": 0,
						"row": 3,
						"colSpan": 24,
						"rowSpan": 1
					}
				}
			},
			{
				"operation": "remove",
				"name": "version"
			},
			{
				"operation": "remove",
				"name": "tag"
			},
			{
				"operation": "remove",
				"name": "NotificationCaption"
			},
			{
				"operation": "remove",
				"name": "enabled"
			},
			{
				"operation": "remove",
				"name": "isLogging"
			},
			{
				"operation": "remove",
				"name": "serializeToDB"
			},
			{
				"operation": "remove",
				"name": "useForceCompileContainer"
			},
			{
				"operation": "remove",
				"name": "useForceCompile"
			},
			{
				"operation": "remove",
				"name": "useForceCompileInfoButton"
			},
			{
				"operation": "remove",
				"name": "isActualVersion"
			},
			{
				"operation": "remove",
				"name": "useSystemSecurityContext"
			},
			{
				"operation": "remove",
				"name": "UsingsContainer"
			},
			{
				"operation": "insert",
				"parentName": "MethodsTab",
				"propertyName": "items",
				"name": "UsingsGroup",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTROL_GROUP,
					"classes": {
						"wrapClass": ["using-container"]
					},
					"caption": {
						"bindTo": "Resources.Strings.UsingsGroupCaption"
					},
					"collapsed": true,
					"visible": {
						"bindTo": "IsUsingsGroupVisible"
					},
					"items": [],
					"tools": []
				}
			},
			{
				"operation": "insert",
				"name": "UsingsButton",
				"parentName": "UsingsGroup",
				"propertyName": "tools",
				"values": {
					"itemType": Terrasoft.ViewItemType.BUTTON,
					"classes": {
						"imageClass": ["button-background-no-repeat"],
						"wrapperClass": ["detail-tools-button-wrapper t-addbutton-proc"]
					},
					"imageConfig": {"bindTo": "Resources.Images.AddButtonImage"},
					"click": {"bindTo": "onAddUsingButtonClick"},
					"visible": {"bindTo": "IsAddUsingsButtonVisible"},
					"enabled": {"bindTo": "IsAddUsingsButtonEnabled"},
					"style": Terrasoft.controls.ButtonEnums.style.TRANSPARENT
				}
			},
			{
				"operation": "insert",
				"name": "UsingContainerList",
				"parentName": "UsingsGroup",
				"propertyName": "items",
				"values": {
					"generator": "ConfigurationItemGenerator.generateContainerList",
					"idProperty": "Id",
					"onItemClick": {
						"bindTo": "onItemClick"
					},
					"collection": "UsingViewModels",
					"onGetItemConfig": "getUsingViewConfig",
					"rowCssSelector": ".usingContainer",
					"classes": {
						"wrapClassName": ["t-items-list-proc"]
					}
				}
			},
			{
				"operation": "remove",
				"name": "ProcessSchemaMethods"
			},
			{
				"operation": "insert",
				"name": "ResourcesTab",
				"parentName": "Tabs",
				"propertyName": "tabs",
				"values": {
					"wrapClass": ["tabs", "resources-tab"],
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "AddLocalizableStringButton",
				"parentName": "ResourcesTab",
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.BUTTON,
					"caption": {"bindTo": "Resources.Strings.AddLocalizableStringButtonCaption"},
					"click": {"bindTo": "onAddLocalizableStringButtonClick"},
					"enabled": {"bindTo": "IsAddLocalizableStringButtonEnabled"},
					"style": Terrasoft.controls.ButtonEnums.style.BLUE
				}
			},
			{
				"operation": "insert",
				"name": "LocalizableStringsContainerList",
				"parentName": "ResourcesTab",
				"propertyName": "items",
				"values": {
					"generator": "ConfigurationItemGenerator.generateContainerList",
					"idProperty": "Id",
					"onItemClick": {
						"bindTo": "onItemClick"
					},
					"collection": "LocalizableStringViewModels",
					"onGetItemConfig": "getLocalizableStringViewConfig",
					"rowCssSelector": ".usingContainer",
					"classes": {
						"wrapClassName": ["t-items-list-proc", "localizable-srting-list"]
					}
				}
			},
			{
				"operation": "remove",
				"name": "EditorsContainer"
			},
			{
				"operation": "remove",
				"name": "StudioFreeProcessUrl"
			},
			{
				"operation": "remove",
				"name": "OpenStudioFreeButton"
			},
			{
				"operation": "remove",
				"name": "BackgroundModePriorityConfig"
			}
		]/**SCHEMA_DIFF*/
	};
});
