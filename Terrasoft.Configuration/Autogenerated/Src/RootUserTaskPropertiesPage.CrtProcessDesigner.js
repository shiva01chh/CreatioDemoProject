/**
 * Parent: ProcessFlowElementPropertiesPage
 */
define("RootUserTaskPropertiesPage", ["RootUserTaskPropertiesPageResources", "SourceCodeEditEnums", "SourceCodeEdit"],
	function(resources, sourceCodeEditEnums) {
		return {
			properties: {
				/**
				 * Schema manager name, used for outdated schema notifications.
				 * @protected
				 * @type {String}
				 */
				schemaManagerName: null,

				/**
				 * Use websocket notifications.
				 * @protected
				 * @type {Boolean}
				 */
				useNotification: false
			},
			messages: {
				/**
				 * @message GetProcessElementInfo
				 * Returns process element and package unique identifier.
				 */
				"GetProcessElementInfo": {
					"direction": Terrasoft.MessageDirectionType.SUBSCRIBE,
					"mode": Terrasoft.MessageMode.PTP
				},
				/**
				 * @message SaveProcessElement
				 * Saves process element.
				 */
				"SaveProcessElement": {
					"direction": Terrasoft.MessageDirectionType.PUBLISH,
					"mode": Terrasoft.MessageMode.PTP
				},
				/**
				 * @message ValidateProcessElement
				 * Validates process element.
				 */
				"ValidateProcessElement": {
					"direction": Terrasoft.MessageDirectionType.PUBLISH,
					"mode": Terrasoft.MessageMode.PTP
				},
				/**
				 * @message GetValue
				 * Receive source code edit value.
				 */
				"GetValue": {
					"direction": Terrasoft.MessageDirectionType.PUBLISH,
					"mode": Terrasoft.MessageMode.PTP
				},

				/**
				 * @message GetSourceCodeData
				 * Returns source code edit data. Such as source code value, caption, language etc. For more
				 * information see GetSourceCodeData message in SourceCodeEditPage schema.
				 */
				"GetSourceCodeData": {
					"direction": Terrasoft.MessageDirectionType.SUBSCRIBE,
					"mode": Terrasoft.MessageMode.PTP
				},

				/**
				 * @message SourceCodeChanged
				 * Receive current source code edit value.
				 */
				"SourceCodeChanged": {
					"direction": Terrasoft.MessageDirectionType.SUBSCRIBE,
					"mode": Terrasoft.MessageMode.PTP
				}
			},
			attributes: {
				"AfterActivitySaveScript": {
					dataValueType: Terrasoft.DataValueType.TEXT,
					type: this.Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
				},
				"SourceCodeEditPageLoaded": {
					dataValueType: Terrasoft.DataValueType.BOOLEAN,
					type: this.Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
					value: false
				},
				"IsAfterActivitySaveScriptEditVisible": {
					dataValueType: Terrasoft.DataValueType.BOOLEAN,
					type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
					value: false
				},
				"IsAddSchemaButtonClicked": {
					dataValueType: this.Terrasoft.DataValueType.BOOLEAN,
					type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
				},
				"HasCompileModeLimitations": {
					dataValueType: Terrasoft.DataValueType.BOOLEAN,
					type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
					value: false
				}
			},
			modules: {
				"AfterActivitySaveScriptBody": {
					"config": {
						"schemaName": "SourceCodeEditPage",
						"isSchemaConfigInitialized": true,
						"useHistoryState": false,
						"showMask": true,
						"autoGeneratedContainerSuffix": "-after-activity-save-script-body",
						"parameters": {
							"viewModelConfig": {
								"Tag": "AfterActivitySaveScript"
							}
						}
					}
				}
			},
			methods: {

				//region Methods: Private

				/**
				 * Initializes AfterActivitySaveScript and IsAfterActivitySaveScriptEditVisible properties.
				 * @private
				 * @param {Function} callback Callback function.
				 * @param {Object} scope Callback function call context.
				 */
				initAfterActivitySaveScript: function(callback, scope) {
					var userTask = this.get("ProcessElement");
					this.set("AfterActivitySaveScript", userTask.afterActivitySaveScript);
					if (this.getIsUserTask(userTask) !== true) {
						callback.call(scope);
						return;
					}
					this.getUserTaskSchema(function(userTaskSchema) {
						this.initIsAfterActivitySaveScriptEditVisible(userTaskSchema, callback, scope);
					}, this);
				},

				/**
				 * Returns flag that indicates whether the process element is user task.
				 * @private
				 * @param {Terrasoft.ProcessFlowElementSchema} processElement Process element.
				 * @return {Boolean}
				 */
				getIsUserTask: function(processElement) {
					return processElement instanceof Terrasoft.ProcessUserTaskSchema ||
						processElement instanceof Terrasoft.ProcessSchemaUserTask;
				},

				/**
				 * Returns UserTask schema for process schema user task.
				 * @private
				 * @param {Function} callback Callback function.
				 * @param {Terrasoft.UserTaskSchema} callback.userTaskSchema UserTask schema instance.
				 * @param {Object} scope Callback function call context.
				 */
				getUserTaskSchema: function(callback, scope) {
					var userTask = this.get("ProcessElement");
					if (userTask.schema) {
						callback.call(scope, userTask.schema);
						return;
					}
					var schemaUId = userTask.schemaUId;
					if (Ext.isEmpty(schemaUId) || Terrasoft.isEmptyGUID(schemaUId)) {
						callback.call(scope, null);
						return;
					}
					Terrasoft.ProcessUserTaskSchemaManager.forceGetInstanceByUId(userTask.schemaUId, callback, scope);
				},

				/**
				 * @private
				 */
				_changeSchemaParameterMapping: function(element, newUId, oldUID) {
					var schema = element.parentSchema;
					var mappingInfo = schema.findMappingByTargetUId(newUId);
					var processElementParameterMacros = Terrasoft.FormulaMacros.prepareProcessElementParameterValue(
						element.uId, oldUID);
					mappingInfo.targetMetaPath = processElementParameterMacros.getMetaPath();
					mappingInfo.targetUId = oldUID;
					var mappings = schema.mappings;
					mappings.removeByKey(newUId);
					mappings.add(oldUID, mappingInfo);
				},

				//endregion

				//region Methods: Protected

				/**
				 * @inheritdoc BaseSchemaViewModel#init
				 * @protected
				 * @overridden
				 */
				init: function(callback, scope) {
					this.callParent([function() {
						this.initMessages();
						if (this.useNotification && this.schemaManagerName) {
							Terrasoft[this.schemaManagerName].on("outdated", this.onSchemaOutdated, this);
						}
						this.initAfterActivitySaveScript(callback, scope || this);
					}, this]);
				},

				/**
				 * Initializes IsAfterActivitySaveScriptEditVisible property.
				 * @protected
				 * @param {Terrasoft.UserTaskSchema} userTaskSchema UserTask schema instance.
				 * @param {Function} callback Callback function.
				 * @param {Object} scope Callback function call context.
				 */
				initIsAfterActivitySaveScriptEditVisible: function(userTaskSchema, callback, scope) {
					var isAfterActivitySaveScriptVisible = userTaskSchema == null
						? false
						: userTaskSchema.enableCustomEventHandlers === true;
					this.set("IsAfterActivitySaveScriptEditVisible", isAfterActivitySaveScriptVisible);
					callback.call(scope);
				},

				/**
				 * Subscribes to SourceCodeEditPage schema messages.
				 * @protected
				 */
				initMessages: function() {
					const moduleId = this.getModuleId("AfterActivitySaveScriptBody");
					const sandbox = this.sandbox;
					sandbox.subscribe("GetSourceCodeData", this.onGetSourceCodeData, this, [moduleId]);
					sandbox.subscribe("SourceCodeChanged", this.onSourceCodeChanged, this, [moduleId]);
					const moduleIds = this.getModuleIds();
					sandbox.subscribe("GetProcessElementInfo", this.onGetProcessElementInfo, this, moduleIds);
				},

				/**
				 * GetSourceCodeData message handler. Returns source code data.
				 * @protected
				 * @return {Object} Source code edit data.
				 * @return {String} return.sourceCode Source code value.
				 * @return {String} return.dataItemMarker Source code edit marker value.
				 * @return {String} return.name Source code edit name.
				 * @return {String} return.caption Source code edit caption to display in expand mode.
				 * @return {String} return.language Source code edit language.
				 */
				onGetSourceCodeData: function() {
					this.set("SourceCodeEditPageLoaded", true);
					var userTask = this.get("ProcessElement");
					return {
						sourceCode: this.get("AfterActivitySaveScript"),
						dataItemMarker: "AfterActivitySaveScriptBody",
						name: userTask.name,
						showCaptionInCollapsedMode: true,
						caption: this.get("Resources.Strings.AfterActivitySaveScriptCaption"),
						language: sourceCodeEditEnums.Language.CSHARP
					};
				},

				/**
				 * SourceCodeChanged message handler. Sets AfterActivitySaveScript attribute value.
				 * @protected
				 * @param {Object} data Current source code value.
				 * @param {String} data.tag Source code edit page tag.
				 * @param {String} data.sourceCode Source code value.
				 */
				onSourceCodeChanged: function(data) {
					this.set("AfterActivitySaveScript", data.sourceCode);
				},

				/**
				 * Updates AfterActivitySaveScript attribute value from source code edit.
				 * @protected
				 */
				getSourceCodeEditValue: function() {
					if (!this.get("SourceCodeEditPageLoaded")) {
						return;
					}
					var moduleId = this.getModuleId("AfterActivitySaveScriptBody");
					var sandbox = this.sandbox;
					var sourceCodeData = sandbox.publish("GetValue", null, [moduleId]);
					this.set("AfterActivitySaveScript", sourceCodeData.value);
				},

				/**
				 * @inheritdoc BaseProcessSchemaElementPropertiesPage#saveValues
				 * @protected
				 * @overridden
				 */
				saveValues: function() {
					this.callParent(arguments);
					const userTask = this.get("ProcessElement");
					this.getSourceCodeEditValue();
					userTask.setPropertyValue("afterActivitySaveScript", this.get("AfterActivitySaveScript"));
				},

				/**
				 * Checks if element can be removed, depends on parameters used in another elements mapping.
				 * @protected
				 * @param {Function} callback Callback function.
				 * @param {Boolean} callback.canRemove Flag that indicates whether element can remove or not.
				 * @param {Object} scope Callback function context.
				 */
				getCanRemoveElement: function(callback, scope) {
					var element = this.get("ProcessElement");
					Terrasoft.ProcessSchemaDesignerUtilities.validateElementRemoval(
						element.parentSchema, [element.name], callback, scope);
				},

				/**
				 * Checks if schema can be changed.
				 * @protected
				 * @param {Function} callback Callback function.
				 * @param {Boolean} callback.canChange Flag that indicates whether schema can change or not.
				 * @param {Object} scope Callback function context.
				 */
				canChangeSchema: function(callback, scope) {
					var element = this.get("ProcessElement");
					var utils = Terrasoft.ProcessSchemaDesignerUtilities;
					utils.validateAllLazyPropertiesAreLoaded(element.parentSchema, function(areLoaded) {
						if (areLoaded) {
							this.getCanRemoveElement(function(canRemove) {
								callback.call(scope, canRemove);
							}, this);
						} else {
							callback.call(scope, false);
						}
					}, this);
				},

				/**
				 * Asks user to confirm change schema.
				 * @private
				 * @param {Terrasoft.ProcessSchema} oldSchema Old schema.
				 */
				confirmSchemaChange: function(oldSchema) {
					var buttonCaption = this.get("Resources.Strings.ChangePageSchemaButtonCaption");
					var changeButton = Terrasoft.getButtonConfig("change", buttonCaption);
					var message = this.get("Resources.Strings.ChangeSchemaWarningMessage");
					this.showConfirmationDialog(message, function(returnCode) {
						if (returnCode === "change") {
							this.onAfterSchemaChanged();
						} else {
							this.setSchema(oldSchema);
						}
					}, [changeButton, Terrasoft.MessageBoxButtons.CANCEL.returnCode], {defaultButton: 0});
				},

				/**
				 * Handle on after schema changed.
				 * @protected
				 */
				onAfterSchemaChanged: function () {
					const element = this.get("ProcessElement");
					element.convertToSingleInstance();
				},

				/**
				 * @inheritdoc ProcessFlowElementPropertiesPage#initBaseParameters
				 * @protected
				 * @overridden
				 */
				initBaseParameters: function(element, skipValidation) {
					this.callParent(arguments);
					this.initHasCompileModeLimitations();
				},

				/**
				 * Initializes HasCompileModeLimitations attribute value.
				 * @protected
				 */
				initHasCompileModeLimitations: Terrasoft.emptyFn,

				/**
				 * Returns schema attribute value.
				 */
				getSchema: function() {
					return this.get("Schema");
				},

				/**
				 * Returns outdated schema attribute value.
				 * @protected
				 * @param {Object} event Schema outdated event.
				 * @returns {{value, displayValue}}
				 */
				getOutdatedSchema: function(event) {
					return {
						value: event.uId,
						displayValue: event.caption
					};
				},

				/**
				 * Sets schema attribute value.
				 * @protected
				 * @param {Object} schema Schema lookup value.
				 * @param {Object} [options] Options.
				 */
				setSchema: function(schema, options) {
					this.set("Schema", schema, options);
				},

				/**
				 * Handles the message for manager when outdated.
				 * @protected
				 */
				onSchemaOutdated: function(event) {
					var outdatedSchema = this.getOutdatedSchema(event);
					var schema = this.getSchema();
					if (!schema || schema.value === outdatedSchema.value) {
						Terrasoft.defer(function() {
							if (schema) {
								this.saveValues();
								this.synchronizeSchemaParameters();
							} else {
								if (this.$IsAddSchemaButtonClicked) {
									this.setSchema(outdatedSchema);
								}
							}
						}, this);
					}
				},

				/**
				 * Handles page schema change, re-initializes page parameters.
				 * @protected
				 * @param {Function} callback The callback function.
				 * @param {Object} scope The scope of callback function.
				 */
				synchronizeSchemaParameters: Terrasoft.abstractFn,

				/**
				 * Invalidates dependent elements if it has mapping on deleted parameter.
				 * @protected
				 * @param {Object} links Depenedent elements.
				 */
				invalidateDependentElements: function(links) {
					var element = this.$ProcessElement;
					Terrasoft.each(links, function(link) {
						var sourceParameter = link.sourceParameter;
						var elementParameter = element.findParameterByUId(sourceParameter.uId) ||
							element.findParameterByName(sourceParameter.name);
						if (!(elementParameter)) {
							link.dependentElement.setPropertyValue("isValid", false);
						}
					}, this);
				},

				/**
				 * Synchronizes schema parameter with previous parameter.
				 * @protected
				 * @param {Terrasoft.manager.mixins.ParametrizedProcessSchemaElement} element Process element.
				 * @param {Terrasoft.manager.ProcessSchemaParameter} newParameter New parameter.
				 * @param {Terrasoft.manager.ProcessSchemaParameter} oldParameter Old parameter.
				 */
				synchronizeSchemaParameter: function(element, newParameter, oldParameter) {
					this._synchronizeSchemaParameter(element, element.parameters, newParameter, oldParameter);
				},

				/**
				 * @private
				 */
				_synchronizeSchemaParameter: function(element, parameters, newParameter, oldParameter) {
					if (!newParameter || newParameter.dataValueType !== oldParameter.dataValueType) {
						return;
					}
					const newUId = newParameter.uId;
					element.removeParameterByUId(newUId);
					const oldUID = oldParameter.uId;
					newParameter.uId = oldUID;
					if (!parameters.find(oldUID)) {
						parameters.add(oldUID, newParameter);
					}
					if (newParameter.referenceSchemaUId && !oldParameter.referenceSchemaUId) {
						oldParameter.referenceSchemaUId = newParameter.referenceSchemaUId;
					}
					const canBeMapped = newParameter.processFlowElementSchema
						.getCanAssignParameterSourceValue(newParameter);
					if (canBeMapped) {
						const oldValue = oldParameter.getMappingValue();
						newParameter.setMappingValue(oldValue);
					}
					newParameter.isValid = oldParameter.isValid;
					if (!newParameter.getIsDynamic() && newUId !== oldUID) {
						this._changeSchemaParameterMapping(element, newUId, oldUID);
					}
					this._synchronizeNestedParameters(element, newParameter, oldParameter);
				},

				/**
				 * @private
				 */
				_synchronizeNestedParameters: function(element, newParameter, oldParameter) {
					if (!Terrasoft.Features.getIsEnabled("ManageProcessCollectionParameters")) {
						return;
					}
					oldParameter.itemProperties.each(function(nestedParameter) {
						const newNestedParameter = this._findParameterByNameOrByUId(newParameter.itemProperties,
							nestedParameter.name, nestedParameter.uId);
						this._synchronizeSchemaParameter(element, newParameter.itemProperties,
							newNestedParameter, nestedParameter);
					}, this);
				},

				/**
				 * @private
				 */
				_findParameterByNameOrByUId: function(parameters, name, uId) {
					return parameters.findByPath("name", name) || parameters.findByPath("uId", uId);
				},

				/**
				 * @inheritdoc Terrasoft.BaseProcessSchemaElementPropertiesPage#onDestroy
				 * @overridden
				 */
				onDestroy: function() {
					if (this.useNotification && this.schemaManagerName) {
						Terrasoft[this.schemaManagerName].un("outdated", this.onSchemaOutdated, this);
					}
					this.callParent(arguments);
				},

				/**
				 * Returns root parameters from parameters collection.
				 * @protected
				 * @param {Terrasoft.ProcessSchemaParameterCollection|Terrasoft.Collection} parametersCollection Collection of parameters.
				 */
				getRootsParameters: function(parametersCollection) {
					return parametersCollection instanceof Terrasoft.ProcessSchemaParameterCollection
						? parametersCollection.getRoots()
						: parametersCollection;
				},

				/**
				 * Returns a compile mode limitations info button content.
				 * @protected
				 * @returns {String}
				 */
				getCompileModeLimitationsInfoContent: function() {
					return Terrasoft.Resources.ProcessSchemaDesigner.Messages.CollectionInCompileProcessInfoText;
				},

				/**
				 * Determines whether the performer assignment option is enabled or not.
				 * @protected
				 * @returns {Boolean}
				 */
				getIsPerformerAssignmentEnabled: function() {
					return Terrasoft.Features.getIsEnabled("UseProcessPerformerAssignment");
				},

				/**
				 * Determines whether the performer assignment option is disabled or not.
				 * @protected
				 * @returns {Boolean}
				 */
				getIsPerformerAssignmentDisabled: function() {
					return !this.getIsPerformerAssignmentEnabled();
				},

				/**
				 * Posts messages to all loaded modules and returns the results.
				 * @param {String} messageName Message name to post.
				 * @param {Function} moduleIdFilterFn Optional function that performs an additional filtration
				 * of module ids.
				 * @returns {Array} Message processing results array.
				 * @protected
				 * @virtual
				 */
				postMessageToModules: function(messageName, moduleIdFilterFn) {
					let moduleIds = this.getModuleIds();
					if (Ext.isFunction(moduleIdFilterFn)) {
						moduleIds = moduleIdFilterFn.apply(this, [moduleIds]);
					}
					const {sandbox} = this;
					const results = moduleIds.map(moduleId => sandbox.publish(messageName, null, [moduleId]) ?? []);
					return results.flat();
				},

				/**
				 * Handler for GetProcessElementInfo message.
				 * @protected
				 */
				onGetProcessElementInfo: function() {
					return {
						packageUId: this.get("packageUId"),
						processElement: this.get("ProcessElement")
					};
				}

				//endregion

			},
			diff: /**SCHEMA_DIFF*/[
				{
					"operation": "insert",
					"name": "AfterActivitySaveScriptBody",
					"parentName": "SettingsTab",
					"propertyName": "items",
					"values": {
						"itemType": Terrasoft.ViewItemType.MODULE,
						"classes": {
							"wrapClassName": "after-activity-save-script-body-container"
						},
						"items": [],
						"visible": {
							"bindTo": "IsAfterActivitySaveScriptEditVisible"
						}
					}
				}
			]/**SCHEMA_DIFF*/
		};
	}
);
