/**
 * Base property page schema for process schema elements
 * Class tree:
 *    BaseProcessSchemaElementPropertiesPage
 *        SequenceFlowPropertiesPage
 *            ConditionalSequenceFlowPropertiesPage
 *        ProcessBaseGatewayPropertiesPage
 *        ScriptTaskPropertiesPage
 *        EventSubProcessPropertiesPage
 *        ProcessFlowElementPropertiesPage
 *            FormulaTaskPropertiesPage
 *            ProcessSchemaPropertiesPage
 *            ProcessBaseEventPropertiesPage
 *            IntermediateCatchTimerPropertiesPage
 *            ApprovalUserTaskPropertiesPage
 *            RootUserTaskPropertiesPage
 *                ChangeAdminRightsUserTaskPropertiesPage
 *                LinkEntityToProcessUserTaskPropertiesPage
 *                PreconfiguredPageUserTaskPropertiesPage
 *                BaseDataModificationUserTaskPropertiesPage
 *                AutoGeneratedPageUserTaskPropertiesPage
 *                BaseUserTaskPropertiesPage
 *                SubProcessPropertiesPage
 *                SendEmailUserTaskPropertiesPage
 */
define("BaseProcessSchemaElementPropertiesPage", ["terrasoft", "BaseProcessSchemaElementPropertiesPageResources",
	"ProcessSchemaParameterViewConfig", "ConfigurationItemGenerator", "LookupUtilitiesV2", "MappingEditMixin",
	"EntitySchemaDesignerUtilities", "PackageAwareEntitySchemaDesignerUtilities"],
		function(Terrasoft, resources) {
	return {
		mixins: {
			editable: "Terrasoft.ProcessSchemaElementEditable",
			observableItem: "Terrasoft.ObservableItem"
		},
		attributes: {
			"uId": {
				dataValueType: Terrasoft.DataValueType.GUID,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Name.
			 */
			"name": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Caption.
			 */
			"caption": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Description.
			 */
			"description": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				caption: resources.localizableStrings.DescriptionCaption
			},

			/**
			 * Process element.
			 */
			"ProcessElement": {
				dataValueType: Terrasoft.DataValueType.CUSTOM_OBJECT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Active tab name.
			 */
			"ActiveTabName": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Information text.
			 */
			"ProcessInformationText": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Flag that indicates extended card display mode.
			 */
			"IsExtendedMode": {
				dataValueType: Terrasoft.DataValueType.BOOLEAN,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				value: false
			},

			/**
			 * Collection drop-down list the function button.
			 */
			"ToolsButtonMenu": {
				dataValueType: Terrasoft.DataValueType.COLLECTION
			},

			/**
			 * Title element type.
			 */
			"TypeCaption": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Fill color header page element properties.
			 */
			"Color": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Tabs list.
			 */
			"TabsCollection": {
				dataValueType: Terrasoft.DataValueType.COLLECTION,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Marker value for properties container.
			 */
			"PropertiesContainerMarkerValue": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Flags that indicates visibility of ToolsButton.
			 */
			"ToolsButtonVisible": {
				dataValueType: Terrasoft.DataValueType.BOOLEAN,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				value: false
			},

			/**
			 * Page mode tools button menu item caption.
			 */
			"PageModeCaption": {
				dataValueType: Terrasoft.DataValueType.TEXT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				value: resources.localizableStrings.ExtendedModeCaption
			},

			/**
			 * The unique identifier of the package.
			 */
			"packageUId": {
				dataValueType: Terrasoft.DataValueType.GUID,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Process schema.
			 */
			"ProcessSchema": {
				dataValueType: Terrasoft.DataValueType.CUSTOM_OBJECT,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			},

			/**
			 * Allow create compile process.
			 */
			"AllowCompileMode": {
				dataValueType: Terrasoft.DataValueType.BOOLEAN,
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN
			}
		},
		properties: {
			forcePackageAwareEntitySchemaDesignerUtilities: false
		},
		methods: {

			/**
			 * Returns package unique identifier.
			 * @protected
			 */
			getPackageUId: function() {
				return this.get("packageUId");
			},

			/**
			 * Creates an EntitySchemaDesignerUtilities class.
			 * @protected
			 * @return EntitySchemaDesignerUtilities class.
			 */
			getEntitySchemaDesignerUtilities: function() {
				if (Terrasoft.Features.getIsEnabled("AutoAddPackageDependenciesInProcesses")
						&& !Boolean(this.forcePackageAwareEntitySchemaDesignerUtilities)) {
					return Terrasoft.EntitySchemaDesignerUtilities.create();
				}
				const packageUId = this.getPackageUId();
				return Terrasoft.PackageAwareEntitySchemaDesignerUtilities.create(packageUId);
			},

			/**
			 * @inheritdoc MappingEditMixin#getInvokerUId
			 * @overridden
			 */
			getInvokerUId: function() {
				return this.get("uId");
			},

			/**
			 * @inheritdoc BaseSchemaViewModel#init
			 * @overridden
			 */
			init: function(callback, scope) {
				this.callParent([function() {
					this.mixins.editable.init.call(this, function() {
						this.onPageInitialized(callback, scope);
					}, this);
				}.bind(this), scope || this]);
			},

			/**
			 * @inheritdoc Terrasoft.BaseSchemaViewModel#setValidationConfig
			 * @overridden
			 */
			setValidationConfig: function() {
				this.callParent(arguments);
				this.addColumnValidator("name", this.nameValidator);
				this.addColumnValidator("name", this.duplicateNameValidator);
				this.addColumnValidator("*", this.customValidator);
				Terrasoft.each(this.columns, function(column) {
					if (column && column.dataValueType === Terrasoft.DataValueType.MAPPING) {
						this.addColumnValidator(column.name,
							Terrasoft.ProcessSchemaDesignerUtilities.mappingValidator);
					}
				}, this);
			},

			/**
			 * Custom view model validator.
			 * @protected
			 * @virtual
			 * @return {Object} Validation info
			 * @return {Object} return.invalidMessage Validation message.
			 */
			customValidator: function() {
				return {
					invalidMessage: ""
				};
			},

			/**
			 * Executes code validation info.
			 * @private
			 * @param {String} code Element name.
			 * @return {Object} Validation info.
			 */
			nameValidator: function(code) {
				var message = "";
				var reqExp = /^[a-zA-Z]{1}[a-zA-Z0-9_]*$/;
				if (!reqExp.test(code)) {
					message = this.get("Resources.Strings.WrongNameMessage");
				}
				return {invalidMessage: message};
			},

			/**
			 * Executes duplicate name validation info.
			 * @private
			 * @param {String} name Parameter name.
			 * @return {Object} Validation info.
			 */
			duplicateNameValidator: function(name) {
				let message = "";
				const processElement = this.get("ProcessElement");
				const schema = processElement.parentSchema;
				const element = schema.flowElements.findByFn(function(item) {
					return item.getName() === name && item.uId != this.get("uId");
				}, this);
				if (element) {
						message = this.get("Resources.Strings.DuplicateNameMessage");
				} else {
					const parameter = schema.parameters.findByFn(function(element) {
						return element.getName() === name;
					}, this);
					if (parameter) {
						message = this.get("Resources.Strings.DuplicateParameterNameMessage");
					}
				}
				return {invalidMessage: message};
			},

			/**
			 * Initializes the drop-down list the function button.
			 * @private
			 */
			initToolsButtonMenu: function() {
				var extendedModeMenuItem = this.getExtendedModeMenuItem();
				if (!extendedModeMenuItem) {
					return;
				}
				var toolsButtonMenu = this.get("ToolsButtonMenu");
				if (!toolsButtonMenu) {
					toolsButtonMenu = Ext.create("Terrasoft.BaseViewModelCollection");
					this.set("ToolsButtonMenu", toolsButtonMenu);
				}
				toolsButtonMenu.addItem(extendedModeMenuItem);
				this.set("ToolsButtonVisible", true);
			},

			/**
			 * Generates a model for the element drop-down menu.
			 * @param {Object} config Menu item config.
			 * @return {Terrasoft.BaseViewModel} Menu item viewModel.
			 */
			getButtonMenuItem: function(config) {
				return Ext.create("Terrasoft.BaseViewModel", {
					values: Ext.apply({}, config, {
						Id: Terrasoft.generateGUID(),
						Tag: config.tag,
						Caption: config.caption,
						Click: config.click,
						MarkerValue: config.caption,
						ImageConfig: config.imageConfig,
						Items: config.items
					})
				});
			},

			/**
			 * Returns the item drop-down menu the function key
			 * that is responsible for switching to advanced mode.
			 * @protected
			 * @virtual
			 * @return {Terrasoft.BaseViewModel} Item drop-down list the function button.
			 */
			getExtendedModeMenuItem: function() {
				return this.getButtonMenuItem({
					Caption: {"bindTo": "PageModeCaption"},
					Click: {"bindTo": "onPageModeClick"}
				});
			},

			/**
			 * The event handler clicking on the Advanced mode menu.
			 * @private
			 */
			onPageModeClick: function() {
				this.saveValues();
				var isExtendedMode = !this.get("IsExtendedMode");
				this.set("IsExtendedMode", isExtendedMode);
				var strings = resources.localizableStrings;
				var pageModeCaption = isExtendedMode
					? strings.PrimaryModeCaption
					: strings.ExtendedModeCaption;
				this.set("PageModeCaption", pageModeCaption);
			},

			/**
			 * Called after the initialization scheme.
			 * @protected
			 * @param {Function} callback Callback function.
			 * @param {Object} scope Execution context.
			 */
			onPageInitialized: function(callback, scope) {
				callback.call(scope || this);
			},

			/**
			 * @inheritdoc Terrasoft.ObservableItem#getAttributeMap
			 * @override
			 */
			getAttributeMap: function() {
				return {
					caption: "caption",
				};
			},

			/**
			 * @inheritdoc ProcessSchemaElementEditable#onElementDataLoad
			 * @overridden
			 */
			onElementDataLoad: function(element, callback, scope) {
				var name = element.getName();
				var caption = element.caption.getValue();
				var description = element.description.getValue();
				var propertiesContainerMarkerValue = this.getPropertiesContainerMarkerValue(element);
				this.set("ProcessElement", element);
				this.set("packageUId", element.getPackageUId());
				this.set("uId", element.uId);
				this.set("name", name);
				this.set("caption", caption);
				this.set("description", description);
				this.set("TypeCaption", element.typeCaption);
				this.set("PropertiesContainerMarkerValue", propertiesContainerMarkerValue);
				this.set("Color", element.color);
				this.set("ProcessInformationText", this.get("Resources.Strings.ProcessInformationText"));
				this.subscribeOnItemChanged(element);
				this.initIsExtendedMode(element.editPageSchemaName);
				this.loadTabs();
				this.subscribeOnElementCaptionChanged();
				this.initDefaultTab();
				var isEditPageDefault = this.getIsEditPageDefault(element.editPageSchemaName);
				if (!isEditPageDefault) {
					this.initToolsButtonMenu();
				}
				callback.call(scope);
			},

			/**
			 * Returns default tab name.
			 * @protected
			 */
			getDefaultTabName: function() {
				var defaultTabName = this.get("DefaultTabName");
				if (!defaultTabName) {
					defaultTabName = "SettingsTab";
				}
				return defaultTabName;
			},

			/**
			 * Sets the default tab.
			 * @protected
			 */
			initDefaultTab: function() {
				var tabsCollection = this.get("TabsCollection");
				if (tabsCollection.isEmpty()) {
					return;
				}
				var defaultTabName = this.getDefaultTabName();
				if (!Ext.isEmpty(defaultTabName)) {
					this.setActiveTab(defaultTabName);
				}
			},

			/**
			 * @inheritdoc ProcessSchemaElementEditable#onElementDataLoad
			 * @overridden
			 */
			validateAfterDataLoaded: function() {
				var element = this.get("ProcessElement");
				if (element.isValidateExecuted === true) {
					this.validationInfo.set("customValidationResults", []);
					this.validateAllColumns();
				}
			},

			/**
			 * Returns true if validators sucessfully executes. Do not stops on first fail.
			 * @private
			 * @return {Boolean} Returns true if validators sucessfully executes.
			 */
			validateAllColumns: function() {
				var result = true;
				if (this.validationConfig) {
					Terrasoft.each(this.columns, function(column, columnName) {
						result = this.validateColumn(columnName) && result;
					}, this);
					result = result && this.validateColumn("*");
				}
				return result;
			},

			/**
			 * Subscribes on element caption change event.
			 * @private
			 */
			subscribeOnElementCaptionChanged: function() {
				this.on("change:caption", this.onElementCaptionChanged, this);
			},

			/**
			 * Handles when element caption changed, applies caption to diagram.
			 * @private
			 * @param {Terrasoft.BaseViewModel} model Page view model.
			 * @param {String} caption Element caption.
			 */
			onElementCaptionChanged: function(model, caption) {
				var element = this.get("ProcessElement");
				element.setLocalizableStringPropertyValue("caption", caption);
			},

			/**
			 * Generates properties container marker value by element name and type info.
			 * @protected
			 * @virtual
			 * @param {Terrasoft.ProcessBaseElementSchema} element Process element.
			 */
			getPropertiesContainerMarkerValue: function(element) {
				var name = element.getName();
				var typeInfo = element.getTypeInfo();
				return name + " " + typeInfo.typeName;
			},

			/**
			 * Returns flag that indicates if edit page is default.
			 * @protected
			 * @param {String} editPageSchemaName Edit page schema name.
			 * @return {Boolean} Returns flag that indicates if edit page is default.
			 */
			getIsEditPageDefault: function(editPageSchemaName) {
				return editPageSchemaName === Terrasoft.process.constants.DEFAULT_EDIT_PAGE_SCHEMA_NAME;
			},

			/**
			 * Initializes the value IsExtendedMode attribute to display the extanded card mode.
			 * @protected
			 * @param {String} editPageSchemaName Edit page name.
			 */
			initIsExtendedMode: function(editPageSchemaName) {
				var isEditPageDefault = this.getIsEditPageDefault(editPageSchemaName);
				this.set("IsExtendedMode", isEditPageDefault);
			},

			/**
			 * Sorts collection by columnName column.
			 * @private
			 * @param {Terrasoft.BaseViewModelCollection} sortableCollection Collection for sorting.
			 * @param {String} keyColumn Name of collection key column.
			 * @param {String} sortColumn Name of column to sort by.
			 */
			sortCollectionByColumn: function(sortableCollection, keyColumn, sortColumn) {
				sortableCollection.sortByFn(function(item1, item2) {
					var item1Caption = item1.get(sortColumn);
					var item2Caption = item2.get(sortColumn);
					return item1Caption.localeCompare(item2Caption);
				});
			},

			/**
			 * Returns container view config.
			 * @param {String} id Container ID.
			 * @param {Array} wrapClassName Wrap class name.
			 * @param {Array} items Child items.
			 * @param {Object} [visible] Flag that indicates container visibility.
			 * @return {Object} Container config.
			 */
			getContainerConfig: function(id, wrapClassName, items, visible) {
				return Terrasoft.ProcessSchemaParameterViewConfig.getContainerConfig(id, wrapClassName, items, visible);
			},

			/**
			 * @inheritdoc Terrasoft.ProcessSchemaElementEditable#onSaveElementProperties
			 * Validate item after saving properties.
			 * @overridden
			 */
			onSaveElementProperties: function() {
				this.validationInfo.set("customValidationResults", []);
				this.saveValues();
				this.validate();
				this.saveValidationResults();
			},

			/**
			 * Returns element's schema properties page validation result object.
			 * @protected
			 * @param {Object} validationResult Page validation result.
			 * @returns {Object} Validation result model.
			 */
			getValidationResultModel: function(validationResult) {
				var validationType = validationResult.validationType || Terrasoft.ValidationType.ERROR;
				return {
					validationType: validationType,
					message: validationResult.invalidMessage
				};
			},

			/**
			 * Adds properties page validation result to process schema element validationResults property.
			 * @param {Object} validationResult Page validation result.
			 * @param {Boolean} validationResult.isValid Validation result.
			 * @param {String} validationResult.invalidMessage Validation message.
			 * @param {Terrasoft.ValidationType} [validationResult.validationType] Validation type.
			 * @private
			 */
			saveValidatioResult: function(validationResult) {
				var processElement = this.get("ProcessElement");
				if (!validationResult.isValid) {
					var result = this.getValidationResultModel(validationResult);
					processElement.validationResults.push(result);
				}
			},

			/**
			 * Iterated on column validation results and saves not valid ones.
			 * @protected
			 * @param {Terrasoft.BaseModel} validationInfo Validation result model.
			 */
			applyColumnValidation: function(validationInfo) {
				Terrasoft.each(this.columns, function(column, columnName) {
					var columnValidationResult = validationInfo.get(columnName);
					if (columnValidationResult && !columnValidationResult.isValid) {
						this.saveValidatioResult(columnValidationResult);
					}
				}, this);
			},

			/**
			 * Iterated on custom validation results and saves not valid ones.
			 * @protected
			 * @param {Terrasoft.BaseModel} validationInfo Validation result model.
			 */
			applyCustomValidation: function(validationInfo) {
				var customValidationResults = validationInfo.get("customValidationResults");
				Terrasoft.each(customValidationResults, this.saveValidatioResult, this);
			},

			/**
			 * Sets values for properties that are
			 * @protected
			 * @param {Boolean} isElementValid Element validation result.
			 */
			setValidationState: function(isElementValid) {
				var processElement = this.$ProcessElement;
				processElement.setPropertyValue("isValidateExecuted", true, {
					silent: (processElement instanceof Terrasoft.BaseProcessSchema)
				});
				processElement.setPropertyValue("isValid", isElementValid);
			},

			/**
			 * Saves properties page validation results to process schema element.
			 * @private
			 */
			saveValidationResults: function() {
				var processElement = this.$ProcessElement;
				processElement.validationResults = processElement.internalValidate();
				this.applyColumnValidation(this.validationInfo);
				this.applyCustomValidation(this.validationInfo);
				var isElementValid = this.isElementValid(processElement.validationResults);
				this.setValidationState(isElementValid);
			},

			/**
			 * Returns is item valid.
			 * @param {Object[]} validationResults Item validation results.
			 * @protected
			 * @virtual
			 * @return {Boolean} True if item is valid, else false.
			 */
			isElementValid: function(validationResults) {
				return Ext.isEmpty(validationResults);
			},

			/**
			 * Adds item custom validation result to properties page validation info object.
			 * @param {Object} validationInfo Item validation info.
			 * @param {Boolean} validationInfo.isValid Validation result.
			 * @param {String} validationInfo.invalidMessage Validation message.
			 * @param {Terrasoft.ValidationType} [validationInfo.validationType] Validation type.
			 * @protected
			 */
			addCustomValidationResult: function(validationInfo) {
				var customValidationResults = this.validationInfo.get("customValidationResults");
				customValidationResults.push(validationInfo);
			},

			/**
			 * Saves settings.
			 * @protected
			 * @virtual
			 */
			saveValues: function() {
				var element = this.get("ProcessElement");
				element.setLocalizableStringPropertyValue("caption", this.get("caption"));
				element.setLocalizableStringPropertyValue("description", this.get("description"));
				element.setName(this.get("name"));
			},

			/**
			 * @inheritdoc Terrasoft.BaseObject#onDestroy
			 * @overridden
			 */
			onDestroy: function() {
				this.mixins.editable.onDestroy.call(this);
				this.mixins.observableItem.unsubscribeAllItems();
				this.un("change:caption", this.onElementCaptionChanged, this);
				this.callParent(arguments);
			},

			/**
			 * Opens lookup page.
			 * @protected
			 * @param {Object} args Arguments.
			 * @param {Object} tag Tag.
			 */
			loadVocabulary: function(args, tag) {
				var config = this.getLookupPageConfig(args, tag);
				this.openLookup(config, this.onLookupResult, this);
			},

			/**
			 * Returns the settings page from the handbook of choice.
			 * @protected
			 * @param {Object} args Arguments.
			 * @param {String} columnName Column name.
			 * @return {Object} Settings to choose from lookup page.
			 */
			getLookupPageConfig: function(args, columnName) {
				return {
					entitySchemaName: this.getLookupEntitySchemaName(columnName),
					multiSelect: false,
					columnName: columnName,
					columnValue: this.get(columnName),
					searchValue: args.searchValue,
					filters: this.getLookupQueryFilters(columnName)
				};
			},

			/**
			 * Returns the name of the scheme object reference field.
			 * @protected
			 * @param {String} columnName Column name.
			 * @return {String} Entity name.
			 */
			getLookupEntitySchemaName: function(columnName) {
				var column = this.getColumnByName(columnName);
				return column.referenceSchemaName;
			},

			/**
			 * Generates filters that are applied to the lookup field.
			 * @private
			 * @return {Terrasoft.FilterGroup} Filter group.
			 */
			getLookupQueryFilters: function() {
				return Ext.create("Terrasoft.FilterGroup");
			},

			/**
			 * Event handler for lookup selection result.
			 * @protected
			 * @param {Object} args Selection result.
			 * @param {Terrasoft.Collection} args.selectedRows A collection of selected records.
			 * @param {String} args.columnName Column name, for which selection was carried out.
			 */
			onLookupResult: function(args) {
				var columnName = args.columnName;
				var selectedRows = args.selectedRows;
				if (!selectedRows.isEmpty()) {
					var firstRow = selectedRows.getByIndex(0);
					this.set(columnName, firstRow);
				}
			},

			/**
			 * Returns the profile key.
			 * @protected
			 * @return {String} Key.
			 */
			getProfileKey: function() {
				return "ProcessElementProperties";
			},

			/**
			 * The event handler clicking on the close button.
			 * @protected
			 */
			onHidePropertyPage: function() {
				this.sandbox.publish("HidePropertyPage");
			},

			/**
			 * Returns the configuration cards upper left icon.
			 * @protected
			 * @return {Object} Image config.
			 */
			getImageConfig: function() {
				var processElement = this.get("ProcessElement");
				if (!processElement) {
					return null;
				}
				var titleImage = processElement.getTitleImage();
				var imageUrl = Terrasoft.ImageUrlBuilder.getUrl(titleImage);
				return {
					source: Terrasoft.ImageSources.URL,
					url: imageUrl
				};
			},

			/**
			 * Returns ESQ for displayed lookup values.
			 * @param {String} schemaName Schema name.
			 * @param {GUID} Id element identifier.
			 * @return {Terrasoft.EntitySchemaQuery} Terrasoft.EntitySchemaQuery
			 */
			getLookupDisplayValueQuery: function(schemaName, Id) {
				var esq = Ext.create("Terrasoft.EntitySchemaQuery", {
					rootSchemaName: schemaName
				});
				esq.addMacrosColumn(Terrasoft.QueryMacrosType.PRIMARY_DISPLAY_COLUMN, "displayValue");
				esq.enablePrimaryColumnFilter(Id);
				return esq;
			},

			/**
			 * Preparation lookup display values.
			 * @protected
			 * @param {String} schemaName Schema name.
			 * @param {GUID} elementId Element ID.
			 * @param {Function} callback Callback function.
			 */
			loadLookupDisplayValue: function(schemaName, elementId, callback) {
				var esq = this.getLookupDisplayValueQuery(schemaName, elementId);
				esq.rowCount = 1;
				esq.getEntityCollection(function(result) {
					var entity = result.collection.first();
					if (entity) {
						callback.call(this, entity.values);
					}
				}, this);
			},

			/**
			 * @inheritdoc BaseProcessSchemaElementPropertiesPage#getTabs
			 * @overridden
			 */
			getTabs: function() {
				return [
					{
						Name: "SettingsTab",
						Caption: resources.localizableStrings.SettingsTabCaption,
						MarkerValue: "SettingsTab"
					}
				];
			},

			/**
			 * Returns an array of descriptions of the columns receive data tabs to download collection.
			 * @protected
			 */
			getTabsColumns: function() {
				return [
					{
						dataValueType: Terrasoft.DataValueType.TEXT,
						name: "Name",
						columnPath: "Name"
					}, {
						dataValueType: Terrasoft.DataValueType.TEXT,
						name: "Caption",
						columnPath: "Caption"
					}
				];
			},

			/**
			 * Load tabs.
			 * @protected
			 */
			loadTabs: function() {
				var tabs = this.getTabs();
				if (!tabs || tabs.length <= 0) {
					return;
				}
				var columns = this.getTabsColumns();
				var collection = new Terrasoft.BaseViewModelCollection({
					entitySchema: new Terrasoft.BaseEntitySchema({
						columns: columns,
						primaryColumnName: "Name"
					})
				});
				collection.loadFromColumnValues(tabs);
				var tabsCollection = this.get("TabsCollection");
				tabsCollection.loadAll(collection);
			},

			/**
			 * Sets active tab.
			 * @protected
			 * @virtual
			 * @param {String} tabName Tab name.
			 */
			setActiveTab: function(tabName) {
				this.set("DefaultTabName", tabName);
				this.set("ActiveTabName", tabName);
				this.set(tabName, true);
			},

			/**
			 * Processes tab change event.
			 * @protected
			 * @param {Terrasoft.model.BaseViewModel} activeTab Selected tab.
			 */
			onActiveTabChange: function(activeTab) {
				var activeTabName = activeTab.get("Name");
				var tabsCollection = this.get("TabsCollection");
				tabsCollection.eachKey(function(tabName, tab) {
					var tabContainerVisibleBinding = tab.get("Name");
					this.set(tabContainerVisibleBinding, false);
				}, this);
				this.set(activeTabName, true);
				var processInformationText = activeTab.get("ProcessInformationText");
				this.set("ProcessInformationText", processInformationText);
			},

			/**
			 * Returns hint of element.
			 * @private
			 * @return {String} Returns hint of element.
			 */
			getHintText: function() {
				var element = this.get("ProcessElement");
				if (element && element.hint) {
					return element.hint;
				}
				return this.get("Resources.Strings.ProcessInformationText");
			},

			/**
			 * Is 'NoCompilationFeature' feature enable.
			 * @param value Value to convert.
			 * @param defaultValue Value returned when feature is disabled.
			 * @return {Boolean}
			 */
			isNoCompilationFeatureEnableConverter: function(value, defaultValue) {
				if (Terrasoft.Features.getIsEnabled("NoCompilationFeature")) {
					return value;
				}
				return Ext.isDefined(defaultValue) ? Boolean(defaultValue) : true;
			}

		},
		diff: /**SCHEMA_DIFF*/[
			{
				"operation": "insert",
				"name": "PropertiesContainer",
				"values": {
					"id": "PropertiesContainer",
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"backgroundColor": {
						"bindTo": "Color"
					},
					"wrapClass": ["properties-container"],
					"markerValue": {
						"bindTo": "PropertiesContainerMarkerValue"
					},
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "PropertiesContainer",
				"propertyName": "items",
				"name": "HeaderContainer",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"wrapClass": ["header-container"],
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "HeaderContainer",
				"propertyName": "items",
				"name": "TopContainer",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"wrapClass": ["top-container-wrapClass"],
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "TopContainer",
				"propertyName": "items",
				"name": "ElementTypeLabel",
				"values": {
					"itemType": Terrasoft.ViewItemType.LABEL,
					"caption": {
						"bindTo": "TypeCaption"
					},
					"classes": {
						"labelClass": ["t-label"]
					}
				}
			},
			{
				"operation": "insert",
				"parentName": "TopContainer",
				"propertyName": "items",
				"name": "ToolsContainer",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"wrapClass": ["tools-container-wrapClass"],
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "ToolsContainer",
				"propertyName": "items",
				"name": "ToolsButton",
				"values": {
					"itemType": Terrasoft.ViewItemType.BUTTON,
					"classes": {
						"imageClass": ["button-background-no-repeat"],
						"wrapperClass": ["detail-tools-button-wrapper"],
						"menuClass": ["detail-tools-button-menu"]
					},
					"imageConfig": {
						"bindTo": "Resources.Images.ToolsButtonImage"
					},
					"style": Terrasoft.controls.ButtonEnums.style.TRANSPARENT,
					"menu": {
						"items": {
							"bindTo": "ToolsButtonMenu"
						}
					},
					"visible": {
						"bindTo": "ToolsButtonVisible"
					}
				}
			},
			{
				"operation": "insert",
				"parentName": "ToolsContainer",
				"propertyName": "items",
				"name": "InfoButton",
				"values": {
					"itemType": Terrasoft.ViewItemType.INFORMATION_BUTTON,
					"controlConfig": {
						"imageConfig": {
							"bindTo": "Resources.Images.InfoButtonImage"
						}
					},
					"content": {
						"bindTo": "getHintText"
					},
					"behaviour": {
						"displayEvent": Terrasoft.controls.TipEnums.displayEvent.CLICK
					}
				}
			},
			{
				"operation": "insert",
				"parentName": "ToolsContainer",
				"propertyName": "items",
				"name": "ClosePropertyButton",
				"values": {
					"itemType": Terrasoft.ViewItemType.BUTTON,
					"classes": {
						"imageClass": ["button-background-no-repeat"],
						"wrapperClass": ["close-button-wrapClass"]
					},
					"click": {
						"bindTo": "onHidePropertyPage"
					},
					"imageConfig": {
						"bindTo": "Resources.Images.CloseButtonImage"
					},
					"style": Terrasoft.controls.ButtonEnums.style.TRANSPARENT
				}
			},
			{
				"operation": "insert",
				"parentName": "HeaderContainer",
				"propertyName": "items",
				"name": "TitleContainer",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"wrapClass": ["title-container"],
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "TitleContainer",
				"propertyName": "items",
				"name": "TitleButton",
				"values": {
					"itemType": Terrasoft.ViewItemType.BUTTON,
					"style": Terrasoft.controls.ButtonEnums.style.TRANSPARENT,
					"imageConfig": {
						"bindTo": "getImageConfig"
					},
					"classes": {
						"wrapperClass": ["title-button"],
						"imageClass": ["title-button-image"]
					},
					"enabled": false
				}
			},
			{
				"operation": "insert",
				"parentName": "TitleContainer",
				"propertyName": "items",
				"name": "caption",
				"values": {
					"labelConfig": {
						"visible": false
					},
					"classes": {
						"labelClass": ["t-label-proc"]
					},
					"controlConfig": {"tag": "caption"}
				}
			},
			{
				"operation": "insert",
				"parentName": "PropertiesContainer",
				"propertyName": "items",
				"name": "EditorsContainer",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"items": [],
					"classes": {
						"wrapClassName": ["tabs", "editors-ct"]
					},
					"visible": {
						"bindTo": "IsExtendedMode",
						"bindConfig": {
							"converter": "invertBooleanValue"
						}
					}
				}
			},
			{
				"operation": "insert",
				"parentName": "PropertiesContainer",
				"propertyName": "items",
				"name": "TabsContainer",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"classes": {
						"wrapClassName": ["tabs-container"]
					},
					"visible": {
						"bindTo": "IsExtendedMode"
					},
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "TabsContainer",
				"propertyName": "items",
				"name": "Tabs",
				"values": {
					"itemType": Terrasoft.ViewItemType.TAB_PANEL,
					"collection": {
						"bindTo": "TabsCollection"
					},
					"activeTabChange": {
						"bindTo": "onActiveTabChange"
					},
					"activeTabName": {
						"bindTo": "ActiveTabName"
					},
					"isScrollVisible": false,
					"tabs": []
				}
			},
			{
				"operation": "insert",
				"parentName": "Tabs",
				"propertyName": "tabs",
				"name": "SettingsTab",
				"values": {
					"wrapClass": ["tabs", "editors-ct"],
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "SettingsTab",
				"propertyName": "items",
				"name": "ControlGroup",
				"values": {
					"itemType": Terrasoft.ViewItemType.GRID_LAYOUT,
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "ControlGroup",
				"propertyName": "items",
				"name": "name",
				"values": {
					"caption": {
						"bindTo": "Resources.Strings.NameCaption"
					},
					"layout": {
						"column": 0,
						"row": 0,
						"colSpan": 24,
						"rowSpan": 1
					},
					"isRequired": true,
					"wrapClass": ["top-caption-control"]
				}
			}
		]/**SCHEMA_DIFF*/
	};
});
