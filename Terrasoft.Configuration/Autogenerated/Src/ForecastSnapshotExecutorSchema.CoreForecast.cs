namespace Terrasoft.Configuration
{

	using System;
	using System.Collections.Generic;
	using System.Collections.ObjectModel;
	using System.Globalization;
	using Terrasoft.Common;
	using Terrasoft.Core;
	using Terrasoft.Core.Configuration;

	#region Class: ForecastSnapshotExecutorSchema

	/// <exclude/>
	public class ForecastSnapshotExecutorSchema : Terrasoft.Core.SourceCodeSchema
	{

		#region Constructors: Public

		public ForecastSnapshotExecutorSchema(SourceCodeSchemaManager sourceCodeSchemaManager)
			: base(sourceCodeSchemaManager) {
		}

		public ForecastSnapshotExecutorSchema(ForecastSnapshotExecutorSchema source)
			: base( source) {
		}

		#endregion

		#region Methods: Protected

		protected override void InitializeProperties() {
			base.InitializeProperties();
			UId = new Guid("116770b7-d605-0dde-2869-eb7e844280ad");
			Name = "ForecastSnapshotExecutor";
			ParentSchemaUId = new Guid("50e3acc0-26fc-4237-a095-849a1d534bd3");
			CreatedInPackageId = new Guid("e0b9d996-6f7e-4520-a678-da960c79be39");
			ZipBody = new byte[] { 31,139,8,0,0,0,0,0,0,3,133,84,193,138,219,48,16,61,59,176,255,48,120,123,176,33,216,208,99,226,100,41,105,179,164,116,161,176,187,189,148,178,40,246,196,241,98,75,65,146,211,134,144,127,239,200,178,157,68,196,172,15,70,26,189,55,126,154,121,99,224,172,66,181,99,41,194,11,74,201,148,216,232,104,33,248,166,200,107,201,116,33,120,180,20,18,83,166,244,175,207,119,163,227,221,200,171,85,193,115,200,75,177,102,229,100,178,16,85,69,160,31,34,207,41,60,237,207,159,15,74,99,229,238,41,117,89,98,106,242,170,232,17,57,202,34,61,99,46,21,72,28,138,71,75,150,106,33,11,84,132,32,204,189,196,156,242,193,162,100,74,77,160,147,251,204,217,78,109,133,254,246,15,211,154,240,13,54,142,99,72,84,93,85,76,30,230,237,222,2,80,193,166,101,130,106,169,218,124,252,93,172,163,142,25,59,212,68,33,178,82,9,72,37,110,102,190,163,115,245,93,172,187,175,251,16,27,210,174,94,151,69,10,169,145,58,168,20,38,112,73,37,154,41,123,127,207,101,129,101,70,23,253,41,139,61,211,216,220,203,219,217,13,40,77,77,75,65,34,203,4,47,15,176,162,198,192,91,73,175,25,208,242,137,113,150,163,164,210,107,211,49,148,201,144,136,121,16,78,47,19,175,92,96,155,10,222,54,183,15,108,115,188,123,228,153,21,222,9,21,154,12,128,25,188,42,148,228,52,110,237,224,110,143,144,163,158,130,50,175,147,75,29,20,51,20,111,10,232,81,198,118,229,73,212,181,228,131,226,225,225,193,226,188,96,16,50,179,142,179,110,60,152,146,38,67,186,230,1,199,191,64,183,83,90,214,6,254,69,230,117,133,92,7,126,125,117,109,127,236,212,33,12,109,27,188,147,121,183,133,232,156,240,132,122,43,26,43,52,182,178,135,174,197,175,61,78,110,6,177,195,118,180,123,124,236,18,146,29,147,172,2,243,119,152,185,26,231,47,91,4,19,131,180,15,70,73,220,48,110,39,104,214,168,81,42,75,62,239,175,120,237,116,236,69,145,117,138,3,199,22,215,82,198,176,250,90,52,43,210,158,80,113,105,96,199,32,214,239,116,60,191,248,74,216,182,125,207,100,63,229,171,140,58,24,60,214,69,22,158,129,191,253,101,127,236,255,177,149,119,20,204,28,13,22,100,70,44,90,241,141,8,62,245,41,250,255,136,153,74,73,190,141,224,156,125,114,60,11,57,249,109,147,7,236,19,61,179,61,118,177,224,204,27,131,177,213,178,40,117,35,136,254,217,65,24,222,141,166,31,234,161,153,252,88,205,233,230,0,219,232,117,176,137,209,243,31,227,90,119,106,77,6,0,0 };
		}

		#endregion

		#region Methods: Public

		public override void GetParentRealUIds(Collection<Guid> realUIds) {
			base.GetParentRealUIds(realUIds);
			realUIds.Add(new Guid("116770b7-d605-0dde-2869-eb7e844280ad"));
		}

		#endregion

	}

	#endregion

}

