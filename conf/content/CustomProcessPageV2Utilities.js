Terrasoft.configuration.Structures["CustomProcessPageV2Utilities"] = {innerHierarchyStack: ["CustomProcessPageV2Utilities"]};
define("CustomProcessPageV2Utilities", [
		"ext-base", "terrasoft", "ProcessHelper", "MaskHelper", "ProcessModuleUtilities"
	], function(Ext, Terrasoft, ProcessHelper, MaskHelper) {

	/**
	 * Base class for autogenerated and pre-configured pages.
	 */
	Ext.define("Terrasoft.configuration.mixins.CustomProcessPageV2Utilities", {
		extend: "Terrasoft.BaseObject",
		alternateClassName: "Terrasoft.CustomProcessPageV2Utilities",

		/**
		 * Data of the process element
		 * structure: {
			 *  procElUId = {Guid},
			 *  name = {string},
			 *  processId = {Guid},
			 *  isProcessExecutedBySignal = {bool},
			 *  processName = {Guid},
			 *  recommendation = {string},
			 *  nextProcElUId = {string},
			 *  urlToken = {string},
			 *  recordId = {Guid},
			 *  entitySchemaName = {String},
			 *  parameters = {Object}
			 *	}
		 **/

		/**
		 * Contains process parameters.
		 * @protected
		 */
		processParameters: null,

		/**
		 * Determines whether to get next process step via web response.
		 * @private
		 */
		_canGetNextStepsViaResponse: function() {
			return Terrasoft.Features.getIsEnabled("GetProcessStepsViaResponse");
		},

		/**
		 * Cancels the element.
		 * @protected
		 * @param {String} code Code of the pressed button.
		 */
		acceptProcessElement: function(code) {
			this.saveProcessParameters();
			this.completeExecution(code);
		},

		/**
		 * Shows process page by publishing ShowProcessPage message.
		 * @protected
		 * @param {Object} message Message body.
		 */
		showProcessPage: Terrasoft.abstractFn,

		/**
		 * Cancels the element.
		 * @protected
		 * @param {String} code Code of the pressed button.
		 */
		cancelProcessElement: function(code) {
			this.completeExecution(code);
		},

		/**
		 * Saves process parameter values.
		 * @protected
		 */
		saveProcessParameters: function() {
			const processData = this.get("ProcessData");
			const parameters = this.processParameters = [];
			if (Ext.isEmpty(processData)) {
				return;
			}
			Terrasoft.each(processData.parameters, function(parameterValue, name) {
				if (Terrasoft.ProcessModuleUtilities.isSystemParameter(name)) {
					return;
				}
				let value = Terrasoft.deepClone(this.get(name));
				value = Ext.isDate(value)
					? Terrasoft.encodeDate(value)
					: value && ProcessHelper.getServerValueByDataValueType(value, value.dataValueType);
				parameters.push({
					key: name,
					value: (!Ext.isEmpty(value) && !Ext.isEmpty(value.value)) ? value.value : value
				});
			}, this);
		},

		/**
		 * @private
		 */
		_addPressedButtonCode: function(code) {
			if (!Ext.isEmpty(code)) {
				this.processParameters.push({
					key: "PressedButtonCode",
					value: code
				});
			}
		},

		/**
		 * @private
		 */
		_getParameterValues: function() {
			const parameterValues = {};
			Terrasoft.each(this.processParameters, function(processParameter) {
				parameterValues[processParameter.key] = processParameter.value;
			});
			return parameterValues;
		},

		/**
		 * @private
		 */
		_trySetShowProcessPageInHistoryState: function() {
			const currentState = this.sandbox.publish("GetHistoryState");
			const newState = Terrasoft.deepClone(currentState.state || {});
			if (!newState.executionData) {
				let message = "Execution data are not set while completing element '{0}' of the process '{1}'.";
				const processData = this.get("ProcessData");
				if (processData) {
					message = Ext.String.format(message, processData.name, processData.processName);
				}
				this.log(message);
				return;
			}
			newState.executionData.showNextPrcEl = true;
			this.sandbox.publish("ReplaceHistoryState", {
				stateObj: newState,
				pageTitle: null,
				hash: currentState.hash.historyState,
				silent: true
			});
		},

		/**
		 * @private
		 */
		_getProcessParameterColumnNames: function() {
			const result = [];
			Terrasoft.each(this.columns, function(column, columnName) {
				if (column.isProcessUserTaskParameterAttribute){
					result.push(columnName);
				}
			}, this);
			return result;
		},

		/**
		 * Ends the element.
		 * @protected
		 * @param {String} code Code of the pressed button.
		 */
		completeExecution: function(code) {
			MaskHelper.showBodyMask({
				timeout: 0
			});
			this._trySetShowProcessPageInHistoryState();
			this.set("CanChangeHistoryState", true);
			this._addPressedButtonCode(code);
			const processElementUId = this.get("ProcessData").procElUId;
			if (this._canGetNextStepsViaResponse()) {
				const parameterValues = this._getParameterValues();
				const config = {
					processElementUId: processElementUId,
					parameterValues: parameterValues
				};
				Terrasoft.ProcessEngineUtilities.completeExecuting(config, this.onCompleteExecution, this);
				return;
			}
			this._completeExecutingOld(processElementUId);
		},

		/**
		 * @private
		 */
		_completeExecutingOld: function(processElementUId) {
			const config = this.getCompleteExecutionServiceConfig(processElementUId, this.processParameters);
			this.callService(config, this.onCompleteExecution, this);
		},

		/**
		 * Get complete execution service config
		 * @protected
		 * @return {Object} Complete execution service config
		 */
		getCompleteExecutionServiceConfig: function(processElementUId, processParameters) {
			return {
				serviceName: "ProcessEngineService",
				methodName: "CompleteExecution",
				data: {
					procElUId: processElementUId,
					parameters: processParameters
				}
			};
		},

		/**
		 * Callback that is called when CompleteExecuting request finishes.
		 * @param {Object} response CompleteExecuting response.
		 */
		onCompleteExecution: function(response) {
			const config = {
				forceReplaceHistoryState: true
			};
			if (this.showProcessPage(config)) {
				return;
			}
			const waitingUserTaskCount = this._canGetNextStepsViaResponse()
				? response.waitingUserTaskCount
				: response.CompleteExecutionResult;
			if (waitingUserTaskCount <= 0) {
				if (!Terrasoft.isAngularHost) {
					Terrasoft.Router.back();
				}
				MaskHelper.hideBodyMask();
			}
		},

		/**
		 * Event handler of process element modification.
		 * @protected
		 */
		processElementChanged: function() {
			if (Ext.isEmpty(this.get("ProcessData"))) {
				return;
			}
			ProcessHelper.processElementChanged(this.processData.procElUId, this.processData.recordId, this.sandbox,
				this.processElementChangedCallback, this);
		},

		/**
		 * The method is not implemented.
		 * @protected
		 */
		processElementChangedCallback: function() {
		},

		/**
		 * Returns flag, indicates that value of any page attribute related to process user task parameters
		 * is changed.
		 * @returns {Boolean} True, if any attribute changed, otherwise false.
		 */
		isParametersChanged: function() {
			if (Terrasoft.Features.getIsEnabled("BasePageV2UseForceUpdateInProcessMode")){
				return false;
			}
			const processParameterColumnNames = this._getProcessParameterColumnNames();
			const changedKeys = Terrasoft.keys(this.changedValues);
			return Terrasoft.intersect(processParameterColumnNames, changedKeys).length > 0;
		}

	});

	Object.defineProperty(Terrasoft.CustomProcessPageV2Utilities.prototype, "processParameters", {
		get: function() {
			return [];
		}
	});
});


