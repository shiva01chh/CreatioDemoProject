Terrasoft.configuration.Structures["ViewModelSchemaDesignerTabItem"] = {innerHierarchyStack: ["ViewModelSchemaDesignerTabItem"]};
define("ViewModelSchemaDesignerTabItem", ["ext-base", "terrasoft", "css!ViewModelSchemaDesignerTabItem"],
	function(Ext, Terrasoft) {
		/**
		 * Class for draggable tab item elements.
		 * @class Terrasoft.ViewModelSchemaDesignerTabItem
		 * @extends {@link Terrasoft.DraggableContainer}
		 */
		Ext.define("Terrasoft.ViewModelSchemaDesignerTabItem", {
			extend: "Terrasoft.DraggableContainer",

			/**
			 * @inheritdoc Terrasoft.BaseObject#constructor
			 * @overridden
			 */
			constructor: function() {
				this.callParent(arguments);
				this.addEvents(
					/**
					 * @event ondragenter
					 * Fires on drag enter.
					 * @param {String} crossedBlockId Crossed block id.
					 */
					"ondragenter",

					/**
					 * @event ondragout
					 * Fires on drag out.
					 */
					"ondragout",

					/**
					 * @event ondragdrop
					 * Fires on drop.
					 * @param {String} droppableBlockId Droppable block id.
					 */
					"ondragdrop"
				);
			},

			/**
			 * @inheritDoc Terrasoft.Draggable#dragActionsCode
			 * @overridden
			 */
			dragActionsCode: 1,

			/**
			 * @inheritDoc Terrasoft.Draggable#dragCopy
			 * @overridden
			 */
			dragCopy: false,

			/**
			 * @inheritdoc Terrasoft.Draggable#showDropOverZoneHint
			 * @override
			 */
			showDropOverZoneHint: true,

			/**
			 * @inheritDoc Terrasoft.Draggable#grabbedClassName
			 * @overridden
			 */
			grabbedClassName: "tab-item-content-draggable-item-grabbed",

			/**
			 * @inheritDoc Terrasoft.Component#markerValue
			 * @overridden
			 */
			markerValue: null,

			/**
			 * @inheritDoc Terrasoft.Bindable#getBindConfig
			 * @overridden
			 */
			getBindConfig: function() {
				var parentBindConfig = this.callParent(arguments);
				var draggableBindConfig = this.mixins.draggable.getBindConfig.apply(this, arguments);
				return Ext.apply(draggableBindConfig, parentBindConfig);
			},

			/**
			 * @inheritDoc Terrasoft.Draggable#getDraggableConfig
			 * @overridden
			 */
			getDraggableConfig: function() {
				var containerContent = this.items.get(0);
				var draggableConfig = {};
				draggableConfig[Terrasoft.DragAction.MOVE] = {
					autoGenerateDraggableElement: false,
					elementId: Ext.String.format("{0}-caption-wrap", containerContent.id),
					handlers: {
						onDragOver: "onDragEnter",
						onDragOut: "onDragOut",
						onDragDrop: "onDragDrop",
						onInvalidDrop: "onInvalidDrop"
					}
				};
				return draggableConfig;
			},

			/**
			 * DragEnter event handler.
			 * @protected
			 * @virtual
			 * @param {String} event Event.
			 * @param {Object} crossedBlocks Crossed blocks.
			 */
			onDragEnter: function(event, crossedBlocks) {
				Terrasoft.each(crossedBlocks, function(crossedBlock) {
					if (!crossedBlock.droppableInstance && crossedBlock.config && crossedBlock.config.instance) {
						this.fireEvent("ondragenter", crossedBlock.config.instance.id);
						return false;
					}
				}, this);
			},

			/**
			 * DragOut event handler.
			 * @protected
			 * @virtual
			 */
			onDragOut: function() {
				this.fireEvent("ondragout");
			},

			/**
			 * DragDrop event handler.
			 * @protected
			 * @virtual
			 */
			onDragDrop: function() {
				this.reRender();
				this.fireEvent("ondragdrop", this.id);
			},

			/**
			 * InvalidDrop event handler.
			 * @protected
			 * @virtual
			 */
			onInvalidDrop: function() {
				this.reRender();
			},

			/**
			 * @inheritDoc Terrasoft.Draggable#getDraggableElementDefaultConfig
			 * @overridden
			 */
			getDraggableElementDefaultConfig: function() {
				return {
					isTarget: true,
					instance: this,
					tag: this.tag
				};
			}
		});

		return Terrasoft.ViewModelSchemaDesignerTabItem;
	});


