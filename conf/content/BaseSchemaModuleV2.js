Terrasoft.configuration.Structures["BaseSchemaModuleV2"] = {innerHierarchyStack: ["BaseSchemaModuleV2"]};
define("BaseSchemaModuleV2", ["performancecountermanager",
	"GoogleTagManagerUtilities", "SchemaBuilderV2", "BaseModule", "MoneyEdit", "ImageView"], function(performanceManager) {

	/**
	 * ####### ##### ################# ######.
	 */
	Ext.define("Terrasoft.configuration.BaseSchemaModule", {
		extend: "Terrasoft.configuration.BaseModule",
		alternateClassName: "Terrasoft.BaseSchemaModule",

		Ext: null,
		sandbox: null,
		Terrasoft: null,

		/**
		 * ####### ####, ### ######### ##### ########### #####.
		 * @public
		 * @type {Boolean}
		 */
		isSchemaConfigInitialized: false,

		/**
		 * ####### ####, ### ### ######## ###### ############ ######### #######.
		 * @public
		 * @type {Boolean}
		 */
		useHistoryState: true,

		/**
		 * ######## ##### ############ ########
		 * @protected
		 * @type {String}
		 */
		schemaName: "",

		/**
		 * Entity schema name.
		 * @protected
		 * @type {String}
		 */
		entitySchemaName: null,

		/**
		 * ####### ########## ######
		 * @private
		 * @type {String}
		 */
		autoGeneratedContainerSuffix: "Container",

		/**
		 * ####### ####, ### ###### ############### ##########
		 * @private
		 * @type {Boolean}
		 */
		isAsync: true,

		/**
		 * ######### {Terrasoft.SchemaBuilder} ### ######### ############# # ###### ############# ## ######## #######
		 * @private
		 * @type {Terrasoft.SchemaBuilder}
		 */
		schemaBuilder: null,

		/**
		 * ####### ####, ### ### ########## ############# ###### ########## ############ #############.
		 * @protected
		 * @type {Boolean}
		 */
		generateViewContainerId: true,

		/**
		 * Checks if need to get containerId from the viewModel.
		 * @param {Terrasoft.BaseViewModel} viewModel View model.
		 * @return {Boolean} True if need to get containerId from the viewModel.
		 * @private
		 */
		_containsIdGenerator: function(viewModel) {
			return viewModel && viewModel.getSchemaViewModelContainerId !== Terrasoft.emptyFn
				&& Ext.isFunction(viewModel.getSchemaViewModelContainerId);
		},

		/**
		 * Initialize schema name.
		 * @protected
		 * @virtual
		 */
		initSchemaName: function() {
			var historyState = this.sandbox.publish("GetHistoryState");
			var hash = historyState.hash;
			var state = historyState.state;
			this.schemaName = state.cardSchemaName || hash.entityName || "";
		},

		/**
		 * Replaces the last element in the chain of states, if the module identifier differs from the current.
		 * @protected
		 * @virtual
		 */
		initHistoryState: function() {
			var sandbox = this.sandbox;
			var state = sandbox.publish("GetHistoryState");
			var currentHash = state.hash;
			var currentState = state.state || {};
			if (currentState.moduleId === sandbox.id) {
				return;
			}
			var newState = this.prepareHistoryState(currentState);
			sandbox.publish("ReplaceHistoryState", {
				stateObj: newState,
				pageTitle: null,
				hash: currentHash.historyState,
				silent: true
			});
		},

		/**
		 * Prepares history state.
		 * @protected
		 * @virtual
		 * @return {Object} Returns new history state.
		 */
		prepareHistoryState: function(currentState) {
			var newState = this.Terrasoft.deepClone(currentState);
			newState.moduleId = this.sandbox.id;
			return newState;
		},

		/**
		 * Gets profile key.
		 * @return {String} return profile key.
		 */
		getProfileKey: function() {
			return this.schemaName;
		},

		/**
		 * Gets schema builder configuration.
		 * @protected
		 * @return {Object} Returns schema builder configuration.
		 */
		getSchemaBuilderConfig: function() {
			return {
				schemaName: this.schemaName,
				entitySchemaName: this.entitySchemaName,
				profileKey: this.getProfileKey(),
				additionalDiff: this.getAdditionalDiff(),
				elementsPrefix: this.getElementsPrefix()
			};
		},

		/**
		 * Generates a class for the current scheme, parent classes, view.
		 * @protected
		 * @param {Function} callback Callback function will be called after generation.
		 * The input parameters are the class, schemes, view structure.
		 * @param {Object} scope Callback function scope.
		 */
		generateSchemaStructure: function(callback, scope) {
			var config = this.getSchemaBuilderConfig();
			this.schemaBuilder.build(config, function(viewModelClass, viewConfig) {
				callback.call(scope, viewModelClass, viewConfig);
			}, this);
		},

		/**
		 * Creates {Terrasoft.SchemaBuilder} instance for generation view and viewModel.
		 * @protected
		 * @virtual
		 * @return {Terrasoft.SchemaBuilder} Instance of hierarchy view and viewModel generator.
		 */
		getSchemaBuilder: function() {
			return this.Ext.create("Terrasoft.SchemaBuilder");
		},

		/**
		 * Initialize state, scheme titles, generates a view model class and view.
		 * After that it creates and initializes an instance of view.
		 * @param {Function} callback Callback function.
		 * @param {Object} scope Callback function scope
		 * @virtual
		 */
		init: function(callback, scope) {
			if (Terrasoft.isAngularHost) {
				this.sandbox.registerMessages({
					"getCardInfo": {
						direction: this.Terrasoft.MessageDirectionType.BIDIRECTIONAL,
						mode: this.Terrasoft.MessageMode.PTP
					},
				});
			}
			if (this.viewModel) {
				this.viewModel.set("Restored", true);
				if (Ext.isFunction(this.viewModel.initOnRestored)) {
					this.viewModel.initOnRestored(callback, scope);
					return;
				}
				Ext.callback(callback, scope);
				return;
			}
			this.schemaBuilder = this.getSchemaBuilder();
			if (this.useHistoryState) {
				this.initHistoryState();
			}
			if (!this.isSchemaConfigInitialized) {
				this.initSchemaName();
			}
			this.generateSchemaStructure(function(viewModelClass, viewConfig) {
				if (this.destroyed) {
					return;
				}
				this.viewModelClass = viewModelClass;
				this.viewConfig = viewConfig;
				const viewModel = this.viewModel = this.createViewModel(viewModelClass);
				if (Terrasoft.isAngularHost) {
					Terrasoft.utils.executionZone.attach(viewModel, this.sandbox?.executionZone);
				}
				viewModel.init(function() {
					if (!this.destroyed) {
						Ext.callback(callback, scope);
					}
				}, this);
			}, this);
		},

		/**
		 * ########## ###### ######## ###### #############.
		 * @protected
		 * @virtual
		 * @return {Object} ########## ###### ######## ###### #############.
		 */
		getViewModelConfig: function() {
			var viewModelConfig = {
				Ext: this.Ext,
				sandbox: this.sandbox,
				Terrasoft: this.Terrasoft
			};
			var parameters = this.parameters;
			if (this.Ext.isObject(parameters)) {
				viewModelConfig.values = parameters.viewModelConfig;
			}
			return viewModelConfig;
		},

		/**
		 * ####### ###### #############
		 * @protected
		 * @virtual
		 * @param {Object} viewModelClass ##### ###### ############# #####
		 * @return {Object} ########## ######### ###### ############# #####
		 */
		createViewModel: function(viewModelClass) {
			var viewModelConfig = this.getViewModelConfig();
			return this.Ext.create(viewModelClass, viewModelConfig);
		},

		/**
		 * Returns a module view container ID.
		 * @protected
		 * @virtual
		 * @return {String} Module view container ID.
		 */
		getViewContainerId: function() {
			return this.schemaName + this.autoGeneratedContainerSuffix;
		},

		/**
		 * Returns a ViewModel container ID if exists, otherwise - module view container ID.
		 * @protected
		 * @virtual
		 * @return {String} Container ID.
		 */
		getViewModelContainerId: function (viewModel) {
			if (this._containsIdGenerator(viewModel)) {
				return viewModel.getSchemaViewModelContainerId();
			}
			return this.getViewContainerId();
		},

		/**
		 * Returns module view configuration.
		 * @protected
		 * @virtual
		 * @return {Object} Module view configuration.
		 */
		getViewConfig: function(viewModel) {
			var containerId = this.getViewModelContainerId(viewModel);
			var viewConfig = {
				classes: {wrapClassName: this.getWrapClassNames()},
				items: this.Terrasoft.deepClone(this.viewConfig),
				markerValue: containerId
			};
			if (this.generateViewContainerId !== false) {
				this.Ext.apply(viewConfig, {
					id: containerId,
					selectors: {wrapEl: "#" + containerId}
				});
			}
			return viewConfig;
		},

		/**
		 * Returns array of wrap class name.
		 * @protected
		 * @return {Array}
		 */
		getWrapClassNames: function() {
			return ["schema-wrap", "one-el"];
		},

		/**
		 * Render view.
		 * @param {Ext.Element} renderTo Link to the view render container.
		 */
		render: function(renderTo) {
			var viewModel = this.viewModel;
			var view = this.view;
			var isNotAvailable = viewModel.get("IsNotAvailable");
			if (isNotAvailable) {
				this.sandbox.publish("BackHistoryState");
				return;
			}
			if (!view || view.destroyed) {
				var viewConfig = this.getViewConfig(viewModel);
				view = this.view = this.Ext.create("Terrasoft.Container", viewConfig);
				view.bind(viewModel);
				performanceManager.stop(this.sandbox.id + "_BeforeRender");
				performanceManager.start(this.sandbox.id + "_Render");
				view.render(renderTo);
			} else {
				performanceManager.stop(this.sandbox.id + "_BeforeRender");
				performanceManager.start(this.sandbox.id + "_Render");
				view.reRender(0, renderTo);
			}
			viewModel.renderTo = renderTo.id;
			performanceManager.stop(this.sandbox.id + "_Render");
			viewModel.onRender();
		},

		/**
		 * Clears all event subscriptions, and destroys the object.
		 * @overridden
		 * @param {Object} config Module destroy configuration.
		 */
		destroy: function(config) {
			if (config && config.keepAlive === true) {
				return;
			}
			if (this.viewModel) {
				this.viewModel.destroy();
				this.viewModel = null;
			}
			if (this.schemaBuilder) {
				this.schemaBuilder = null;
			}
			this.callParent(arguments);
		},

		/**
		 * Generate configuration for additional diff.
		 */
		getAdditionalDiff: Terrasoft.emptyFn,

		/**
		 * Generate additional prefix for control identifier.
		 * @protected
		 * @virtual
		 */
		getElementsPrefix: Terrasoft.emptyFn,

		setPageNameAttribute: function (name) {
			if (Terrasoft.isAngularHost) {
				const renderToElement = Ext.get(this.renderToId);
				renderToElement?.dom?.setAttribute("page", name);
			}
		}
	});
	return Terrasoft.BaseSchemaModule;
});


