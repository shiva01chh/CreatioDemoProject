Terrasoft.configuration.Structures["AutoGeneratedPageV2Utilities"] = {innerHierarchyStack: ["AutoGeneratedPageV2Utilities"]};
define("AutoGeneratedPageV2Utilities", ["terrasoft", "ext-base", "AutoGeneratedPageV2UtilitiesResources"],
	function(Terrasoft, Ext) {
		const LeftContainerName = "LeftContainer";
		const AutoGeneratedPageContentBlock = "AutoGeneratedPageContentBlock";
		const ListSuffix = "List";
		let customAttributes = null;
		let customDiff = null;
		let customValues = null;
		const DEFAULT_FLOAT_PRECISION = 2;

		function getLookupListName(name) {
			return name + ListSuffix;
		}

		function generateButtons(executionData) {
			const utils = executionData.pageSchema.utils;
			for (var i = 0; i < utils.length; i++) {
				const control = utils[i];
				customDiff.push(generateButtonCustomDiff(control, i));
			}
			customDiff.push({
				"operation": "merge",
				"name": "CloseButton",
				"values": {
					"visible": false
				}
			});
			customDiff.push({
				"operation": "insert",
				"parentName": "LeftContainer",
				"propertyName": "items",
				"name": "AutoGeneratedPageV2CloseButton",
				"index": utils.length,
				"values": {
					"itemType": Terrasoft.ViewItemType.BUTTON,
					"caption": {
						"bindTo": "Resources.Strings.CloseButtonCaption"
					},
					"classes": {
						"textClass": "actions-button-margin-right"
					},
					"click": {
						"bindTo": "onCloseClick"
					},
					"layout": {
						"column": utils.length,
						"row": 0,
						"colSpan": 2
					}
				}
			});
		}

		function generateButtonCustomDiff(control, columnIdx) {
			return {
				"operation": "insert",
				"name": control.name,
				"parentName": LeftContainerName,
				"propertyName": "items",
				"index": columnIdx,
				"values": {
					"itemType": Terrasoft.ViewItemType.BUTTON,
					"caption": control.caption,
					"enabled": control.enabled,
					"style": control.style,
					"layout": {
						"column": columnIdx,
						"row": 0,
						"colSpan": 2
					},
					"classes": {
						"textClass": "actions-button-margin-right"
					},
					"click": {
						"bindTo": control.validate === true
							? "completeProcessElementWithVerification"
							: "completeProcessElement"
					},
					"tag": control.name
				}
			};
		}

		function generateControlAttribute(control) {
			const attributeDescriptor = {
				dataValueType: control.dataValueType,
				caption: control.caption,
				isProcessUserTaskParameterAttribute: true
			};
			if (control.dataValueType === Terrasoft.DataValueType.FLOAT) {
				attributeDescriptor.precision = DEFAULT_FLOAT_PRECISION;
			}
			if (control.isRequired === true) {
				attributeDescriptor.isRequired = true;
			}
			if (getIsLookupDataValueType(control.dataValueType)) {
				attributeDescriptor.isLookup = true;
				attributeDescriptor.referenceSchemaName = control.referenceSchemaName;
				customAttributes[getLookupListName(control.name)] = {isCollection: true};
			}
			customAttributes[control.name] = attributeDescriptor;
		}

		function generateLookupControlValues(control) {
			customValues[getLookupListName(control.name)] = new Terrasoft.Collection();
		}

		function getIsLookupDataValueType(dataValueType) {
			return dataValueType === Terrasoft.DataValueType.LOOKUP ||
			dataValueType === Terrasoft.DataValueType.ENUM;
		}

		function generateControl(control, parentName, rowIdx) {
			let controlDiff;
			if (getIsLookupDataValueType(control.dataValueType)) {
				controlDiff = generateLookupCustomDiff(control);
				generateLookupControlValues(control);
			} else if (control.text) {
				controlDiff = generateLabelCustomDiff(control);
			} else {
				controlDiff = generateTextEditCustomDiff(control);
			}
			controlDiff.parentName = parentName;
			if (rowIdx !== null) {
				controlDiff.values.layout = {
					"column": 0,
					"row": rowIdx,
					"colSpan": 12
				};
			}
			customDiff.push(controlDiff);
			generateControlAttribute(control);
		}

		function generateLabelCustomDiff(control) {
			return {
				"operation": "insert",
				"name": control.name,
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.LABEL,
					"caption": {
						"bindTo": control.name
					},
					"classes": {
						"labelClass": ["information", "recommendation"]
					}
				}
			};
		}

		function generateTextEditCustomDiff(control) {
			const diff = {
				"operation": "insert",
				"name": control.name,
				"propertyName": "items",
				"values": {
					"caption": control.caption,
					"bindTo": control.name
				}
			};
			if (control.isMultiLine === true) {
				diff.values.contentType = Terrasoft.ContentType.LONG_TEXT;
			}
			return diff;
		}

		function generateLookupCustomDiff(config) {
			const lookupCustomDiff = {
				"operation": "insert",
				"propertyName": "items",
				"name": config.name,
				"values": {
					"caption": config.caption,
					"contentType": Terrasoft.ContentType.LOOKUP,
					"bindTo": config.name,
					"controlConfig": {
						"tag": config.name
					}
				}
			};
			if (config.dataValueType === Terrasoft.DataValueType.ENUM) {
				lookupCustomDiff.values.contentType = "Terrasoft.ContentType.ENUM";
			} else {
				const controlConfig = lookupCustomDiff.values.controlConfig;
				controlConfig.list = {"bindTo": getLookupListName(config.name)};
				controlConfig.loadVocabulary = {"bindTo": "loadVocabulary"};
			}
			return lookupCustomDiff;
		}

		function generateControlGroupCustomDiff(config, name, parentName, rowIdx) {
			return {
				"operation": "insert",
				"parentName": parentName,
				"name": name,
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTROL_GROUP,
					"items": [],
					"caption": config.caption,
					"controlConfig": {
						"collapsed": Ext.isEmpty(config.collapsed) ? false : config.collapsed
					},
					"visible": Ext.isEmpty(config.visible) ? true : config.visible,
					"layout": {
						"column": 0,
						"row": rowIdx,
						"colSpan": 12
					}
				}
			};
		}

		return {
			getCustomValues: function(executionData) {
				if (executionData.parameters) {
					Ext.apply(customValues, executionData.parameters);
				}
				customValues.header = executionData.title;
				return customValues;
			},

			getCustomAttributes: function() {
				return customAttributes;
			},

			getCustomDiff: function(executionData) {
				customDiff = [];
				customValues = {};
				customAttributes = {};
				generateButtons(executionData);
				const leftContainer = executionData.pageSchema.schema.leftContainer;
				if (!leftContainer || leftContainer.length === 0) {
					return customDiff;
				}
				let rowIdx = 0;
				Terrasoft.each(leftContainer, function(element) {
					switch (element.type) {
						case Terrasoft.ViewModelSchemaItem.ATTRIBUTE:
							generateControl(element, AutoGeneratedPageContentBlock, rowIdx);
							break;
						case Terrasoft.ViewModelSchemaItem.GROUP:
							const groupName = element.name + "ControlGroup";
							customDiff.push(generateControlGroupCustomDiff(element, groupName,
								AutoGeneratedPageContentBlock, rowIdx));
							const items = element.items;
							if (Ext.isArray(items)) {
								for (var i = 0; i < items.length; i++) {
									const item = items[i];
									generateControl(item, groupName, null);
								}
							}
							break;
						default:
							throw new Terrasoft.UnsupportedTypeException({
								message: element.type ?
									element.type.toString() : this.get("Resources.Strings.UnsupportedType")
							});
					}
					rowIdx++;
				});
				return customDiff;
			}
		};
	});


