Terrasoft.configuration.Structures["ContentBlockPage"] = {innerHierarchyStack: ["ContentBlockPage"], structureParent: "BaseModulePageV2"};
define('ContentBlockPageStructure', ['ContentBlockPageResources'], function(resources) {return {schemaUId:'927abe10-66bb-4658-99bf-5b3f80b3f1cf',schemaCaption: "Section edit page schema - \"Content block\"", parentSchemaName: "BaseModulePageV2", packageName: "ContentBuilder", schemaName:'ContentBlockPage',parentSchemaUId:'d62293c0-7f14-44b1-b547-735fb40499cd',extendParent:false,type:Terrasoft.SchemaType.EDIT_VIEW_MODEL_SCHEMA,entitySchema:'',name:'',extend:'Terrasoft.model.BaseViewModel',schema:{leftPanel:[],rightPanel:[],actions:[],analytics:[]},methods:{},controlsConfig:{},customBindings:{},bindings:{},schemaDifferences:function(){

}};});
define("ContentBlockPage", [
	"ContentBlockPageResources",
	"ContentBuilderItemGenerator",
	"ContentBuilderHelper",
	"css!ContentBlockCSS",
	"ContentElementManager",
	"HtmlControlGeneratorV2"
], function(resources) {
	return {
		entitySchemaName: "ContentBlock",
		modules: /**SCHEMA_MODULES*/{
			"BlockContentBuilder": {
				"config": {
					"schemaName": "BlockContentBuilder",
					"isSchemaConfigInitialized": true,
					"useHistoryState": false,
					"showMask": true,
					"autoGeneratedContainerSuffix": "-block-content-builder",
					"parameters": {
						"viewModelConfig": {
							"ContentBuilderConfig": {"attributeValue": "BlockConfig"}
						}
					}
				}
			}
		}/**SCHEMA_MODULES*/,
		details: /**SCHEMA_DETAILS*/{
			Files: {
				schemaName: "FileDetailV2",
				entitySchemaName: "ContentBlockFile",
				filter: {
					masterColumn: "Id",
					detailColumn: "ContentBlock"
				}
			}
		}/**SCHEMA_DETAILS*/,
		attributes: {
			/**
			 * Block items collection.
			 */
			"Items": {
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				dataValueType: Terrasoft.DataValueType.COLLECTION
			},
			/**
			 * Content builder block config.
			 */
			"BlockConfig": {
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				dataValueType: Terrasoft.DataValueType.CUSTOM_OBJECT,
				value: {}
			},
			/**
			 * Flag that indicates whether BlockContentBuilder module is visible or not.
			 */
			"IsBlockContentBuilderModuleVisible": {
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				dataValueType: Terrasoft.DataValueType.BOOLEAN,
				value: false
			},
			/**
			 * Blank slate description.
			 */
			"BlankSlateDescription": {
				dataValueType: Terrasoft.DataValueType.TEXT
			},
			/**
			 * Flag that indicates whether ContentBlockDesigner is visible or not.
			 */
			"IsContentBlockDesignerVisible": {
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				dataValueType: Terrasoft.DataValueType.BOOLEAN,
				value: false
			},
			/**
			 * Autogenerated image.
			 */
			"AutogeneratedImage": {
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				dataValueType: Terrasoft.DataValueType.CUSTOM_OBJECT
			},
			/**
			 * Autogenerated image.
			 */
			"IsAutogeneratedImage": {
				type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
				dataValueType: Terrasoft.DataValueType.BOOLEAN,
				value: false
			}
		},
		messages: {
			"GetModuleInfo": {
				mode: Terrasoft.MessageMode.PTP,
				direction: Terrasoft.MessageDirectionType.SUBSCRIBE
			},
			"SaveHTMLElementContent": {
				mode: Terrasoft.MessageMode.PTP,
				direction: Terrasoft.MessageDirectionType.SUBSCRIBE
			},
			"SetContentBuilderConfig": {
				mode: Terrasoft.MessageMode.PTP,
				direction: Terrasoft.MessageDirectionType.PUBLISH
			},
			"GetContentBuilderConfig": {
				mode: Terrasoft.MessageMode.PTP,
				direction: Terrasoft.MessageDirectionType.PUBLISH
			},
			"CloseContentBlockDesigner": {
				mode: Terrasoft.MessageMode.BROADCAST,
				direction: Terrasoft.MessageDirectionType.SUBSCRIBE
			},
			"EditContentBlockDesigner": {
				mode: Terrasoft.MessageMode.PTP,
				direction: Terrasoft.MessageDirectionType.PUBLISH
			},
			"InitializedContentBuilder": {
				mode: Terrasoft.MessageMode.PTP,
				direction: Terrasoft.MessageDirectionType.SUBSCRIBE
			},
			"SelectedContentItemChange": {
				mode: Terrasoft.MessageMode.PTP,
				direction: Terrasoft.MessageDirectionType.SUBSCRIBE
			}
		},
		methods: {

			// region Methods: Private

			/**
			 * @private
			 */
			_clearImage: function() {
				this.set(this.primaryImageColumnName, null);
				this.$IsAutogeneratedImage = false;
			},

			/**
			 * Handler for onPhotoChange event.
			 * @private
			 * @param {File} image Image.
			 */
			onImageChange: function(image) {
				if (!image) {
					this.$IsAutogeneratedImage = true;
					this._clearImage();
				} else {
					this.$IsAutogeneratedImage = false;
					Terrasoft.ImageApi.upload({
						file: image,
						onComplete: this.onImageUploaded,
						onError: Terrasoft.emptyFn,
						scope: this
					});
				}
			},

			/**
			 * Method display image after save image in DB.
			 * @private
			 * @param {String} imageId Image Id.
			 */
			onImageUploaded: function(imageId) {
				var imageData = {
					value: imageId,
					displayValue: this.primaryImageColumnName
				};
				this.set("Image", imageData);
			},

			/**
			 * Returns image url for image block.
			 * @private
			 * @return {String} Image url.
			 */
			getBlockImage: function() {
				if (this.$IsAutogeneratedImage) {
					return this.$AutogeneratedImage;
				} else {
					return this.getSchemaImageUrl();
				}
			},

			/**
			 * @private
			 */
			_getDefaultBlockConfig: function() {
				var manager = new Terrasoft.ContentElementManager();
				return manager.getDefaultBlockConfig();
			},

			/**
			 * @private
			 */
			_closeContentBlockDesigner: function(blockConfig) {
				if (blockConfig) {
					this.set("ContentBuilderConfig", blockConfig);
					this.initBlock(blockConfig);
				}
			},

			/**
			 * @private
			 */
			_isClientSupportConvertToCanvas: function() {
				return !Ext.isIE && !Ext.isSafari;
			},

			/**
			 * @private
			 */
			_setAutogeneratedImage: function(callback, scope) {
				const block = Ext.query(".content-builder-container .content-sheet-items .content-block-wrap")[0];
				var canConvertToCanvas = this._isClientSupportConvertToCanvas();
				if (this.$ActiveTabName === "BlockContentTab" && block && canConvertToCanvas) {
					Terrasoft.convertElementToCanvas(block.id, {scale: 0.75}, function(canvas) {
						this.$AutogeneratedImage = canvas.toDataURL();
						if(!this.$Image) {
							this.$IsAutogeneratedImage = true;
						}
						Ext.callback(callback, scope);
					}, this);
				} else {
					this._setDefaultImage();
					Ext.callback(callback, scope);
				}
			},

			/**
			 * @private
			 */
			_setDefaultImage: function() {
				if (!this.$Image) {
					if (this.$IsAutogeneratedImage && this.$AutogeneratedImage) {
						this.set("Image", this.$AutogeneratedImage);
					} else {
						this.$AutogeneratedImage = resources.localizableStrings.DefaultPreviewData;
					}
				}
			},

			/**
			 * @private
			 */
			_onPreviewImageUploaded: function(imageId) {
				const imageData = {
					value: imageId,
					displayValue: "PreviewImage"
				};
				this.set(this.primaryImageColumnName, imageData);
			},

			/**
			 * @private
			 */
			_subscribeOnSandboxEvents: function() {
				this.sandbox.subscribe("CloseContentBlockDesigner", this._closeContentBlockDesigner, this);
				this.sandbox.subscribe("InitializedContentBuilder", this._onInitializedContentBuilder, this);
				this.sandbox.subscribe("SelectedContentItemChange", this._onSelectedContentItemChange, this);
			},

			/**
			 * @private
			 */
			_onInitializedContentBuilder: function() {
				if (this.$IsContentBlockDesignerVisible) {
					this.$IsContentBlockDesignerVisible = false;
					this.sandbox.publish("EditContentBlockDesigner");
				}
			},

			/**
			 * @private
			 */
			_onSelectedContentItemChange: function() {
				this.updateButtonsVisibility(true);
			},

			/**
			 * @private
			 */
			_initItemsEvents: function() {
				var collection = new Terrasoft.BaseViewModelCollection();
				collection.on("itemChanged", this.onItemFocused, this);
				this.set("Items", collection);
			},

			/**
			 * @private
			 */
			_getBlockConfig: function() {
				var blockConfig;
				if (this.$ActiveTabName === "BlockContentTab") {
					const sheetConfig = this.sandbox.publish("GetContentBuilderConfig");
					blockConfig = (sheetConfig && sheetConfig.Items[0]);
				} else {
					blockConfig = this.$BlockConfig;
				}
				if (!blockConfig || Ext.isEmpty(blockConfig.Items)) {
					blockConfig = this._getDefaultBlockConfig();
				}
				return blockConfig;
			},

			/**
			 * @private
			 */
			_initBlankSlateDescription: function() {
				const config = {
					contextHelpCode: "ConfigureContentBlock",
					callback: this._onGetAcademyUrlCallback,
					scope: this
				};
				Terrasoft.AcademyUtilities.getUrl(config);
			},

			/**
			 * @private
			 */
			_onGetAcademyUrlCallback: function(url) {
				const template = this.get("Resources.Strings.BlankSlateDescription");
				var startTagPart = "";
				var endTagPart = "";
				if (!Ext.isEmpty(url)) {
					startTagPart = "<a target=\"_blank\" href=\"" + url + "\">";
					endTagPart = "</a>";
				}
				const description = Ext.String.format(template, startTagPart, endTagPart);
				this.set("BlankSlateDescription", description);
			},

			/**
			 * @private
			 */
			_uploadUsingDataUrl: function(dataUrl, callback, scope) {
				Terrasoft.ImageApi.uploadUsingDataUrl({
					fileName: "block.png",
					dataUrl: dataUrl,
					onComplete: function(imageId) {
						this._onPreviewImageUploaded(imageId);
						Ext.callback(callback, scope);
					},
					scope: this
				});
			},

			// endregion

			// region Methods: Protected

			/**
			 * @inheritdoc Terrasoft.BasePageV2#init
			 * @override
			 */
			init: function() {
				this._initItemsEvents();
				this._subscribeOnSandboxEvents();
				this._initBlankSlateDescription();
				if (this.isAddMode()) {
					this.$IsAutogeneratedImage = true;
				}
				this.callParent(arguments);
			},

			/**
			 * @inheritdoc Terrasoft.BasePageV2#getDefaultTabName
			 * @override
			 */
			getDefaultTabName: function() {
				return this.isAddMode() ? "GeneralInfoTab" : "BlockContentTab";
			},

			/**
			 * @inheritdoc Terrasoft.BasePageV2#onCloseClick
			 * @override
			 */
			onCloseClick: function() {
				this.sandbox.publish("BackHistoryState");
			},

			/**
			 * @inheritdoc Terrasoft.BasePageV2#activeTabChange
			 * @override
			 */
			activeTabChange: function(newActiveTab) {
				Terrasoft.MaskHelper.showBodyMask();
				this.$BlockConfig = this._getBlockConfig();
				const parentMethod = this.getParentMethod();
				this._setAutogeneratedImage(function() {
					parentMethod.call(this, newActiveTab);
					Terrasoft.MaskHelper.hideBodyMask();
				}, this);
			},

			/**
			 * @inheritdoc Terrasoft.BaseViewModel#loadEntity
			 * @override
			 */
			loadEntity: function(primaryColumnValue, callback, scope) {
				this.callParent([primaryColumnValue, function() {
					var config = this.get("Config");
					var blockConfig = Terrasoft.decode(config);
					this.initBlock(blockConfig);
					callback.call(scope || this, this);
				}, this]);
			},

			/**
			 * @inheritdoc Terrasoft.model.BaseViewModel#setCopyColumnValues
			 * @override
			 */
			setCopyColumnValues: function() {
				this.callParent(arguments);
				var config = this.get("Config");
				var blockConfig = Terrasoft.decode(config);
				this.initBlock(blockConfig);
			},

			/**
			 * @inheritdoc Terrasoft.model.BaseViewModel#saveEntity
			 * @override
			 */
			saveEntity: function(callback, scope) {
					const parentMethod = this.getParentMethod();
					this.$BlockConfig = this._getBlockConfig();
					this.set("Config", Terrasoft.encode(this.$BlockConfig));
					if (this.$IsAutogeneratedImage || !this.$Image) {
						if (!this.$AutogeneratedImage) {
							this._setDefaultImage();
						}
						this._uploadUsingDataUrl(this.$AutogeneratedImage, function() {
							parentMethod.call(this, callback, scope);
						}, this);
					} else {
						parentMethod.call(this, callback, scope);
					}
			},

			/**
			 * Creates instance of ContentBuilderHelper.
			 * @protected
			 * @return {Terrasoft.ContentExporters.ContentBuilderHelper}
			 */
			createContentBuilderHelper: function() {
				return new Terrasoft.ContentBuilderHelper({sandbox: this.sandbox});
			},

			/**
			 * Create content for content block with single html element.
			 * @protected
			 */
			addHtmlElementToBlock: function() {
				const blockConfig = this._getDefaultBlockConfig();
				this.initBlock(blockConfig);
			},

			/**
			 * Initialize block by specified config.
			 * @protected
			 * @param {Object} blockConfig Config for block.
			 */
			initBlock: function(blockConfig) {
				this.set("BlockConfig", blockConfig);
				if (this.get("IsBlockContentBuilderModuleVisible")) {
					this.sandbox.publish("SetContentBuilderConfig", blockConfig);
				} else {
					this.set("IsBlockContentBuilderModuleVisible", true);
				}
			},

			/**
			 * Handler for setup block content button click.
			 */
			onSetupBlockContentClick: function() {
				const blockConfig = this._getDefaultBlockConfig();
				this.initBlock(blockConfig);
				this.$IsContentBlockDesignerVisible = true;
			},

			/**
			 * Returns blank slate image.
			 * @return {String|*}
			 */
			getPageBlankSlateImage: function() {
				const image = this.get("Resources.Images.BlankSlateImage");
				return Terrasoft.ImageUrlBuilder.getUrl(image);
			},

			/**
			 * Returns flag that indicates when to show blank slate.
			 * @return {Boolean}
			 */
			getIsVisibleBlankSlate: function() {
				return this.isAddMode() && !this.get("IsBlockContentBuilderModuleVisible");
			},

			/**
			 * Returns default image url.
			 * @return {String} Default image url.
			 */
			getDefaultImageURL: function() {
				return Terrasoft.ImageUrlBuilder.getUrl(resources.localizableImages.DefaultPhoto);
			}

			// endregion

		},
		diff: /**SCHEMA_DIFF*/[
			{
				"operation": "insert",
				"parentName": "GeneralInfoTabContainer",
				"propertyName": "items",
				"index": 0,
				"name": "ImageContainer",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"wrapClass": ["image-edit-container", "content-block"],
					"layout": {"column": 0, "row": 0, "rowSpan": 5, "colSpan": 4},
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "ImageContainer",
				"propertyName": "items",
				"name": "Image",
				"values": {
					"getSrcMethod": "getBlockImage",
					"onPhotoChange": "onImageChange",
					"beforeFileSelected": "beforeFileSelected",
					"readonly": false,
					"defaultImage": {"bindTo": "getDefaultImageURL"},
					"generator": "ImageCustomGeneratorV2.generateCustomImageControl"
				}
			},
			{
				"operation": "insert",
				"parentName": "GeneralInfoTabContainer",
				"propertyName": "items",
				"name": "Name",
				"values": {
					"layout": {"column": 4, "row": 0, "colSpan": 20, "rowSpan": 1}
				}
			},
			{
				"operation": "insert",
				"parentName": "GeneralInfoTabContainer",
				"propertyName": "items",
				"name": "Description",
				"values": {
					"layout": {"column": 4, "row": 1, "colSpan": 20, "rowSpan": 3},
					"contentType": Terrasoft.ContentType.LONG_TEXT
				}
			},
			{
				"operation": "insert",
				"parentName": "Tabs",
				"propertyName": "tabs",
				"index": 0,
				"name": "GeneralInfoTab",
				"values": {
					"caption": {"bindTo": "Resources.Strings.GeneralInfoTabCaption"},
					"wrapClass": "general-info-tab",
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "GeneralInfoTab",
				"propertyName": "items",
				"name": "GeneralInfoTabContainer",
				"values": {
					"itemType": Terrasoft.ViewItemType.GRID_LAYOUT,
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "Tabs",
				"propertyName": "tabs",
				"index": 1,
				"name": "BlockContentTab",
				"values": {
					"caption": {"bindTo": "Resources.Strings.ContentBlockTabCaption"},
					"items": [],
					"wrapClass": "block-content-tab"
				}
			},
			{
				"operation": "insert",
				"parentName": "Tabs",
				"propertyName": "tabs",
				"index": 2,
				"name": "NotesTabContainer",
				"values": {
					"caption": {"bindTo": "Resources.Strings.NotesTabCaption"},
					"wrapClass": "notes-tab-container",
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "NotesTabContainer",
				"propertyName": "items",
				"name": "Files",
				"values": {
					"itemType": Terrasoft.ViewItemType.DETAIL
				}
			},
			{
				"operation": "insert",
				"parentName": "BlockContentTab",
				"propertyName": "items",
				"name": "BlockContentBuilder",
				"index": 0,
				"values": {
					"itemType": Terrasoft.ViewItemType.MODULE,
					"classes": {"wrapClassName": ["content-builder-container"]},
					"visible": {"bindTo": "IsBlockContentBuilderModuleVisible"}
				}
			},
			{
				"operation": "insert",
				"parentName": "BlockContentTab",
				"name": "BlankSlateContainer",
				"propertyName": "items",
				"values": {
					"visible": {
						"bindTo": "getIsVisibleBlankSlate"
					},
					"itemType": this.Terrasoft.ViewItemType.CONTAINER,
					"items": [],
					"classes": {"wrapClassName": ["blank-slate-container"]}
				}
			},
			{
				"operation": "insert",
				"parentName": "BlankSlateContainer",
				"name": "BlankSlateImageContainer",
				"propertyName": "items",
				"values": {
					"getSrcMethod": "getPageBlankSlateImage",
					"onPhotoChange": Terrasoft.emptyFn,
					"readonly": true,
					"generator": "ImageCustomGeneratorV2.generateSimpleCustomImage"
				}
			},
			{
				"operation": "insert",
				"parentName": "BlankSlateContainer",
				"name": "BlankSlateRightContainer",
				"propertyName": "items",
				"classes": {"wrapClassName": ["blank-slate-container"]},
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"items": []
				}
			},
			{
				"operation": "insert",
				"parentName": "BlankSlateRightContainer",
				"propertyName": "items",
				"name": "BlankSlateDescriptionControl",
				"values": {
					"generator": "HtmlControlGeneratorV2.generateHtmlControl",
					"htmlContent": {"bindTo": "BlankSlateDescription"},
					"classes": {"wrapClass": ["description-label"]}
				}
			},
			{
				"operation": "insert",
				"parentName": "BlankSlateRightContainer",
				"name": "SetupBlockContentButton",
				"propertyName": "items",
				"values": {
					"className": "Terrasoft.Button",
					"style": Terrasoft.controls.ButtonEnums.style.BLUE,
					"itemType": Terrasoft.ViewItemType.BUTTON,
					"caption": {"bindTo": "Resources.Strings.SetupBlockContentButtonCaption"},
					"click": {"bindTo": "onSetupBlockContentClick"}
				}
			},
			{
				"operation": "remove",
				"name": "ESNTab"
			},
			{
				"operation": "remove",
				"name": "ESNFeedContainer"
			},
			{
				"operation": "remove",
				"name": "ESNFeed"
			},
			{
				"operation": "merge",
				"name": "TabsContainer",
				"propertyName": "items",
				"values": {
					"classes": {"wrapClassName": ["content-block-page-tabs-container"]}
				}
			}
		]/**SCHEMA_DIFF*/
	};
});


