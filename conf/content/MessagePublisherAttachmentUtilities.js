Terrasoft.configuration.Structures["MessagePublisherAttachmentUtilities"] = {innerHierarchyStack: ["MessagePublisherAttachmentUtilities"]};
define("MessagePublisherAttachmentUtilities", ["ext-base", "terrasoft", "MessagePublisherAttachmentUtilitiesResources",
			"MaskHelper", "FileUploadErrorHandlers", "ConfigurationEnums"],
		function(Ext, Terrasoft, resources, MaskHelper) {
			/**
			 * @class Terrasoft.configuration.MessagePublisherAttachmentUtilities
			 */
			Ext.define("Terrasoft.configuration.mixins.MessagePublisherAttachmentUtilities", {
				alternateClassName: "Terrasoft.MessagePublisherAttachmentUtilities",

				mixins: {
					FileUploadErrorHandlers : "Terrasoft.FileUploadErrorHandlers",
				},

				/**
				 * @inheritDoc Terrasoft.BasePageV2#init
				 * @protected
				 */
				init: function() {
					this.initFileUploadErrorHadlers();
				},

				/**
				 * Returns image config of attach button.
				 * @private
				 * @returns {Object} Image config
				 */
				getAttachFileButtonImageConfig: function() {
					var imageUrl = this.Terrasoft.ImageUrlBuilder.getUrl(resources.localizableImages.AttachFileButtonImage);
					return {
						"source": this.Terrasoft.ImageSources.URL,
						"url": imageUrl
					};
				},

				/**
				 * On Attach button click event handler.
				 * @protected
				 */
				onAttachFileButtonClick: Terrasoft.emptyFn,

				/**
				 * Select file event handler.
				 * Before first upload inserts the entity, then upload files to existing one.
				 * @private
				 * @param {Object} files Files generated by FileAPI.
				 * @param {Boolean} [needPastInBody] Flag that indicates whether pasting image to body is necessary.
				 */
				onAttachFileSelected: function(files, needPastInBody) {
					if (!files.length) {
						return;
					}
					const isImageSingleFile = files.length === 1 && this.imageRegexPattern.test(files[0].type);
					const isInline = this.Ext.isBoolean(needPastInBody) && needPastInBody && isImageSingleFile;
					const config = this.getUploadConfig(files, isInline);
					this.set("FileUploadConfig", config);
					if (isInline) {
						this.setFileTypes(files);
					} else {
						this.set("FileTypes", null);
					}
					if (this.get("IsInserted")) {
						this.uploadFile();
						return;
					}
					this.insertEntity();
				},

				/**
				 * Sets file types.
				 * @private
				 * @param {Object[]} files File array.
				 */
				setFileTypes: function(files) {
					var fileTypes = {};
					this.Terrasoft.each(files, function(file) {
						fileTypes[file.name] = file.type;
					}, this);
					this.set("FileTypes", fileTypes);
				},

				/**
				 * Upload files using FileApi.
				 * @protected
				 */
				uploadFile: function() {
					var config = this.get("FileUploadConfig");
					if (config) {
						this.Terrasoft.ConfigurationFileApi.upload(config);
					}
				},

				 /**
				  * Returns upload file's config.
				  * @protected
				  * @param {Object} files Files generated by FileAPI.
				  * @param {Boolean} isInline Flag that indicates whether pasting image to body is necessary.
				  * @return {Object} Upload file's config.
				  */
				getUploadConfig: function(files, isInline) {
					var entitySchemaName = this.entitySchema.name;
					var entitySchemaRecordId = this.get("PrimaryColumnValue");
					var entityFileSchemaName = entitySchemaName + "File";
					var config = {
						scope: this,
						onUpload: this.onUpload,
						onComplete: this.onComplete,
						onFileComplete: this.onFileComplete,
						entitySchemaName: entityFileSchemaName,
						columnName: "Data",
						parentColumnName: entitySchemaName,
						parentColumnValue: entitySchemaRecordId,
						files: files,
						isChunkedUpload: true,
						oversizeErrorHandler: this.onFilesOversized
					};
					config.additionalParams = {
						UseAdminRights: false
					};
					if (this.Ext.isBoolean(isInline) && isInline) {
						config.additionalParams.Inline = isInline;
					}
					return config;
				},

				/**
				 * Start upload file event handler.
				 * @private
				 */
				onUpload: function() {
					MaskHelper.ShowBodyMask();
				},

				/**
				 * Finish upload file event handler. In case of errors shows message.
				 * @protected
				 */
				onComplete: function() {
					MaskHelper.HideBodyMask();
					this.onCompleteError();
					this.loadAttachments();
				},

				/**
				 * Load attachments.
				 * @private
				 */
				loadAttachments: function() {
					this.getAttachments(function() {
						MaskHelper.HideBodyMask();
					}, this);
				},

				/**
				 * Gets attachments collection.
				 * @private
				 * @param {Function} callback The callback function.
				 * @param {Object} scope The context of the callback function.
				 */
				getAttachments: function(callback, scope) {
					var esq = this.Ext.create("Terrasoft.EntitySchemaQuery", {
						rootSchemaName: this.entitySchemaName + "File"
					});
					esq.on("createviewmodel", this.createAttachmentViewModel, this);
					esq.addColumn("Id");
					esq.addColumn("Name");
					var orderColumn = esq.addColumn("CreatedOn");
					orderColumn.orderPosition = 1;
					orderColumn.orderDirection = this.Terrasoft.OrderDirection.DESC;
					esq.filters.addItem(esq.createColumnFilterWithParameter(
							this.Terrasoft.ComparisonType.EQUAL, this.entitySchemaName, this.get("PrimaryColumnValue")));
					esq.getEntityCollection(function(result) {
						if (result.success) {
							var collection = result.collection;
							var filesList = this.get("FilesList");
							var filesCollection = filesList.collection;
							if (collection.getCount() > 0) {
								collection.each(function(item) {
									if (!filesCollection.containsKey(item.get("Id"))) {
										filesList.add(item.get("Id"), item);
										item.init();
									}
								}, this);
								callback.call(scope, collection);
							}
						}
					}, this);
				},

				/**
				 * Create attachment view model.
				 * @param {Object} config The configuration by query results.
				 * @private
				 */
				createAttachmentViewModel: function(config) {
					config.rawData.filesList = this.get("FilesList");
					var viewModelConfig = {
						rowConfig: config.rowConfig,
						values: config.rawData,
						Ext: this.Ext,
						Terrasoft: this.Terrasoft,
						sandbox: this.sandbox
					};
					config.viewModel = this.Ext.create(this.get("AttachmentViewModelClass"), viewModelConfig);
				},

				/**
				 * Finish upload file event handler. Shows file links. In case of error adds ones to the log.
				 * @protected
				 */
				onFileComplete: function(error, xhr, file) {
					if (error) {
						this.onFileCompleteError(error, file);
					}
				},

			});
		});


