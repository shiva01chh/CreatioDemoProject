Terrasoft.configuration.Structures["EditPageDesigner"] = {innerHierarchyStack: ["EditPageDesigner"]};
define("EditPageDesigner", ['ext-base', 'core', 'terrasoft', 'sandbox', 'StructureExplorerUtilities',
	'EditPageDesignerGroupEdit', 'EditPageDesignerViewGenerator', 'EditPageDesignerViewModelGenerator',
	'EditPageDesignerHelper', 'MaskHelper'],
	function(Ext, core, Terrasoft, sandbox, StructureExplorerUtilities, EditPageDesignerGroupEdit, viewGenerator,
			viewModelGenerator, EditPageDesignerHelper, MaskHelper) {
		var viewModel;
		var info;
		var viewRenderTo;
		var parentSchemaName;
		var recordId;
		var cardSchema = null;
		var cardView = null;
		var isProcessMode = false;
		var mainViewRenderTo = null;
		var savedSchemaName;
		var parentSchemaNames = [];


		function loadCardView(renderTo) {
			mainViewRenderTo = renderTo;
			if (viewModel) {
				var generatedViewConfig = viewGenerator.generate();
				var config = Terrasoft.deepClone(generatedViewConfig);
				var genView = Ext.create(config.className || 'Terrasoft.Container', config);
				genView.bind(viewModel);
				genView.render(renderTo);
				var modificationsList = viewModel.get('ModificationsList');
				var cardRenderTo = Ext.get('autoGeneratedContainer');
				var generatedCardViewConfig = viewGenerator.generateCard(cardSchema, info, modificationsList);
				cardView = Ext.create(generatedCardViewConfig.className || 'Terrasoft.Container',
					generatedCardViewConfig);
				cardView.bind(viewModel);
				cardView.render(cardRenderTo);
				var currentElement = viewModel.getCurrentElement();
				if (currentElement) {
					viewModel.highlightContainer(currentElement);
				}
				return;
			}
			var historyState = sandbox.publish('GetHistoryState');
			var hash = historyState.hash;
			var schemaName = hash.entityName || '';
			parentSchemaName = hash.parentSchemaName || '';
			recordId = hash.recordId || '';
			if (schemaName) {
				var map = {};
				map[schemaName] = {
					sandbox: 'sandbox_' + sandbox.id,
					'ext-base': 'ext_' + Ext.id
				};
				requirejs.config({
					map: map
				});
				savedSchemaName = schemaName;

				require([schemaName], function(schema) {
					schema.name = schemaName;
					createSchemaParents(schema, function(schemaConfig, parentSchemaConfig) {
						cardSchema = createSchema(schemaConfig, parentSchemaConfig);
						EditPageDesignerHelper.getModifications(cardSchema.name, function(list) {
							EditPageDesignerHelper.updateSchema(cardSchema, list);
							generateContainerIds(cardSchema);
							var viewModelConfig = createViewModelClassBySchema(cardSchema);
							viewModel = Ext.create(viewModelConfig.name, {
								values: {
									NewColumns: new Terrasoft.Collection(),
									blockElementVisible: false,
									activeItemActions: viewGenerator.getItemActionsConfig(),
									ModificationsList: list
								}
							});
							viewModel.entitySchemaInfo = viewModelConfig.entitySchemaInfo;
							var generatedViewConfig = viewGenerator.generate();
							var view = Ext.create(generatedViewConfig.className || 'Terrasoft.Container',
								generatedViewConfig);
							viewRenderTo = renderTo;
							view.bind(viewModel);
							MaskHelper.HideBodyMask();
							view.render(viewRenderTo);
							loadCommandLine();
							var cardRenderTo = Ext.get('autoGeneratedContainer');
							var generatedCardViewConfig = viewGenerator.generateCard(cardSchema, info);
							cardView = Ext.create(generatedCardViewConfig.className || 'Terrasoft.Container',
								generatedCardViewConfig);

							cardView.bind(viewModel);
							cardView.render(cardRenderTo);

						}, viewModel);
					}, this);
				});
			}
		}
		function generateContainerId(schema) {
			if (Ext.isEmpty(schema.EditStructureContainerId)) {
				schema.EditStructureContainerIdNew = true;
				schema.EditStructureContainerId = Terrasoft.generateGUID();
			}
			if (schema.items) {
				var items = schema.items;
				for (var j = 0; j < items.length; j++) {
					generateContainerId(items[j]);
				}
			}
		}
		function generateContainerIds(schema) {
			if (schema.schema.customPanel) {
				var items = schema.schema.customPanel;
				for (var i = 0; i < items.length; i++) {
					generateContainerId(items[i]);
				}
			}
			var leftPanelItems = schema.schema.leftPanel;
			for (var j = 0; j < leftPanelItems.length; j++) {
				generateContainerId(leftPanelItems[j]);
			}
			var rightPanelItems = schema.schema.rightPanel;
			for (var k = 0; k < rightPanelItems.length; k++) {
				generateContainerId(rightPanelItems[k]);
			}
		}
		function createSchemaParents(schemaConfig, callback) {
			var parentSchemaName = schemaConfig.extend;
			parentSchemaNames.push(parentSchemaName);
			if (parentSchemaName === 'Terrasoft.model.BaseViewModel') {
				callback(schemaConfig, null);
				return;
			}
			var map = {};
			map[parentSchemaName] = {
				sandbox: 'sandbox_' + sandbox.id,
				'ext-base': 'ext_' + Ext.id,
				terrasoft: 'terrasoft_' + Terrasoft.id
			};
			requirejs.config({
				map: map
			});
			require([parentSchemaName], function(parentSchemaConfig) {
				parentSchemaConfig.name = parentSchemaName;
				createSchemaParents(parentSchemaConfig, function(parentSchemaConfig, parentConfig) {
					var parentSchema = createSchema(parentSchemaConfig, parentConfig);
					createViewModelClassBySchema(parentSchema);
					callback(schemaConfig, parentSchema);
				});
			});
		}

		function extendStructure(parent, child) {
			var structure = Terrasoft.deepClone(parent);
			structure.name = child.name;
			structure.extend = child.extend;
			structure.type = child.type;
			structure.schemaDifferences = child.schemaDifferences;
			structure.userCode = child.userCode;
			return structure;
		}

		function createSchema(schemaConfig, parentSchemaConfig) {
			var schemaName = schemaConfig.name;
			var parentSchema = Terrasoft.deepClone(parentSchemaConfig || schemaConfig);
			var schema = extendStructure(parentSchema, schemaConfig);
			schema.schemaDifferences.call(schema);
			schema.sandbox = sandbox;
			if (isProcessMode && schema.userCodeInProcessMode) {
				schema.userCodeInProcessMode.call(schema);
			} else {
				schema.userCode.call(schema);
			}
			schema.name = schemaName;
			return schema;
		}

		function createViewModelClassBySchema(schema) {
			info = this.info =  {
				details: [],
				rules: [],
				columns: [],
				dependencies: [],
				filters: [],
				sysSettings: []
			};
			var viewModelConfig = viewModelGenerator.generate(schema, info);
			viewModelConfig.OpenStructureExplorer = function(config, handler) {
				StructureExplorerUtilities.Open(sandbox, config, handler, mainViewRenderTo, this);
			};
			viewModelConfig.cancel = function() {
				var cardSchemaModuleName = cardSchema.name;
				requirejs.undef(cardSchemaModuleName);
				sandbox.publish('BackHistoryState');
			};
			viewModelConfig.UpdateSchema = function(callback, scope) {
				var entitySchemaModuleName = cardSchema.entitySchema.name;
				requirejs.undef(entitySchemaModuleName);
				sandbox.requireModuleDescriptors(['force!' + entitySchemaModuleName], function() {
					require([entitySchemaModuleName], function() {
						EditPageDesignerHelper.clearCache(cardSchema.name);
						callback.call(scope);
					});
				}, this);
			};
			viewModelConfig.publish = function(eventName, eventArguments, tags) {
				return sandbox.publish(eventName, eventArguments, tags);
			};
			viewModelConfig.OpenColumnPage = function(config, callback) {
				if (!this.columnPAgePageParamsById) {
					this.columnPAgePageParamsById = [];
				}
				var scope = this;
				var handler = function(args) {
					callback.call(scope, args);
				};
				var ColumnPageId = sandbox.id + '_ColumnPage';
				sandbox.subscribe('GetColumnInfo', function() {
					scope.columnPAgePageParamsById[ColumnPageId] = config;
					return scope.columnPAgePageParamsById[ColumnPageId];
				}, [ColumnPageId]);

				var params = sandbox.publish('GetHistoryState');
				sandbox.publish('PushHistoryState', {hash: params.hash.historyState});
				sandbox.loadModule('ColumnPage', {
					renderTo: mainViewRenderTo,
					id: ColumnPageId,
					keepAlive: true
				});
				sandbox.subscribe('PushColumnInfo', handler, [ColumnPageId]);
			};
			viewModelConfig.findElementByNameModification = function(currentElement) {
				var mainContainersIds = ['customPanel', 'leftPanel', 'rightPanel'];
				var result = null;
				for (var i = 0; i < mainContainersIds.length; i++) {
					var containerName = mainContainersIds[i];
					if (!cardSchema.schema.hasOwnProperty(containerName)) {
						continue;
					}

					result = EditPageDesignerHelper.findElementIndexByNameRecursive(
						cardSchema.schema[containerName], currentElement.itemName, currentElement.containerId);
					if (Ext.isEmpty(result)) {
						continue;
					}
					result.ContainerPath.unshift({
						name: containerName,
						items: cardSchema.schema[containerName]
					});
					break;
				}
				return result;
			};
			viewModelConfig.insertModification = function(modification, customConfig, suctomItemConfig) {
				var modificationList = this.get('ModificationsList');
				modificationList.add(modification);
				var schemaModification = Terrasoft.deepClone(modification);
				Ext.apply(schemaModification, customConfig);
				Ext.apply(schemaModification.value, suctomItemConfig);
				EditPageDesignerHelper.updateSchema(cardSchema, [schemaModification]);
			};
			Ext.define(viewModelConfig.name, viewModelConfig);
			return viewModelConfig;
		}

		function loadCommandLine() {
			var commandLineContainer = Ext.get('card-command-line-container');
			sandbox.loadModule('CommandLineModule', {
				renderTo: commandLineContainer
			});
		}

		function init() {
			var state = sandbox.publish('GetHistoryState');
			var currentHash = state.hash;
			var currentState = state.state || {};
			if (currentState.moduleId === sandbox.id) {
				return;
			}
			var newState = Terrasoft.deepClone(currentState);
			newState.moduleId = sandbox.id;
			sandbox.publish('ReplaceHistoryState', {
				stateObj: newState,
				pageTitle: null,
				hash: currentHash.historyState,
				silent: true
			});
		}
		return {
			init: init,
			render: loadCardView,
			destroy: function(config) {
				if (config.keepAlive !== true) {
					var parentSchemaName = parentSchemaNames.pop();
					while (parentSchemaName) {
						requirejs.undef(parentSchemaName);
						parentSchemaName = parentSchemaNames.pop();
					}
					requirejs.undef(savedSchemaName);
				}
			}
		};
	});


