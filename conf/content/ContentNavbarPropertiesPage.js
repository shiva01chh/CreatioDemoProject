Terrasoft.configuration.Structures["ContentNavbarPropertiesPage"] = {innerHierarchyStack: ["ContentNavbarPropertiesPage"], structureParent: "BaseContentItemStructurePage"};
define('ContentNavbarPropertiesPageStructure', ['ContentNavbarPropertiesPageResources'], function(resources) {return {schemaUId:'62a5bce7-e8f5-4671-9991-1fb4a068cad0',schemaCaption: "ContentNavbarPropertiesPage", parentSchemaName: "BaseContentItemStructurePage", packageName: "ContentBuilder", schemaName:'ContentNavbarPropertiesPage',parentSchemaUId:'3a9c94fb-df94-4c89-bdff-d5f4d7a35844',extendParent:false,type:Terrasoft.SchemaType.EDIT_VIEW_MODEL_SCHEMA,entitySchema:'',name:'',extend:'Terrasoft.model.BaseViewModel',schema:{leftPanel:[],rightPanel:[],actions:[],analytics:[]},methods:{},controlsConfig:{},customBindings:{},bindings:{},schemaDifferences:function(){

}};});
 /**
 * @extends BaseContentItemStructurePage
 */
define("ContentNavbarPropertiesPage", ["css!ContentNavbarPropertiesPageCSS", "BaseContentItemStructurePage",
		"ContentNavbarStructureItemViewModel"], function() {
	return {
		modules: {
			IconAlignPropertyModulePage: {
				moduleId: "IconAlignPropertyModulePage",
				moduleName: "ConfigurationModuleV2",
				config: {
					schemaName: "AlignPropertyModule",
					isSchemaConfigInitialized: true,
					useHistoryState: false,
					autoGeneratedContainerSuffix: "-i",
					parameters: {
						viewModelConfig: {
							Config: {
								attributeValue: "Config"
							},
							PropertyName: "IconStyles"
						}
					}
				}
			},
			AlignPropertyModulePage: {
				moduleId: "AlignPropertyModulePage",
				moduleName: "ConfigurationModuleV2",
				config: {
					schemaName: "AlignPropertyModule",
					isSchemaConfigInitialized: true,
					useHistoryState: false,
					parameters: {
						viewModelConfig: {
							Config: {
								attributeValue: "Config"
							},
							PropertyName: "Styles"
						}
					}
				}
			}
		},
		properties: {
			/**
			 * @inheritdoc BaseContentItemStructurePage#itemViewModelNames
			 * @override
			 */
			itemViewModelNames: {
				navbarlink: "Terrasoft.ContentNavbarStructureItemViewModel"
			},

			/**
			 * @inheritdoc BaseContentItemStructurePage#sandboxId
			 * @override
			 */
			sandboxId: "ContentNavbarPropertiesPage",

			/**
			 * @inheritdoc BaseContentItemStructurePage#maxAllowedStructureItems
			 * @override
			 */
			maxAllowedStructureItems: 10
		},
		attributes: {
				/**
				 * Allow use navbar as hamburger menu.
				 */
				IsHamburger: {
					dataValueType: Terrasoft.DataValueType.BOOLEAN,
					type: Terrasoft.ViewModelColumnType.VIRTUAL_COLUMN,
					onChange: "_onIsHamburgerChanged"
				},

				/**
				 * Actual navbar menu icon styles.
				 */
				IconStyles: {
					dataValueType: Terrasoft.DataValueType.TEXT,
					onChange: "onIconStylesChanged"
				},

				/**
				 * Color of menu icon.
				 */
				NavbarIconColor: {
					dataValueType: Terrasoft.DataValueType.TEXT,
					onChange: "_onNavbarIconColorChanged"
				}
		},
		methods: {
			/**
			 * @private
			 */
			_onIsHamburgerChanged: function(model, value) {
				this.$Config.IsHamburger = value;
				this.save();
			},

			/**
			 * @private
			 */
			_onNavbarIconColorChanged: function(model, value) {
				var styles = Ext.JSON.decode(this.$IconStyles, true);
				if (value) {
					styles.color = value;
				} else {
					delete styles.color;
				}
				this.$IconStyles = JSON.stringify(styles, null, "\t");
				this.save();
			},

			/**
			 * @private
			 */
			_initNavbarIconStyles: function(styles) {
				styles = styles || {};
				this.$IconStyles = JSON.stringify(styles, null, "\t");
				if (styles && styles.hasOwnProperty("color")) {
					this.$NavbarIconColor = styles.color;
				} else {
					this.$NavbarIconColor = "#000000";
				}
			},

			/**
			 * @inheritdoc ContentItemPropertiesPage#onContentItemConfigChanged
			 * @override
			 */
			onContentItemConfigChanged: function(config) {
				this.callParent(arguments);
				if (config) {
					this.$Config = config;
					this.$IsHamburger = config.IsHamburger;
					this._initNavbarIconStyles(config.IconStyles);
				}
			},

			/**
			 * Saves content item style.
			 * @protected
			 */
			onIconStylesChanged: function() {
				const styles = Ext.JSON.decode(this.$IconStyles, true);
				Ext.apply(this.$Config, { IconStyles: styles });
			},

			/**
			 * Handler for add link item action.
			 * @protected
			 */
			onAddNavbarLinkClick: function() {
				this.addStructureItem("navbarlink");
			}
		},
		diff: [
			{
				"operation": "insert",
				"name": "AddNavbarLinkButton",
				"parentName": "ActionsStructureContainer",
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.BUTTON,
					"layout": {
						"column": 0,
						"row": 0,
						"colSpan": 12,
						"rowSpan": 1
					},
					"imageConfig": "$Resources.Images.AddButtonIcon",
					"caption": "$Resources.Strings.AddStructureItemBtnCaption",
					"style": Terrasoft.controls.ButtonEnums.style.TRANSPARENT,
					"click": "$onAddNavbarLinkClick",
					"enabled": "$CanAddStructureItem",
					"classes": {
						wrapperClass: ["structure-button-control"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "ContentNavbarProperties",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"items": [],
					"wrapClass": ["content-styles-editor-wrapper", "content-navbar-properties"]
				}
			},
			{
				"operation": "insert",
				"name": "NavbarSettingsLabel",
				"parentName": "ContentNavbarProperties",
				"propertyName": "items",
				"values": {
					"itemType": this.Terrasoft.ViewItemType.LABEL,
					"caption": "$Resources.Strings.NavbarSettingsLabelCaption",
					"classes": {
						"labelClass": ["t-title-label-content-block"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "AlignGroup",
				"parentName": "ContentNavbarProperties",
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTROL_GROUP,
					"items": [],
					"caption": "$Resources.Strings.Align"
				}
			},
			{
				"operation": "insert",
				"name": "AlignContainer",
				"parentName": "AlignGroup",
				"propertyName": "items",
				"values": {
					"markerValue": "AlignContainer",
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"wrapClass": ["content-builder-align-container"],
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "AlignPropertyModulePage",
				"parentName": "AlignContainer",
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.MODULE
				}
			},
			{
				"operation": "insert",
				"name": "IsHamburgerCheckboxContainer",
				"parentName": "ContentNavbarProperties",
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"items": [],
					"wrapClass": ["control-editor-wrapper", "disable-input-label", "main-checkbox-wrap"]
				}
			},
			{
				"operation": "insert",
				"parentName": "IsHamburgerCheckboxContainer",
				"propertyName": "items",
				"name": "IsHamburgerCheckbox",
				"values": {
					"dataValueType": Terrasoft.DataValueType.BOOLEAN,
					"controlConfig": {
						"className": "Terrasoft.CheckBoxEdit",
						"checked": "$IsHamburger"
					},
					"markerValue": "IsHamburgerCheckbox",
					"caption": "$Resources.Strings.IsHamburgerLabel",
					"wrapClass": ["checkbox-control-item", "style-input"]
				}
			},
			{
				"operation": "insert",
				"name": "IsHamburgerLabel",
				"parentName": "IsHamburgerCheckboxContainer",
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.LABEL,
					"caption": "$Resources.Strings.IsHamburgerLabel",
					"classes": {
						"labelClass": ["checkbox-label"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "NavbarIconStylesContainer",
				"propertyName": "items",
				"parentName": "ContentNavbarProperties",
				"values": {
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"items": [],
					"wrapClass": ["navbar-styles-container"],
					"visible": "$IsHamburger"
				}
			},
			{
				"operation": "insert",
				"name": "NavbarIconAlignLabel",
				"parentName": "NavbarIconStylesContainer",
				"propertyName": "items",
				"values": {
					"itemType": this.Terrasoft.ViewItemType.LABEL,
					"caption": "$Resources.Strings.NavbarIconAlignLabel",
					"classes": {
						"labelClass": ["t-properties-label"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "IconAlignContainer",
				"parentName": "NavbarIconStylesContainer",
				"propertyName": "items",
				"values": {
					"markerValue": "AlignContainer",
					"itemType": Terrasoft.ViewItemType.CONTAINER,
					"wrapClass": ["content-builder-align-container"],
					"items": []
				}
			},
			{
				"operation": "insert",
				"name": "IconAlignPropertyModulePage",
				"parentName": "IconAlignContainer",
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.MODULE
				}
			},
			{
				"operation": "insert",
				"name": "NavbarIconColorLabel",
				"parentName": "NavbarIconStylesContainer",
				"propertyName": "items",
				"values": {
					"itemType": this.Terrasoft.ViewItemType.LABEL,
					"caption": "$Resources.Strings.NavbarIconColorLabel",
					"classes": {
						"labelClass": ["t-properties-label"]
					}
				}
			},
			{
				"operation": "insert",
				"name": "NavbarIconColorButton",
				"parentName": "NavbarIconStylesContainer",
				"propertyName": "items",
				"values": {
					"itemType": Terrasoft.ViewItemType.COLOR_BUTTON,
					"value": "$NavbarIconColor",
					"classes": {
						"wrapClasses": ["navbar-icon-color-button"]
					},
					"menuItemClassName": Terrasoft.MenuItemType.COLOR_PICKER
				}
			}
		]
	};
});


